
d:/GDRIVE/School/DEVIT_UNI/2020_T1/SIT210/OnTrack/SIT210-03.1P/SIT210-Task3_1P-WebHook/target/1.4.4/photon/SIT210-Task3_1P-WebHook.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000030a4  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  080a30c0  080a30c0  000130c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  40024000  080a30c8  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000068  20000000  080a30cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000059c  20000068  20000068  00030068  2**2
                  ALLOC
  7 .module_info_suffix 00000028  080a3134  080a3134  00023134  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  080a315c  080a315c  0002315c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000b2e73  00000000  00000000  00023160  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000fe15  00000000  00000000  000d5fd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000139cd  00000000  00000000  000e5de8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001f18  00000000  00000000  000f97b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00003160  00000000  00000000  000fb6cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00024c9c  00000000  00000000  000fe82d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00023f60  00000000  00000000  001234c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000a5e95  00000000  00000000  00147429  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000b8e0  00000000  00000000  001ed2c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f002 fe59 	bl	80a2ce4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f002 fe5e 	bl	80a2cfa <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a30cc 	.word	0x080a30cc
 80a004c:	20000068 	.word	0x20000068
 80a0050:	20000068 	.word	0x20000068
 80a0054:	20000604 	.word	0x20000604
 80a0058:	20000604 	.word	0x20000604

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f000 fe33 	bl	80a0cc8 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a3084 	.word	0x080a3084
 80a0084:	080a30bc 	.word	0x080a30bc

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b814 	b.w	80a00b4 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f8bf 	bl	80a0210 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f000 bdd9 	b.w	80a0c4c <_post_loop>

080a009a <_Znwj>:
 80a009a:	f000 bb8f 	b.w	80a07bc <malloc>

080a009e <_ZdlPv>:
 80a009e:	f000 bb95 	b.w	80a07cc <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr
	...

080a00b4 <setup>:
float UVIR;
float UVindex;



void setup() {
 80a00b4:	b508      	push	{r3, lr}
  while(! uv.begin()) {
 80a00b6:	480a      	ldr	r0, [pc, #40]	; (80a00e0 <setup+0x2c>)
 80a00b8:	f000 f977 	bl	80a03aa <_ZN15Adafruit_SI11455beginEv>
 80a00bc:	b948      	cbnz	r0, 80a00d2 <setup+0x1e>
    Serial.println("Didn't find Si1145");
 80a00be:	f001 f9c3 	bl	80a1448 <_Z16_fetch_usbserialv>
 80a00c2:	4908      	ldr	r1, [pc, #32]	; (80a00e4 <setup+0x30>)
 80a00c4:	f000 fd0a 	bl	80a0adc <_ZN5Print7printlnEPKc>
    delay(1000);
 80a00c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a00cc:	f000 fd5c 	bl	80a0b88 <delay>
float UVindex;



void setup() {
  while(! uv.begin()) {
 80a00d0:	e7f1      	b.n	80a00b6 <setup+0x2>
    Serial.println("Didn't find Si1145");
    delay(1000);
  }

  Serial.println("OK!");
 80a00d2:	f001 f9b9 	bl	80a1448 <_Z16_fetch_usbserialv>
}
 80a00d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  while(! uv.begin()) {
    Serial.println("Didn't find Si1145");
    delay(1000);
  }

  Serial.println("OK!");
 80a00da:	4903      	ldr	r1, [pc, #12]	; (80a00e8 <setup+0x34>)
 80a00dc:	f000 bcfe 	b.w	80a0adc <_ZN5Print7printlnEPKc>
 80a00e0:	20000071 	.word	0x20000071
 80a00e4:	080a2db8 	.word	0x080a2db8
 80a00e8:	080a2dcb 	.word	0x080a2dcb

080a00ec <_Z5getUVv>:
    publishData();
        
}


void getUV(){
 80a00ec:	b510      	push	{r4, lr}
    UVVisible = uv.readVisible();
 80a00ee:	4c0d      	ldr	r4, [pc, #52]	; (80a0124 <_Z5getUVv+0x38>)
 80a00f0:	4620      	mov	r0, r4
 80a00f2:	f000 f8f1 	bl	80a02d8 <_ZN15Adafruit_SI114511readVisibleEv>
 80a00f6:	f002 fa8b 	bl	80a2610 <__aeabi_ui2f>
 80a00fa:	4b0b      	ldr	r3, [pc, #44]	; (80a0128 <_Z5getUVv+0x3c>)
 80a00fc:	6018      	str	r0, [r3, #0]
    UVIR = uv.readIR();
 80a00fe:	4620      	mov	r0, r4
 80a0100:	f000 f8ed 	bl	80a02de <_ZN15Adafruit_SI11456readIREv>
 80a0104:	f002 fa84 	bl	80a2610 <__aeabi_ui2f>
 80a0108:	4b08      	ldr	r3, [pc, #32]	; (80a012c <_Z5getUVv+0x40>)
 80a010a:	6018      	str	r0, [r3, #0]
    UVindex = uv.readUV();
 80a010c:	4620      	mov	r0, r4
 80a010e:	f000 f8e0 	bl	80a02d2 <_ZN15Adafruit_SI11456readUVEv>
    UVindex /= 100.0;
 80a0112:	f002 fa7d 	bl	80a2610 <__aeabi_ui2f>
 80a0116:	4906      	ldr	r1, [pc, #24]	; (80a0130 <_Z5getUVv+0x44>)
 80a0118:	f002 fb86 	bl	80a2828 <__aeabi_fdiv>
 80a011c:	4b05      	ldr	r3, [pc, #20]	; (80a0134 <_Z5getUVv+0x48>)
 80a011e:	6018      	str	r0, [r3, #0]
 80a0120:	bd10      	pop	{r4, pc}
 80a0122:	bf00      	nop
 80a0124:	20000071 	.word	0x20000071
 80a0128:	2000006c 	.word	0x2000006c
 80a012c:	20000078 	.word	0x20000078
 80a0130:	42c80000 	.word	0x42c80000
 80a0134:	20000074 	.word	0x20000074

080a0138 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a0138:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a013a:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a013c:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 80a013e:	b17c      	cbz	r4, 80a0160 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a0140:	6863      	ldr	r3, [r4, #4]
 80a0142:	3b01      	subs	r3, #1
 80a0144:	6063      	str	r3, [r4, #4]
 80a0146:	b95b      	cbnz	r3, 80a0160 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 80a0148:	6823      	ldr	r3, [r4, #0]
 80a014a:	4620      	mov	r0, r4
 80a014c:	689b      	ldr	r3, [r3, #8]
 80a014e:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a0150:	68a3      	ldr	r3, [r4, #8]
 80a0152:	3b01      	subs	r3, #1
 80a0154:	60a3      	str	r3, [r4, #8]
 80a0156:	b91b      	cbnz	r3, 80a0160 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a0158:	6823      	ldr	r3, [r4, #0]
 80a015a:	4620      	mov	r0, r4
 80a015c:	68db      	ldr	r3, [r3, #12]
 80a015e:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 80a0160:	4628      	mov	r0, r5
 80a0162:	bd38      	pop	{r3, r4, r5, pc}

080a0164 <_Z11publishDatav>:
}



void publishData(){
 80a0164:	b510      	push	{r4, lr}

  Particle.publish( "UVVis", String(UVVisible), 60, PRIVATE);
 80a0166:	4b23      	ldr	r3, [pc, #140]	; (80a01f4 <_Z11publishDatav+0x90>)
    UVindex /= 100.0;
}



void publishData(){
 80a0168:	b088      	sub	sp, #32
 80a016a:	4c23      	ldr	r4, [pc, #140]	; (80a01f8 <_Z11publishDatav+0x94>)

  Particle.publish( "UVVis", String(UVVisible), 60, PRIVATE);
 80a016c:	6819      	ldr	r1, [r3, #0]
 80a016e:	2206      	movs	r2, #6
 80a0170:	a804      	add	r0, sp, #16
 80a0172:	f000 fc67 	bl	80a0a44 <_ZN6StringC1Efi>
 80a0176:	7823      	ldrb	r3, [r4, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a0178:	9a04      	ldr	r2, [sp, #16]
 80a017a:	4920      	ldr	r1, [pc, #128]	; (80a01fc <_Z11publishDatav+0x98>)
 80a017c:	f88d 3000 	strb.w	r3, [sp]
 80a0180:	a802      	add	r0, sp, #8
 80a0182:	233c      	movs	r3, #60	; 0x3c
 80a0184:	f000 ff0e 	bl	80a0fa4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0188:	a803      	add	r0, sp, #12
 80a018a:	f7ff ffd5 	bl	80a0138 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a018e:	a804      	add	r0, sp, #16
 80a0190:	f000 fc00 	bl	80a0994 <_ZN6StringD1Ev>
  Particle.publish( "UVIR", String(UVIR), 60, PRIVATE);
 80a0194:	4b1a      	ldr	r3, [pc, #104]	; (80a0200 <_Z11publishDatav+0x9c>)
 80a0196:	2206      	movs	r2, #6
 80a0198:	6819      	ldr	r1, [r3, #0]
 80a019a:	a804      	add	r0, sp, #16
 80a019c:	f000 fc52 	bl	80a0a44 <_ZN6StringC1Efi>
 80a01a0:	7823      	ldrb	r3, [r4, #0]
 80a01a2:	9a04      	ldr	r2, [sp, #16]
 80a01a4:	4917      	ldr	r1, [pc, #92]	; (80a0204 <_Z11publishDatav+0xa0>)
 80a01a6:	f88d 3000 	strb.w	r3, [sp]
 80a01aa:	a802      	add	r0, sp, #8
 80a01ac:	233c      	movs	r3, #60	; 0x3c
 80a01ae:	f000 fef9 	bl	80a0fa4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a01b2:	a803      	add	r0, sp, #12
 80a01b4:	f7ff ffc0 	bl	80a0138 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a01b8:	a804      	add	r0, sp, #16
 80a01ba:	f000 fbeb 	bl	80a0994 <_ZN6StringD1Ev>
  Particle.publish( "UVIdx", String(UVindex), 60, PRIVATE);
 80a01be:	4b12      	ldr	r3, [pc, #72]	; (80a0208 <_Z11publishDatav+0xa4>)
 80a01c0:	2206      	movs	r2, #6
 80a01c2:	6819      	ldr	r1, [r3, #0]
 80a01c4:	a804      	add	r0, sp, #16
 80a01c6:	f000 fc3d 	bl	80a0a44 <_ZN6StringC1Efi>
 80a01ca:	7823      	ldrb	r3, [r4, #0]
 80a01cc:	9a04      	ldr	r2, [sp, #16]
 80a01ce:	490f      	ldr	r1, [pc, #60]	; (80a020c <_Z11publishDatav+0xa8>)
 80a01d0:	f88d 3000 	strb.w	r3, [sp]
 80a01d4:	a802      	add	r0, sp, #8
 80a01d6:	233c      	movs	r3, #60	; 0x3c
 80a01d8:	f000 fee4 	bl	80a0fa4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a01dc:	a803      	add	r0, sp, #12
 80a01de:	f7ff ffab 	bl	80a0138 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a01e2:	a804      	add	r0, sp, #16
 80a01e4:	f000 fbd6 	bl	80a0994 <_ZN6StringD1Ev>
  delay(10000);
 80a01e8:	f242 7010 	movw	r0, #10000	; 0x2710
 80a01ec:	f000 fccc 	bl	80a0b88 <delay>
} 
 80a01f0:	b008      	add	sp, #32
 80a01f2:	bd10      	pop	{r4, pc}
 80a01f4:	2000006c 	.word	0x2000006c
 80a01f8:	20000070 	.word	0x20000070
 80a01fc:	080a2dcf 	.word	0x080a2dcf
 80a0200:	20000078 	.word	0x20000078
 80a0204:	080a2dd5 	.word	0x080a2dd5
 80a0208:	20000074 	.word	0x20000074
 80a020c:	080a2dda 	.word	0x080a2dda

080a0210 <loop>:
  }

  Serial.println("OK!");
}

void loop() {
 80a0210:	b508      	push	{r3, lr}
    getUV();
 80a0212:	f7ff ff6b 	bl	80a00ec <_Z5getUVv>
    publishData();
        
}
 80a0216:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Serial.println("OK!");
}

void loop() {
    getUV();
    publishData();
 80a021a:	f7ff bfa3 	b.w	80a0164 <_Z11publishDatav>
	...

080a0220 <_GLOBAL__sub_I_uv>:

  Particle.publish( "UVVis", String(UVVisible), 60, PRIVATE);
  Particle.publish( "UVIR", String(UVIR), 60, PRIVATE);
  Particle.publish( "UVIdx", String(UVindex), 60, PRIVATE);
  delay(10000);
} 
 80a0220:	b508      	push	{r3, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a0222:	4b05      	ldr	r3, [pc, #20]	; (80a0238 <_GLOBAL__sub_I_uv+0x18>)
 80a0224:	2201      	movs	r2, #1
 80a0226:	701a      	strb	r2, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0228:	f000 f942 	bl	80a04b0 <HAL_Pin_Map>
 80a022c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
const int TEMPPIN = D2;
const int FLOWPIN = A0;
const int MOIST1PIN = A1;

//UV: 
Adafruit_SI1145 uv = Adafruit_SI1145();
 80a0230:	4802      	ldr	r0, [pc, #8]	; (80a023c <_GLOBAL__sub_I_uv+0x1c>)
 80a0232:	f000 b805 	b.w	80a0240 <_ZN15Adafruit_SI1145C1Ev>
 80a0236:	bf00      	nop
 80a0238:	20000070 	.word	0x20000070
 80a023c:	20000071 	.word	0x20000071

080a0240 <_ZN15Adafruit_SI1145C1Ev>:

#include "application.h"
#include "Adafruit_SI1145.h"

Adafruit_SI1145::Adafruit_SI1145() {
  _addr = SI1145_ADDR;
 80a0240:	2360      	movs	r3, #96	; 0x60
 80a0242:	7003      	strb	r3, [r0, #0]
}
 80a0244:	4770      	bx	lr

080a0246 <_ZN15Adafruit_SI11455read8Eh>:
  return read8(SI1145_REG_PARAMRD);
}

/*********************************************************************/

uint8_t  Adafruit_SI1145::read8(uint8_t reg) {
 80a0246:	b538      	push	{r3, r4, r5, lr}
 80a0248:	4604      	mov	r4, r0
 80a024a:	460d      	mov	r5, r1
  uint16_t val;
    Wire.beginTransmission(_addr);
 80a024c:	f001 fb46 	bl	80a18dc <_Z19__fetch_global_Wirev>
 80a0250:	7821      	ldrb	r1, [r4, #0]
 80a0252:	f001 fa3d 	bl	80a16d0 <_ZN7TwoWire17beginTransmissionEh>
    Wire.write((uint8_t)reg);
 80a0256:	f001 fb41 	bl	80a18dc <_Z19__fetch_global_Wirev>
 80a025a:	6803      	ldr	r3, [r0, #0]
 80a025c:	4629      	mov	r1, r5
 80a025e:	689b      	ldr	r3, [r3, #8]
 80a0260:	4798      	blx	r3
    Wire.endTransmission();
 80a0262:	f001 fb3b 	bl	80a18dc <_Z19__fetch_global_Wirev>
 80a0266:	f001 fa3b 	bl	80a16e0 <_ZN7TwoWire15endTransmissionEv>

    Wire.requestFrom((uint8_t)_addr, (uint8_t)1);  
 80a026a:	f001 fb37 	bl	80a18dc <_Z19__fetch_global_Wirev>
 80a026e:	2201      	movs	r2, #1
 80a0270:	7821      	ldrb	r1, [r4, #0]
 80a0272:	f001 fa2a 	bl	80a16ca <_ZN7TwoWire11requestFromEhh>
    return Wire.read();
 80a0276:	f001 fb31 	bl	80a18dc <_Z19__fetch_global_Wirev>
 80a027a:	6803      	ldr	r3, [r0, #0]
 80a027c:	695b      	ldr	r3, [r3, #20]
 80a027e:	4798      	blx	r3
}
 80a0280:	b2c0      	uxtb	r0, r0
 80a0282:	bd38      	pop	{r3, r4, r5, pc}

080a0284 <_ZN15Adafruit_SI11456read16Eh>:

uint16_t Adafruit_SI1145::read16(uint8_t a) {
 80a0284:	b538      	push	{r3, r4, r5, lr}
 80a0286:	4604      	mov	r4, r0
 80a0288:	460d      	mov	r5, r1
  uint16_t ret;

  Wire.beginTransmission(_addr); // start transmission to device 
 80a028a:	f001 fb27 	bl	80a18dc <_Z19__fetch_global_Wirev>
 80a028e:	7821      	ldrb	r1, [r4, #0]
 80a0290:	f001 fa1e 	bl	80a16d0 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(a); // sends register address to read from
 80a0294:	f001 fb22 	bl	80a18dc <_Z19__fetch_global_Wirev>
 80a0298:	6803      	ldr	r3, [r0, #0]
 80a029a:	4629      	mov	r1, r5
 80a029c:	689b      	ldr	r3, [r3, #8]
 80a029e:	4798      	blx	r3
  Wire.endTransmission(); // end transmission
 80a02a0:	f001 fb1c 	bl	80a18dc <_Z19__fetch_global_Wirev>
 80a02a4:	f001 fa1c 	bl	80a16e0 <_ZN7TwoWire15endTransmissionEv>
  
  Wire.requestFrom(_addr, (uint8_t)2);// send data n-bytes read
 80a02a8:	f001 fb18 	bl	80a18dc <_Z19__fetch_global_Wirev>
 80a02ac:	7821      	ldrb	r1, [r4, #0]
 80a02ae:	2202      	movs	r2, #2
 80a02b0:	f001 fa0b 	bl	80a16ca <_ZN7TwoWire11requestFromEhh>
  ret = Wire.read(); // receive DATA
 80a02b4:	f001 fb12 	bl	80a18dc <_Z19__fetch_global_Wirev>
 80a02b8:	6803      	ldr	r3, [r0, #0]
 80a02ba:	695b      	ldr	r3, [r3, #20]
 80a02bc:	4798      	blx	r3
 80a02be:	4604      	mov	r4, r0
  ret |= (uint16_t)Wire.read() << 8; // receive DATA
 80a02c0:	f001 fb0c 	bl	80a18dc <_Z19__fetch_global_Wirev>
 80a02c4:	6803      	ldr	r3, [r0, #0]
 80a02c6:	695b      	ldr	r3, [r3, #20]
 80a02c8:	4798      	blx	r3

  return ret;
 80a02ca:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
}
 80a02ce:	b280      	uxth	r0, r0
 80a02d0:	bd38      	pop	{r3, r4, r5, pc}

080a02d2 <_ZN15Adafruit_SI11456readUVEv>:

//////////////////////////////////////////////////////

// returns the UV index * 100 (divide by 100 to get the index)
uint16_t Adafruit_SI1145::readUV(void) {
 return read16(0x2C); 
 80a02d2:	212c      	movs	r1, #44	; 0x2c
 80a02d4:	f7ff bfd6 	b.w	80a0284 <_ZN15Adafruit_SI11456read16Eh>

080a02d8 <_ZN15Adafruit_SI114511readVisibleEv>:
}

// returns visible+IR light levels
uint16_t Adafruit_SI1145::readVisible(void) {
 return read16(0x22); 
 80a02d8:	2122      	movs	r1, #34	; 0x22
 80a02da:	f7ff bfd3 	b.w	80a0284 <_ZN15Adafruit_SI11456read16Eh>

080a02de <_ZN15Adafruit_SI11456readIREv>:
}

// returns IR light levels
uint16_t Adafruit_SI1145::readIR(void) {
 return read16(0x24); 
 80a02de:	2124      	movs	r1, #36	; 0x24
 80a02e0:	f7ff bfd0 	b.w	80a0284 <_ZN15Adafruit_SI11456read16Eh>

080a02e4 <_ZN15Adafruit_SI11456write8Ehh>:
  ret |= (uint16_t)Wire.read() << 8; // receive DATA

  return ret;
}

void Adafruit_SI1145::write8(uint8_t reg, uint8_t val) {
 80a02e4:	b570      	push	{r4, r5, r6, lr}
 80a02e6:	4606      	mov	r6, r0
 80a02e8:	4614      	mov	r4, r2
 80a02ea:	460d      	mov	r5, r1

  Wire.beginTransmission(_addr); // start transmission to device 
 80a02ec:	f001 faf6 	bl	80a18dc <_Z19__fetch_global_Wirev>
 80a02f0:	7831      	ldrb	r1, [r6, #0]
 80a02f2:	f001 f9ed 	bl	80a16d0 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg); // sends register address to write
 80a02f6:	f001 faf1 	bl	80a18dc <_Z19__fetch_global_Wirev>
 80a02fa:	6803      	ldr	r3, [r0, #0]
 80a02fc:	4629      	mov	r1, r5
 80a02fe:	689b      	ldr	r3, [r3, #8]
 80a0300:	4798      	blx	r3
  Wire.write(val); // sends value
 80a0302:	f001 faeb 	bl	80a18dc <_Z19__fetch_global_Wirev>
 80a0306:	6803      	ldr	r3, [r0, #0]
 80a0308:	4621      	mov	r1, r4
 80a030a:	689b      	ldr	r3, [r3, #8]
 80a030c:	4798      	blx	r3
  Wire.endTransmission(); // end transmission
 80a030e:	f001 fae5 	bl	80a18dc <_Z19__fetch_global_Wirev>
}
 80a0312:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void Adafruit_SI1145::write8(uint8_t reg, uint8_t val) {

  Wire.beginTransmission(_addr); // start transmission to device 
  Wire.write(reg); // sends register address to write
  Wire.write(val); // sends value
  Wire.endTransmission(); // end transmission
 80a0316:	f001 b9e3 	b.w	80a16e0 <_ZN7TwoWire15endTransmissionEv>

080a031a <_ZN15Adafruit_SI11455resetEv>:
  write8(SI1145_REG_COMMAND, SI1145_PSALS_AUTO);

  return true;
}

void Adafruit_SI1145::reset() {
 80a031a:	b510      	push	{r4, lr}
 80a031c:	4604      	mov	r4, r0
  write8(SI1145_REG_MEASRATE0, 0);
 80a031e:	2200      	movs	r2, #0
 80a0320:	2108      	movs	r1, #8
 80a0322:	f7ff ffdf 	bl	80a02e4 <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_MEASRATE1, 0);
 80a0326:	4620      	mov	r0, r4
 80a0328:	2200      	movs	r2, #0
 80a032a:	2109      	movs	r1, #9
 80a032c:	f7ff ffda 	bl	80a02e4 <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_IRQEN, 0);
 80a0330:	4620      	mov	r0, r4
 80a0332:	2200      	movs	r2, #0
 80a0334:	2104      	movs	r1, #4
 80a0336:	f7ff ffd5 	bl	80a02e4 <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_IRQMODE1, 0);
 80a033a:	4620      	mov	r0, r4
 80a033c:	2200      	movs	r2, #0
 80a033e:	2105      	movs	r1, #5
 80a0340:	f7ff ffd0 	bl	80a02e4 <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_IRQMODE2, 0);
 80a0344:	4620      	mov	r0, r4
 80a0346:	2200      	movs	r2, #0
 80a0348:	2106      	movs	r1, #6
 80a034a:	f7ff ffcb 	bl	80a02e4 <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_INTCFG, 0);
 80a034e:	4620      	mov	r0, r4
 80a0350:	2200      	movs	r2, #0
 80a0352:	2103      	movs	r1, #3
 80a0354:	f7ff ffc6 	bl	80a02e4 <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_IRQSTAT, 0xFF);
 80a0358:	4620      	mov	r0, r4
 80a035a:	22ff      	movs	r2, #255	; 0xff
 80a035c:	2121      	movs	r1, #33	; 0x21
 80a035e:	f7ff ffc1 	bl	80a02e4 <_ZN15Adafruit_SI11456write8Ehh>

  write8(SI1145_REG_COMMAND, SI1145_RESET);
 80a0362:	2201      	movs	r2, #1
 80a0364:	2118      	movs	r1, #24
 80a0366:	4620      	mov	r0, r4
 80a0368:	f7ff ffbc 	bl	80a02e4 <_ZN15Adafruit_SI11456write8Ehh>
  delay(10);
 80a036c:	200a      	movs	r0, #10
 80a036e:	f000 fc0b 	bl	80a0b88 <delay>
  write8(SI1145_REG_HWKEY, 0x17);
 80a0372:	4620      	mov	r0, r4
 80a0374:	2217      	movs	r2, #23
 80a0376:	2107      	movs	r1, #7
 80a0378:	f7ff ffb4 	bl	80a02e4 <_ZN15Adafruit_SI11456write8Ehh>
  
  delay(10);
}
 80a037c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  write8(SI1145_REG_COMMAND, SI1145_RESET);
  delay(10);
  write8(SI1145_REG_HWKEY, 0x17);
  
  delay(10);
 80a0380:	200a      	movs	r0, #10
 80a0382:	f000 bc01 	b.w	80a0b88 <delay>

080a0386 <_ZN15Adafruit_SI114510writeParamEhh>:
 return read16(0x26); 
}

/*********************************************************************/

uint8_t Adafruit_SI1145::writeParam(uint8_t p, uint8_t v) {
 80a0386:	b538      	push	{r3, r4, r5, lr}
 80a0388:	4604      	mov	r4, r0
 80a038a:	460d      	mov	r5, r1
  //Serial.print("Param 0x"); Serial.print(p, HEX);
  //Serial.print(" = 0x"); Serial.println(v, HEX);
  
  write8(SI1145_REG_PARAMWR, v);
 80a038c:	2117      	movs	r1, #23
 80a038e:	f7ff ffa9 	bl	80a02e4 <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_COMMAND, p | SI1145_PARAM_SET);
 80a0392:	4620      	mov	r0, r4
 80a0394:	f045 02a0 	orr.w	r2, r5, #160	; 0xa0
 80a0398:	2118      	movs	r1, #24
 80a039a:	f7ff ffa3 	bl	80a02e4 <_ZN15Adafruit_SI11456write8Ehh>
  return read8(SI1145_REG_PARAMRD);
 80a039e:	4620      	mov	r0, r4
}
 80a03a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  //Serial.print("Param 0x"); Serial.print(p, HEX);
  //Serial.print(" = 0x"); Serial.println(v, HEX);
  
  write8(SI1145_REG_PARAMWR, v);
  write8(SI1145_REG_COMMAND, p | SI1145_PARAM_SET);
  return read8(SI1145_REG_PARAMRD);
 80a03a4:	212e      	movs	r1, #46	; 0x2e
 80a03a6:	f7ff bf4e 	b.w	80a0246 <_ZN15Adafruit_SI11455read8Eh>

080a03aa <_ZN15Adafruit_SI11455beginEv>:
Adafruit_SI1145::Adafruit_SI1145() {
  _addr = SI1145_ADDR;
}


boolean Adafruit_SI1145::begin(void) {
 80a03aa:	b510      	push	{r4, lr}
 80a03ac:	4604      	mov	r4, r0
  Wire.begin();
 80a03ae:	f001 fa95 	bl	80a18dc <_Z19__fetch_global_Wirev>
 80a03b2:	f001 f97b 	bl	80a16ac <_ZN7TwoWire5beginEv>
 
  uint8_t id = read8(SI1145_REG_PARTID);
 80a03b6:	2100      	movs	r1, #0
 80a03b8:	4620      	mov	r0, r4
 80a03ba:	f7ff ff44 	bl	80a0246 <_ZN15Adafruit_SI11455read8Eh>
  if (id != 0x45) return false; // look for SI1145
 80a03be:	2845      	cmp	r0, #69	; 0x45
 80a03c0:	d172      	bne.n	80a04a8 <_ZN15Adafruit_SI11455beginEv+0xfe>
  
  reset();
 80a03c2:	4620      	mov	r0, r4
 80a03c4:	f7ff ffa9 	bl	80a031a <_ZN15Adafruit_SI11455resetEv>
  

    /***********************************/
  // enable UVindex measurement coefficients!
  write8(SI1145_REG_UCOEFF0, 0x29);
 80a03c8:	4620      	mov	r0, r4
 80a03ca:	2229      	movs	r2, #41	; 0x29
 80a03cc:	2113      	movs	r1, #19
 80a03ce:	f7ff ff89 	bl	80a02e4 <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_UCOEFF1, 0x89);
 80a03d2:	4620      	mov	r0, r4
 80a03d4:	2289      	movs	r2, #137	; 0x89
 80a03d6:	2114      	movs	r1, #20
 80a03d8:	f7ff ff84 	bl	80a02e4 <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_UCOEFF2, 0x02);
 80a03dc:	4620      	mov	r0, r4
 80a03de:	2202      	movs	r2, #2
 80a03e0:	2115      	movs	r1, #21
 80a03e2:	f7ff ff7f 	bl	80a02e4 <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_UCOEFF3, 0x00);
 80a03e6:	4620      	mov	r0, r4
 80a03e8:	2200      	movs	r2, #0
 80a03ea:	2116      	movs	r1, #22
 80a03ec:	f7ff ff7a 	bl	80a02e4 <_ZN15Adafruit_SI11456write8Ehh>

  // enable UV sensor
  writeParam(SI1145_PARAM_CHLIST, SI1145_PARAM_CHLIST_ENUV |
  SI1145_PARAM_CHLIST_ENALSIR | SI1145_PARAM_CHLIST_ENALSVIS |
  SI1145_PARAM_CHLIST_ENPS1);
 80a03f0:	22b1      	movs	r2, #177	; 0xb1
 80a03f2:	2101      	movs	r1, #1
 80a03f4:	4620      	mov	r0, r4
 80a03f6:	f7ff ffc6 	bl	80a0386 <_ZN15Adafruit_SI114510writeParamEhh>
  // enable interrupt on every sample
  write8(SI1145_REG_INTCFG, SI1145_REG_INTCFG_INTOE);  
 80a03fa:	4620      	mov	r0, r4
 80a03fc:	2201      	movs	r2, #1
 80a03fe:	2103      	movs	r1, #3
 80a0400:	f7ff ff70 	bl	80a02e4 <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_IRQEN, SI1145_REG_IRQEN_ALSEVERYSAMPLE);  
 80a0404:	4620      	mov	r0, r4
 80a0406:	2201      	movs	r2, #1
 80a0408:	2104      	movs	r1, #4
 80a040a:	f7ff ff6b 	bl	80a02e4 <_ZN15Adafruit_SI11456write8Ehh>

/****************************** Prox Sense 1 */

  // program LED current
  write8(SI1145_REG_PSLED21, 0x03); // 20mA for LED 1 only
 80a040e:	4620      	mov	r0, r4
 80a0410:	2203      	movs	r2, #3
 80a0412:	210f      	movs	r1, #15
 80a0414:	f7ff ff66 	bl	80a02e4 <_ZN15Adafruit_SI11456write8Ehh>
  writeParam(SI1145_PARAM_PS1ADCMUX, SI1145_PARAM_ADCMUX_LARGEIR);
 80a0418:	2203      	movs	r2, #3
 80a041a:	2107      	movs	r1, #7
 80a041c:	4620      	mov	r0, r4
 80a041e:	f7ff ffb2 	bl	80a0386 <_ZN15Adafruit_SI114510writeParamEhh>
  // prox sensor #1 uses LED #1
  writeParam(SI1145_PARAM_PSLED12SEL, SI1145_PARAM_PSLED12SEL_PS1LED1);
 80a0422:	2201      	movs	r2, #1
 80a0424:	2102      	movs	r1, #2
 80a0426:	4620      	mov	r0, r4
 80a0428:	f7ff ffad 	bl	80a0386 <_ZN15Adafruit_SI114510writeParamEhh>
  // fastest clocks, clock div 1
  writeParam(SI1145_PARAM_PSADCGAIN, 0);
 80a042c:	2200      	movs	r2, #0
 80a042e:	210b      	movs	r1, #11
 80a0430:	4620      	mov	r0, r4
 80a0432:	f7ff ffa8 	bl	80a0386 <_ZN15Adafruit_SI114510writeParamEhh>
  // take 511 clocks to measure
  writeParam(SI1145_PARAM_PSADCOUNTER, SI1145_PARAM_ADCCOUNTER_511CLK);
 80a0436:	2270      	movs	r2, #112	; 0x70
 80a0438:	210a      	movs	r1, #10
 80a043a:	4620      	mov	r0, r4
 80a043c:	f7ff ffa3 	bl	80a0386 <_ZN15Adafruit_SI114510writeParamEhh>
  // in prox mode, high range
  writeParam(SI1145_PARAM_PSADCMISC, SI1145_PARAM_PSADCMISC_RANGE|
    SI1145_PARAM_PSADCMISC_PSMODE);
 80a0440:	2224      	movs	r2, #36	; 0x24
 80a0442:	210c      	movs	r1, #12
 80a0444:	4620      	mov	r0, r4
 80a0446:	f7ff ff9e 	bl	80a0386 <_ZN15Adafruit_SI114510writeParamEhh>

  writeParam(SI1145_PARAM_ALSIRADCMUX, SI1145_PARAM_ADCMUX_SMALLIR);  
 80a044a:	2200      	movs	r2, #0
 80a044c:	210e      	movs	r1, #14
 80a044e:	4620      	mov	r0, r4
 80a0450:	f7ff ff99 	bl	80a0386 <_ZN15Adafruit_SI114510writeParamEhh>
  // fastest clocks, clock div 1
  writeParam(SI1145_PARAM_ALSIRADCGAIN, 0);
 80a0454:	2200      	movs	r2, #0
 80a0456:	211e      	movs	r1, #30
 80a0458:	4620      	mov	r0, r4
 80a045a:	f7ff ff94 	bl	80a0386 <_ZN15Adafruit_SI114510writeParamEhh>
  // take 511 clocks to measure
  writeParam(SI1145_PARAM_ALSIRADCOUNTER, SI1145_PARAM_ADCCOUNTER_511CLK);
 80a045e:	2270      	movs	r2, #112	; 0x70
 80a0460:	211d      	movs	r1, #29
 80a0462:	4620      	mov	r0, r4
 80a0464:	f7ff ff8f 	bl	80a0386 <_ZN15Adafruit_SI114510writeParamEhh>
  // in high range mode
  writeParam(SI1145_PARAM_ALSIRADCMISC, SI1145_PARAM_ALSIRADCMISC_RANGE);
 80a0468:	2220      	movs	r2, #32
 80a046a:	211f      	movs	r1, #31
 80a046c:	4620      	mov	r0, r4
 80a046e:	f7ff ff8a 	bl	80a0386 <_ZN15Adafruit_SI114510writeParamEhh>



  // fastest clocks, clock div 1
  writeParam(SI1145_PARAM_ALSVISADCGAIN, 0);
 80a0472:	2200      	movs	r2, #0
 80a0474:	2111      	movs	r1, #17
 80a0476:	4620      	mov	r0, r4
 80a0478:	f7ff ff85 	bl	80a0386 <_ZN15Adafruit_SI114510writeParamEhh>
  // take 511 clocks to measure
  writeParam(SI1145_PARAM_ALSVISADCOUNTER, SI1145_PARAM_ADCCOUNTER_511CLK);
 80a047c:	2270      	movs	r2, #112	; 0x70
 80a047e:	2110      	movs	r1, #16
 80a0480:	4620      	mov	r0, r4
 80a0482:	f7ff ff80 	bl	80a0386 <_ZN15Adafruit_SI114510writeParamEhh>
  // in high range mode (not normal signal)
  writeParam(SI1145_PARAM_ALSVISADCMISC, SI1145_PARAM_ALSVISADCMISC_VISRANGE);
 80a0486:	2220      	movs	r2, #32
 80a0488:	2112      	movs	r1, #18
 80a048a:	4620      	mov	r0, r4
 80a048c:	f7ff ff7b 	bl	80a0386 <_ZN15Adafruit_SI114510writeParamEhh>


/************************/

  // measurement rate for auto
  write8(SI1145_REG_MEASRATE0, 0xFF); // 255 * 31.25uS = 8ms
 80a0490:	4620      	mov	r0, r4
 80a0492:	22ff      	movs	r2, #255	; 0xff
 80a0494:	2108      	movs	r1, #8
 80a0496:	f7ff ff25 	bl	80a02e4 <_ZN15Adafruit_SI11456write8Ehh>
  
  // auto run
  write8(SI1145_REG_COMMAND, SI1145_PSALS_AUTO);
 80a049a:	4620      	mov	r0, r4
 80a049c:	220f      	movs	r2, #15
 80a049e:	2118      	movs	r1, #24
 80a04a0:	f7ff ff20 	bl	80a02e4 <_ZN15Adafruit_SI11456write8Ehh>

  return true;
 80a04a4:	2001      	movs	r0, #1
 80a04a6:	bd10      	pop	{r4, pc}

boolean Adafruit_SI1145::begin(void) {
  Wire.begin();
 
  uint8_t id = read8(SI1145_REG_PARTID);
  if (id != 0x45) return false; // look for SI1145
 80a04a8:	2000      	movs	r0, #0
  
  // auto run
  write8(SI1145_REG_COMMAND, SI1145_PSALS_AUTO);

  return true;
}
 80a04aa:	bd10      	pop	{r4, pc}

080a04ac <_GLOBAL__sub_I__ZN15Adafruit_SI1145C2Ev>:
 80a04ac:	f000 b800 	b.w	80a04b0 <HAL_Pin_Map>

080a04b0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a04b0:	b508      	push	{r3, lr}
 80a04b2:	4b02      	ldr	r3, [pc, #8]	; (80a04bc <HAL_Pin_Map+0xc>)
 80a04b4:	681b      	ldr	r3, [r3, #0]
 80a04b6:	681b      	ldr	r3, [r3, #0]
 80a04b8:	9301      	str	r3, [sp, #4]
 80a04ba:	bd08      	pop	{r3, pc}
 80a04bc:	080601b0 	.word	0x080601b0

080a04c0 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a04c0:	b508      	push	{r3, lr}
 80a04c2:	4b02      	ldr	r3, [pc, #8]	; (80a04cc <HAL_SPI_Init+0xc>)
 80a04c4:	681b      	ldr	r3, [r3, #0]
 80a04c6:	69db      	ldr	r3, [r3, #28]
 80a04c8:	9301      	str	r3, [sp, #4]
 80a04ca:	bd08      	pop	{r3, pc}
 80a04cc:	080601b4 	.word	0x080601b4

080a04d0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a04d0:	b508      	push	{r3, lr}
 80a04d2:	4b02      	ldr	r3, [pc, #8]	; (80a04dc <HAL_RNG_GetRandomNumber+0xc>)
 80a04d4:	681b      	ldr	r3, [r3, #0]
 80a04d6:	685b      	ldr	r3, [r3, #4]
 80a04d8:	9301      	str	r3, [sp, #4]
 80a04da:	bd08      	pop	{r3, pc}
 80a04dc:	0806019c 	.word	0x0806019c

080a04e0 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a04e0:	b508      	push	{r3, lr}
 80a04e2:	4b02      	ldr	r3, [pc, #8]	; (80a04ec <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a04e4:	681b      	ldr	r3, [r3, #0]
 80a04e6:	695b      	ldr	r3, [r3, #20]
 80a04e8:	9301      	str	r3, [sp, #4]
 80a04ea:	bd08      	pop	{r3, pc}
 80a04ec:	0806019c 	.word	0x0806019c

080a04f0 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a04f0:	b508      	push	{r3, lr}
 80a04f2:	4b02      	ldr	r3, [pc, #8]	; (80a04fc <os_mutex_create+0xc>)
 80a04f4:	681b      	ldr	r3, [r3, #0]
 80a04f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a04f8:	9301      	str	r3, [sp, #4]
 80a04fa:	bd08      	pop	{r3, pc}
 80a04fc:	080601d0 	.word	0x080601d0

080a0500 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a0500:	b508      	push	{r3, lr}
 80a0502:	4b02      	ldr	r3, [pc, #8]	; (80a050c <HAL_USART_Init+0xc>)
 80a0504:	681b      	ldr	r3, [r3, #0]
 80a0506:	699b      	ldr	r3, [r3, #24]
 80a0508:	9301      	str	r3, [sp, #4]
 80a050a:	bd08      	pop	{r3, pc}
 80a050c:	080601c4 	.word	0x080601c4

080a0510 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a0510:	b508      	push	{r3, lr}
 80a0512:	4b02      	ldr	r3, [pc, #8]	; (80a051c <HAL_USART_Write_Data+0xc>)
 80a0514:	681b      	ldr	r3, [r3, #0]
 80a0516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0518:	9301      	str	r3, [sp, #4]
 80a051a:	bd08      	pop	{r3, pc}
 80a051c:	080601c4 	.word	0x080601c4

080a0520 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a0520:	b508      	push	{r3, lr}
 80a0522:	4b02      	ldr	r3, [pc, #8]	; (80a052c <HAL_USART_Available_Data+0xc>)
 80a0524:	681b      	ldr	r3, [r3, #0]
 80a0526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0528:	9301      	str	r3, [sp, #4]
 80a052a:	bd08      	pop	{r3, pc}
 80a052c:	080601c4 	.word	0x080601c4

080a0530 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a0530:	b508      	push	{r3, lr}
 80a0532:	4b02      	ldr	r3, [pc, #8]	; (80a053c <HAL_USART_Read_Data+0xc>)
 80a0534:	681b      	ldr	r3, [r3, #0]
 80a0536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0538:	9301      	str	r3, [sp, #4]
 80a053a:	bd08      	pop	{r3, pc}
 80a053c:	080601c4 	.word	0x080601c4

080a0540 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a0540:	b508      	push	{r3, lr}
 80a0542:	4b02      	ldr	r3, [pc, #8]	; (80a054c <HAL_USART_Peek_Data+0xc>)
 80a0544:	681b      	ldr	r3, [r3, #0]
 80a0546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0548:	9301      	str	r3, [sp, #4]
 80a054a:	bd08      	pop	{r3, pc}
 80a054c:	080601c4 	.word	0x080601c4

080a0550 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a0550:	b508      	push	{r3, lr}
 80a0552:	4b02      	ldr	r3, [pc, #8]	; (80a055c <HAL_USART_Flush_Data+0xc>)
 80a0554:	681b      	ldr	r3, [r3, #0]
 80a0556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0558:	9301      	str	r3, [sp, #4]
 80a055a:	bd08      	pop	{r3, pc}
 80a055c:	080601c4 	.word	0x080601c4

080a0560 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a0560:	b508      	push	{r3, lr}
 80a0562:	4b02      	ldr	r3, [pc, #8]	; (80a056c <HAL_USART_Available_Data_For_Write+0xc>)
 80a0564:	681b      	ldr	r3, [r3, #0]
 80a0566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0568:	9301      	str	r3, [sp, #4]
 80a056a:	bd08      	pop	{r3, pc}
 80a056c:	080601c4 	.word	0x080601c4

080a0570 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a0570:	b508      	push	{r3, lr}
 80a0572:	4b02      	ldr	r3, [pc, #8]	; (80a057c <HAL_I2C_Begin+0xc>)
 80a0574:	681b      	ldr	r3, [r3, #0]
 80a0576:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0578:	9301      	str	r3, [sp, #4]
 80a057a:	bd08      	pop	{r3, pc}
 80a057c:	080601ac 	.word	0x080601ac

080a0580 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80a0580:	b508      	push	{r3, lr}
 80a0582:	4b02      	ldr	r3, [pc, #8]	; (80a058c <HAL_I2C_Request_Data+0xc>)
 80a0584:	681b      	ldr	r3, [r3, #0]
 80a0586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a0588:	9301      	str	r3, [sp, #4]
 80a058a:	bd08      	pop	{r3, pc}
 80a058c:	080601ac 	.word	0x080601ac

080a0590 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80a0590:	b508      	push	{r3, lr}
 80a0592:	4b02      	ldr	r3, [pc, #8]	; (80a059c <HAL_I2C_Begin_Transmission+0xc>)
 80a0594:	681b      	ldr	r3, [r3, #0]
 80a0596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a0598:	9301      	str	r3, [sp, #4]
 80a059a:	bd08      	pop	{r3, pc}
 80a059c:	080601ac 	.word	0x080601ac

080a05a0 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a05a0:	b508      	push	{r3, lr}
 80a05a2:	4b02      	ldr	r3, [pc, #8]	; (80a05ac <HAL_I2C_End_Transmission+0xc>)
 80a05a4:	681b      	ldr	r3, [r3, #0]
 80a05a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a05a8:	9301      	str	r3, [sp, #4]
 80a05aa:	bd08      	pop	{r3, pc}
 80a05ac:	080601ac 	.word	0x080601ac

080a05b0 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a05b0:	b508      	push	{r3, lr}
 80a05b2:	4b02      	ldr	r3, [pc, #8]	; (80a05bc <HAL_I2C_Write_Data+0xc>)
 80a05b4:	681b      	ldr	r3, [r3, #0]
 80a05b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a05b8:	9301      	str	r3, [sp, #4]
 80a05ba:	bd08      	pop	{r3, pc}
 80a05bc:	080601ac 	.word	0x080601ac

080a05c0 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a05c0:	b508      	push	{r3, lr}
 80a05c2:	4b02      	ldr	r3, [pc, #8]	; (80a05cc <HAL_I2C_Available_Data+0xc>)
 80a05c4:	681b      	ldr	r3, [r3, #0]
 80a05c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a05c8:	9301      	str	r3, [sp, #4]
 80a05ca:	bd08      	pop	{r3, pc}
 80a05cc:	080601ac 	.word	0x080601ac

080a05d0 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a05d0:	b508      	push	{r3, lr}
 80a05d2:	4b02      	ldr	r3, [pc, #8]	; (80a05dc <HAL_I2C_Read_Data+0xc>)
 80a05d4:	681b      	ldr	r3, [r3, #0]
 80a05d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a05d8:	9301      	str	r3, [sp, #4]
 80a05da:	bd08      	pop	{r3, pc}
 80a05dc:	080601ac 	.word	0x080601ac

080a05e0 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a05e0:	b508      	push	{r3, lr}
 80a05e2:	4b02      	ldr	r3, [pc, #8]	; (80a05ec <HAL_I2C_Peek_Data+0xc>)
 80a05e4:	681b      	ldr	r3, [r3, #0]
 80a05e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a05e8:	9301      	str	r3, [sp, #4]
 80a05ea:	bd08      	pop	{r3, pc}
 80a05ec:	080601ac 	.word	0x080601ac

080a05f0 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a05f0:	b508      	push	{r3, lr}
 80a05f2:	4b02      	ldr	r3, [pc, #8]	; (80a05fc <HAL_I2C_Flush_Data+0xc>)
 80a05f4:	681b      	ldr	r3, [r3, #0]
 80a05f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a05f8:	9301      	str	r3, [sp, #4]
 80a05fa:	bd08      	pop	{r3, pc}
 80a05fc:	080601ac 	.word	0x080601ac

080a0600 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a0600:	b508      	push	{r3, lr}
 80a0602:	4b03      	ldr	r3, [pc, #12]	; (80a0610 <HAL_I2C_Init+0x10>)
 80a0604:	681b      	ldr	r3, [r3, #0]
 80a0606:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a060a:	9301      	str	r3, [sp, #4]
 80a060c:	bd08      	pop	{r3, pc}
 80a060e:	0000      	.short	0x0000
 80a0610:	080601ac 	.word	0x080601ac

080a0614 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0614:	b508      	push	{r3, lr}
 80a0616:	4b02      	ldr	r3, [pc, #8]	; (80a0620 <HAL_USB_USART_Init+0xc>)
 80a0618:	681b      	ldr	r3, [r3, #0]
 80a061a:	681b      	ldr	r3, [r3, #0]
 80a061c:	9301      	str	r3, [sp, #4]
 80a061e:	bd08      	pop	{r3, pc}
 80a0620:	080601d8 	.word	0x080601d8

080a0624 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0624:	b508      	push	{r3, lr}
 80a0626:	4b02      	ldr	r3, [pc, #8]	; (80a0630 <HAL_USB_USART_Available_Data+0xc>)
 80a0628:	681b      	ldr	r3, [r3, #0]
 80a062a:	691b      	ldr	r3, [r3, #16]
 80a062c:	9301      	str	r3, [sp, #4]
 80a062e:	bd08      	pop	{r3, pc}
 80a0630:	080601d8 	.word	0x080601d8

080a0634 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0634:	b508      	push	{r3, lr}
 80a0636:	4b02      	ldr	r3, [pc, #8]	; (80a0640 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0638:	681b      	ldr	r3, [r3, #0]
 80a063a:	695b      	ldr	r3, [r3, #20]
 80a063c:	9301      	str	r3, [sp, #4]
 80a063e:	bd08      	pop	{r3, pc}
 80a0640:	080601d8 	.word	0x080601d8

080a0644 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0644:	b508      	push	{r3, lr}
 80a0646:	4b02      	ldr	r3, [pc, #8]	; (80a0650 <HAL_USB_USART_Receive_Data+0xc>)
 80a0648:	681b      	ldr	r3, [r3, #0]
 80a064a:	699b      	ldr	r3, [r3, #24]
 80a064c:	9301      	str	r3, [sp, #4]
 80a064e:	bd08      	pop	{r3, pc}
 80a0650:	080601d8 	.word	0x080601d8

080a0654 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0654:	b508      	push	{r3, lr}
 80a0656:	4b02      	ldr	r3, [pc, #8]	; (80a0660 <HAL_USB_USART_Send_Data+0xc>)
 80a0658:	681b      	ldr	r3, [r3, #0]
 80a065a:	69db      	ldr	r3, [r3, #28]
 80a065c:	9301      	str	r3, [sp, #4]
 80a065e:	bd08      	pop	{r3, pc}
 80a0660:	080601d8 	.word	0x080601d8

080a0664 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0664:	b508      	push	{r3, lr}
 80a0666:	4b02      	ldr	r3, [pc, #8]	; (80a0670 <HAL_USB_USART_Flush_Data+0xc>)
 80a0668:	681b      	ldr	r3, [r3, #0]
 80a066a:	6a1b      	ldr	r3, [r3, #32]
 80a066c:	9301      	str	r3, [sp, #4]
 80a066e:	bd08      	pop	{r3, pc}
 80a0670:	080601d8 	.word	0x080601d8

080a0674 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0674:	b508      	push	{r3, lr}
 80a0676:	4b02      	ldr	r3, [pc, #8]	; (80a0680 <inet_gethostbyname+0xc>)
 80a0678:	681b      	ldr	r3, [r3, #0]
 80a067a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a067c:	9301      	str	r3, [sp, #4]
 80a067e:	bd08      	pop	{r3, pc}
 80a0680:	080601c0 	.word	0x080601c0

080a0684 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0684:	b508      	push	{r3, lr}
 80a0686:	4b02      	ldr	r3, [pc, #8]	; (80a0690 <set_system_mode+0xc>)
 80a0688:	681b      	ldr	r3, [r3, #0]
 80a068a:	685b      	ldr	r3, [r3, #4]
 80a068c:	9301      	str	r3, [sp, #4]
 80a068e:	bd08      	pop	{r3, pc}
 80a0690:	080601a4 	.word	0x080601a4

080a0694 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a0694:	b508      	push	{r3, lr}
 80a0696:	4b02      	ldr	r3, [pc, #8]	; (80a06a0 <system_delay_ms+0xc>)
 80a0698:	681b      	ldr	r3, [r3, #0]
 80a069a:	695b      	ldr	r3, [r3, #20]
 80a069c:	9301      	str	r3, [sp, #4]
 80a069e:	bd08      	pop	{r3, pc}
 80a06a0:	080601a4 	.word	0x080601a4

080a06a4 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a06a4:	b508      	push	{r3, lr}
 80a06a6:	4b02      	ldr	r3, [pc, #8]	; (80a06b0 <application_thread_current+0xc>)
 80a06a8:	681b      	ldr	r3, [r3, #0]
 80a06aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a06ac:	9301      	str	r3, [sp, #4]
 80a06ae:	bd08      	pop	{r3, pc}
 80a06b0:	080601a4 	.word	0x080601a4

080a06b4 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a06b4:	b508      	push	{r3, lr}
 80a06b6:	4b02      	ldr	r3, [pc, #8]	; (80a06c0 <application_thread_invoke+0xc>)
 80a06b8:	681b      	ldr	r3, [r3, #0]
 80a06ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a06bc:	9301      	str	r3, [sp, #4]
 80a06be:	bd08      	pop	{r3, pc}
 80a06c0:	080601a4 	.word	0x080601a4

080a06c4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a06c4:	b508      	push	{r3, lr}
 80a06c6:	4b03      	ldr	r3, [pc, #12]	; (80a06d4 <system_ctrl_set_app_request_handler+0x10>)
 80a06c8:	681b      	ldr	r3, [r3, #0]
 80a06ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a06ce:	9301      	str	r3, [sp, #4]
 80a06d0:	bd08      	pop	{r3, pc}
 80a06d2:	0000      	.short	0x0000
 80a06d4:	080601a4 	.word	0x080601a4

080a06d8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a06d8:	b508      	push	{r3, lr}
 80a06da:	4b03      	ldr	r3, [pc, #12]	; (80a06e8 <system_ctrl_set_result+0x10>)
 80a06dc:	681b      	ldr	r3, [r3, #0]
 80a06de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a06e2:	9301      	str	r3, [sp, #4]
 80a06e4:	bd08      	pop	{r3, pc}
 80a06e6:	0000      	.short	0x0000
 80a06e8:	080601a4 	.word	0x080601a4

080a06ec <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a06ec:	b508      	push	{r3, lr}
 80a06ee:	4b02      	ldr	r3, [pc, #8]	; (80a06f8 <network_connect+0xc>)
 80a06f0:	681b      	ldr	r3, [r3, #0]
 80a06f2:	685b      	ldr	r3, [r3, #4]
 80a06f4:	9301      	str	r3, [sp, #4]
 80a06f6:	bd08      	pop	{r3, pc}
 80a06f8:	080601c8 	.word	0x080601c8

080a06fc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a06fc:	b508      	push	{r3, lr}
 80a06fe:	4b02      	ldr	r3, [pc, #8]	; (80a0708 <network_connecting+0xc>)
 80a0700:	681b      	ldr	r3, [r3, #0]
 80a0702:	689b      	ldr	r3, [r3, #8]
 80a0704:	9301      	str	r3, [sp, #4]
 80a0706:	bd08      	pop	{r3, pc}
 80a0708:	080601c8 	.word	0x080601c8

080a070c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a070c:	b508      	push	{r3, lr}
 80a070e:	4b02      	ldr	r3, [pc, #8]	; (80a0718 <network_disconnect+0xc>)
 80a0710:	681b      	ldr	r3, [r3, #0]
 80a0712:	68db      	ldr	r3, [r3, #12]
 80a0714:	9301      	str	r3, [sp, #4]
 80a0716:	bd08      	pop	{r3, pc}
 80a0718:	080601c8 	.word	0x080601c8

080a071c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a071c:	b508      	push	{r3, lr}
 80a071e:	4b02      	ldr	r3, [pc, #8]	; (80a0728 <network_ready+0xc>)
 80a0720:	681b      	ldr	r3, [r3, #0]
 80a0722:	691b      	ldr	r3, [r3, #16]
 80a0724:	9301      	str	r3, [sp, #4]
 80a0726:	bd08      	pop	{r3, pc}
 80a0728:	080601c8 	.word	0x080601c8

080a072c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a072c:	b508      	push	{r3, lr}
 80a072e:	4b02      	ldr	r3, [pc, #8]	; (80a0738 <network_on+0xc>)
 80a0730:	681b      	ldr	r3, [r3, #0]
 80a0732:	695b      	ldr	r3, [r3, #20]
 80a0734:	9301      	str	r3, [sp, #4]
 80a0736:	bd08      	pop	{r3, pc}
 80a0738:	080601c8 	.word	0x080601c8

080a073c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a073c:	b508      	push	{r3, lr}
 80a073e:	4b02      	ldr	r3, [pc, #8]	; (80a0748 <network_off+0xc>)
 80a0740:	681b      	ldr	r3, [r3, #0]
 80a0742:	699b      	ldr	r3, [r3, #24]
 80a0744:	9301      	str	r3, [sp, #4]
 80a0746:	bd08      	pop	{r3, pc}
 80a0748:	080601c8 	.word	0x080601c8

080a074c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a074c:	b508      	push	{r3, lr}
 80a074e:	4b02      	ldr	r3, [pc, #8]	; (80a0758 <network_listen+0xc>)
 80a0750:	681b      	ldr	r3, [r3, #0]
 80a0752:	69db      	ldr	r3, [r3, #28]
 80a0754:	9301      	str	r3, [sp, #4]
 80a0756:	bd08      	pop	{r3, pc}
 80a0758:	080601c8 	.word	0x080601c8

080a075c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a075c:	b508      	push	{r3, lr}
 80a075e:	4b02      	ldr	r3, [pc, #8]	; (80a0768 <network_listening+0xc>)
 80a0760:	681b      	ldr	r3, [r3, #0]
 80a0762:	6a1b      	ldr	r3, [r3, #32]
 80a0764:	9301      	str	r3, [sp, #4]
 80a0766:	bd08      	pop	{r3, pc}
 80a0768:	080601c8 	.word	0x080601c8

080a076c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a076c:	b508      	push	{r3, lr}
 80a076e:	4b02      	ldr	r3, [pc, #8]	; (80a0778 <network_set_listen_timeout+0xc>)
 80a0770:	681b      	ldr	r3, [r3, #0]
 80a0772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0774:	9301      	str	r3, [sp, #4]
 80a0776:	bd08      	pop	{r3, pc}
 80a0778:	080601c8 	.word	0x080601c8

080a077c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a077c:	b508      	push	{r3, lr}
 80a077e:	4b02      	ldr	r3, [pc, #8]	; (80a0788 <network_get_listen_timeout+0xc>)
 80a0780:	681b      	ldr	r3, [r3, #0]
 80a0782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0784:	9301      	str	r3, [sp, #4]
 80a0786:	bd08      	pop	{r3, pc}
 80a0788:	080601c8 	.word	0x080601c8

080a078c <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a078c:	b508      	push	{r3, lr}
 80a078e:	4b02      	ldr	r3, [pc, #8]	; (80a0798 <spark_cloud_flag_connected+0xc>)
 80a0790:	681b      	ldr	r3, [r3, #0]
 80a0792:	695b      	ldr	r3, [r3, #20]
 80a0794:	9301      	str	r3, [sp, #4]
 80a0796:	bd08      	pop	{r3, pc}
 80a0798:	080601cc 	.word	0x080601cc

080a079c <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a079c:	b508      	push	{r3, lr}
 80a079e:	4b02      	ldr	r3, [pc, #8]	; (80a07a8 <spark_send_event+0xc>)
 80a07a0:	681b      	ldr	r3, [r3, #0]
 80a07a2:	6a1b      	ldr	r3, [r3, #32]
 80a07a4:	9301      	str	r3, [sp, #4]
 80a07a6:	bd08      	pop	{r3, pc}
 80a07a8:	080601cc 	.word	0x080601cc

080a07ac <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a07ac:	b508      	push	{r3, lr}
 80a07ae:	4b02      	ldr	r3, [pc, #8]	; (80a07b8 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a07b0:	681b      	ldr	r3, [r3, #0]
 80a07b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a07b4:	9301      	str	r3, [sp, #4]
 80a07b6:	bd08      	pop	{r3, pc}
 80a07b8:	080601cc 	.word	0x080601cc

080a07bc <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a07bc:	b508      	push	{r3, lr}
 80a07be:	4b02      	ldr	r3, [pc, #8]	; (80a07c8 <malloc+0xc>)
 80a07c0:	681b      	ldr	r3, [r3, #0]
 80a07c2:	681b      	ldr	r3, [r3, #0]
 80a07c4:	9301      	str	r3, [sp, #4]
 80a07c6:	bd08      	pop	{r3, pc}
 80a07c8:	080601a0 	.word	0x080601a0

080a07cc <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a07cc:	b508      	push	{r3, lr}
 80a07ce:	4b02      	ldr	r3, [pc, #8]	; (80a07d8 <free+0xc>)
 80a07d0:	681b      	ldr	r3, [r3, #0]
 80a07d2:	685b      	ldr	r3, [r3, #4]
 80a07d4:	9301      	str	r3, [sp, #4]
 80a07d6:	bd08      	pop	{r3, pc}
 80a07d8:	080601a0 	.word	0x080601a0

080a07dc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a07dc:	b508      	push	{r3, lr}
 80a07de:	4b02      	ldr	r3, [pc, #8]	; (80a07e8 <realloc+0xc>)
 80a07e0:	681b      	ldr	r3, [r3, #0]
 80a07e2:	689b      	ldr	r3, [r3, #8]
 80a07e4:	9301      	str	r3, [sp, #4]
 80a07e6:	bd08      	pop	{r3, pc}
 80a07e8:	080601a0 	.word	0x080601a0

080a07ec <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a07ec:	b508      	push	{r3, lr}
 80a07ee:	4b02      	ldr	r3, [pc, #8]	; (80a07f8 <abort+0xc>)
 80a07f0:	681b      	ldr	r3, [r3, #0]
 80a07f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a07f4:	9301      	str	r3, [sp, #4]
 80a07f6:	bd08      	pop	{r3, pc}
 80a07f8:	080601a0 	.word	0x080601a0

080a07fc <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a07fc:	b508      	push	{r3, lr}
 80a07fe:	4b02      	ldr	r3, [pc, #8]	; (80a0808 <_malloc_r+0xc>)
 80a0800:	681b      	ldr	r3, [r3, #0]
 80a0802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0804:	9301      	str	r3, [sp, #4]
 80a0806:	bd08      	pop	{r3, pc}
 80a0808:	080601a0 	.word	0x080601a0

080a080c <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a080c:	4770      	bx	lr

080a080e <_ZN8SPIClassD0Ev>:
 80a080e:	b510      	push	{r4, lr}
 80a0810:	4604      	mov	r4, r0
 80a0812:	2110      	movs	r1, #16
 80a0814:	f001 f887 	bl	80a1926 <_ZdlPvj>
 80a0818:	4620      	mov	r0, r4
 80a081a:	bd10      	pop	{r4, pc}

080a081c <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a081c:	b570      	push	{r4, r5, r6, lr}
 80a081e:	4604      	mov	r4, r0
 80a0820:	460e      	mov	r6, r1
 80a0822:	4b07      	ldr	r3, [pc, #28]	; (80a0840 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a0824:	2500      	movs	r5, #0
 80a0826:	6003      	str	r3, [r0, #0]
 80a0828:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a082c:	f7ff fe60 	bl	80a04f0 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a0830:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a0832:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a0834:	f7ff fe44 	bl	80a04c0 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a0838:	60a5      	str	r5, [r4, #8]
}
 80a083a:	4620      	mov	r0, r4
 80a083c:	bd70      	pop	{r4, r5, r6, pc}
 80a083e:	bf00      	nop
 80a0840:	080a2de8 	.word	0x080a2de8

080a0844 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a0844:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a0848:	4b03      	ldr	r3, [pc, #12]	; (80a0858 <_GLOBAL__sub_I_System+0x14>)
 80a084a:	2000      	movs	r0, #0
 80a084c:	7018      	strb	r0, [r3, #0]
 80a084e:	8058      	strh	r0, [r3, #2]
 80a0850:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0852:	f7ff bf17 	b.w	80a0684 <set_system_mode>
 80a0856:	bf00      	nop
 80a0858:	2000007c 	.word	0x2000007c

080a085c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 80a085c:	b510      	push	{r4, lr}
 80a085e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 80a0860:	f002 fa97 	bl	80a2d92 <strlen>
 80a0864:	3801      	subs	r0, #1
 80a0866:	1823      	adds	r3, r4, r0
 80a0868:	4620      	mov	r0, r4
	while(i<j){
 80a086a:	4298      	cmp	r0, r3
 80a086c:	d206      	bcs.n	80a087c <_Z11str_reversePc+0x20>
		c = *i;
 80a086e:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 80a0870:	7819      	ldrb	r1, [r3, #0]
 80a0872:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 80a0876:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
 80a087a:	e7f6      	b.n	80a086a <_Z11str_reversePc+0xe>
 80a087c:	bd10      	pop	{r4, pc}

080a087e <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 80a087e:	b570      	push	{r4, r5, r6, lr}
 80a0880:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 80a0882:	1e91      	subs	r1, r2, #2
 80a0884:	2922      	cmp	r1, #34	; 0x22
 80a0886:	d820      	bhi.n	80a08ca <ultoa+0x4c>
 80a0888:	4625      	mov	r5, r4
 80a088a:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 80a088c:	b910      	cbnz	r0, 80a0894 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a088e:	4423      	add	r3, r4
            *ptr++ = '0';
 80a0890:	2230      	movs	r2, #48	; 0x30
 80a0892:	e00e      	b.n	80a08b2 <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 80a0894:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 80a0898:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 80a089c:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 80a089e:	2809      	cmp	r0, #9
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
            result.rem = a%radix;
            *ptr = result.rem;
 80a08a0:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
                *ptr += '0';
 80a08a4:	bf94      	ite	ls
 80a08a6:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 80a08a8:	3157      	addhi	r1, #87	; 0x57
 80a08aa:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
 80a08ae:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 80a08b0:	e7eb      	b.n	80a088a <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a08b2:	4299      	cmp	r1, r3
 80a08b4:	d202      	bcs.n	80a08bc <ultoa+0x3e>
            *ptr++ = '0';
 80a08b6:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a08ba:	e7fa      	b.n	80a08b2 <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
 80a08bc:	2300      	movs	r3, #0
	str_reverse(buffer);
 80a08be:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
 80a08c0:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
 80a08c2:	f7ff ffcb 	bl	80a085c <_Z11str_reversePc>
	return buffer;
 80a08c6:	4620      	mov	r0, r4
 80a08c8:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
 80a08ca:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
 80a08cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080a08d0 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
 80a08d0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a08d4:	4680      	mov	r8, r0
 80a08d6:	460d      	mov	r5, r1
 80a08d8:	4617      	mov	r7, r2
 80a08da:	461e      	mov	r6, r3
    bool negative = val<0;
    if (negative) {
 80a08dc:	2200      	movs	r2, #0
 80a08de:	2300      	movs	r3, #0
 80a08e0:	4640      	mov	r0, r8
 80a08e2:	4629      	mov	r1, r5
 80a08e4:	f001 fd96 	bl	80a2414 <__aeabi_dcmplt>
 80a08e8:	b120      	cbz	r0, 80a08f4 <_Z4dtoadhPc+0x24>
        val = -val;
        *sout++ = '-';
 80a08ea:	232d      	movs	r3, #45	; 0x2d
 80a08ec:	7033      	strb	r3, [r6, #0]
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
    bool negative = val<0;
    if (negative) {
        val = -val;
 80a08ee:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
        *sout++ = '-';
 80a08f2:	3601      	adds	r6, #1
 80a08f4:	2300      	movs	r3, #0
    }
    long scale = 1;
 80a08f6:	2401      	movs	r4, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
 80a08f8:	220a      	movs	r2, #10
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
 80a08fa:	b2d9      	uxtb	r1, r3
 80a08fc:	428f      	cmp	r7, r1
 80a08fe:	d902      	bls.n	80a0906 <_Z4dtoadhPc+0x36>
        scale *= 10;
 80a0900:	4354      	muls	r4, r2
 80a0902:	3301      	adds	r3, #1
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
 80a0904:	e7f9      	b.n	80a08fa <_Z4dtoadhPc+0x2a>
        scale *= 10;
    val *= scale;   // capture all the significant digits
 80a0906:	4620      	mov	r0, r4
 80a0908:	f001 faac 	bl	80a1e64 <__aeabi_i2d>
 80a090c:	4642      	mov	r2, r8
 80a090e:	462b      	mov	r3, r5
 80a0910:	f001 fb0e 	bl	80a1f30 <__aeabi_dmul>
 80a0914:	4682      	mov	sl, r0
 80a0916:	468b      	mov	fp, r1
    uint64_t fixed = uint64_t(val);
 80a0918:	f002 f83a 	bl	80a2990 <__aeabi_d2ulz>
 80a091c:	4680      	mov	r8, r0
 80a091e:	4689      	mov	r9, r1
    if ((val-fixed)>=0.5)    // round last digit
 80a0920:	f001 fad0 	bl	80a1ec4 <__aeabi_ul2d>
 80a0924:	4602      	mov	r2, r0
 80a0926:	460b      	mov	r3, r1
 80a0928:	4650      	mov	r0, sl
 80a092a:	4659      	mov	r1, fp
 80a092c:	f001 f94c 	bl	80a1bc8 <__aeabi_dsub>
 80a0930:	2200      	movs	r2, #0
 80a0932:	4b17      	ldr	r3, [pc, #92]	; (80a0990 <_Z4dtoadhPc+0xc0>)
 80a0934:	f001 fd82 	bl	80a243c <__aeabi_dcmpge>
 80a0938:	b118      	cbz	r0, 80a0942 <_Z4dtoadhPc+0x72>
        fixed++;
 80a093a:	f118 0801 	adds.w	r8, r8, #1
 80a093e:	f149 0900 	adc.w	r9, r9, #0

    unsigned long first = (unsigned long)(fixed / scale);
 80a0942:	17e5      	asrs	r5, r4, #31
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
 80a0944:	4622      	mov	r2, r4
 80a0946:	462b      	mov	r3, r5
 80a0948:	4640      	mov	r0, r8
 80a094a:	4649      	mov	r1, r9
 80a094c:	f002 f808 	bl	80a2960 <__aeabi_uldivmod>
 80a0950:	2301      	movs	r3, #1
 80a0952:	220a      	movs	r2, #10
 80a0954:	4631      	mov	r1, r6
 80a0956:	f7ff ff92 	bl	80a087e <ultoa>
    if (prec) {
 80a095a:	b1af      	cbz	r7, 80a0988 <_Z4dtoadhPc+0xb8>
        sout += strlen(sout);
 80a095c:	4630      	mov	r0, r6
 80a095e:	f002 fa18 	bl	80a2d92 <strlen>
        *sout++ = '.';
 80a0962:	232e      	movs	r3, #46	; 0x2e
 80a0964:	5433      	strb	r3, [r6, r0]
        ultoa(second, sout, 10, prec);
 80a0966:	3001      	adds	r0, #1
 80a0968:	4406      	add	r6, r0
 80a096a:	4622      	mov	r2, r4
 80a096c:	462b      	mov	r3, r5
 80a096e:	4640      	mov	r0, r8
 80a0970:	4649      	mov	r1, r9
 80a0972:	f001 fff5 	bl	80a2960 <__aeabi_uldivmod>
 80a0976:	463b      	mov	r3, r7
 80a0978:	4610      	mov	r0, r2
 80a097a:	4631      	mov	r1, r6
 80a097c:	220a      	movs	r2, #10
    }
}
 80a097e:	b001      	add	sp, #4
 80a0980:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    ultoa(first, sout, 10, 1);
    if (prec) {
        sout += strlen(sout);
        *sout++ = '.';
        ultoa(second, sout, 10, prec);
 80a0984:	f7ff bf7b 	b.w	80a087e <ultoa>
    }
}
 80a0988:	b001      	add	sp, #4
 80a098a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a098e:	bf00      	nop
 80a0990:	3fe00000 	.word	0x3fe00000

080a0994 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a0994:	b510      	push	{r4, lr}
 80a0996:	4604      	mov	r4, r0
{
	free(buffer);
 80a0998:	6800      	ldr	r0, [r0, #0]
 80a099a:	f7ff ff17 	bl	80a07cc <free>
}
 80a099e:	4620      	mov	r0, r4
 80a09a0:	bd10      	pop	{r4, pc}

080a09a2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a09a2:	b510      	push	{r4, lr}
 80a09a4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a09a6:	6800      	ldr	r0, [r0, #0]
 80a09a8:	b108      	cbz	r0, 80a09ae <_ZN6String10invalidateEv+0xc>
 80a09aa:	f7ff ff0f 	bl	80a07cc <free>
	buffer = NULL;
 80a09ae:	2300      	movs	r3, #0
 80a09b0:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a09b2:	60a3      	str	r3, [r4, #8]
 80a09b4:	6063      	str	r3, [r4, #4]
 80a09b6:	bd10      	pop	{r4, pc}

080a09b8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a09b8:	b538      	push	{r3, r4, r5, lr}
 80a09ba:	4604      	mov	r4, r0
 80a09bc:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a09be:	6800      	ldr	r0, [r0, #0]
 80a09c0:	3101      	adds	r1, #1
 80a09c2:	f7ff ff0b 	bl	80a07dc <realloc>
	if (newbuffer) {
 80a09c6:	b110      	cbz	r0, 80a09ce <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a09c8:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a09cc:	2001      	movs	r0, #1
	}
	return 0;
}
 80a09ce:	bd38      	pop	{r3, r4, r5, pc}

080a09d0 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a09d0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a09d2:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a09d4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a09d6:	b113      	cbz	r3, 80a09de <_ZN6String7reserveEj+0xe>
 80a09d8:	6843      	ldr	r3, [r0, #4]
 80a09da:	428b      	cmp	r3, r1
 80a09dc:	d207      	bcs.n	80a09ee <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a09de:	4620      	mov	r0, r4
 80a09e0:	f7ff ffea 	bl	80a09b8 <_ZN6String12changeBufferEj>
 80a09e4:	b120      	cbz	r0, 80a09f0 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a09e6:	68a3      	ldr	r3, [r4, #8]
 80a09e8:	b90b      	cbnz	r3, 80a09ee <_ZN6String7reserveEj+0x1e>
 80a09ea:	6822      	ldr	r2, [r4, #0]
 80a09ec:	7013      	strb	r3, [r2, #0]
 80a09ee:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a09f0:	bd10      	pop	{r4, pc}

080a09f2 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a09f2:	b570      	push	{r4, r5, r6, lr}
 80a09f4:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a09f6:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a09f8:	4604      	mov	r4, r0
 80a09fa:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a09fc:	f7ff ffe8 	bl	80a09d0 <_ZN6String7reserveEj>
 80a0a00:	b918      	cbnz	r0, 80a0a0a <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a0a02:	4620      	mov	r0, r4
 80a0a04:	f7ff ffcd 	bl	80a09a2 <_ZN6String10invalidateEv>
		return *this;
 80a0a08:	e009      	b.n	80a0a1e <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a0a0a:	462a      	mov	r2, r5
 80a0a0c:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a0a0e:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a0a10:	6820      	ldr	r0, [r4, #0]
 80a0a12:	f002 f967 	bl	80a2ce4 <memcpy>
	buffer[len] = 0;
 80a0a16:	6822      	ldr	r2, [r4, #0]
 80a0a18:	68a3      	ldr	r3, [r4, #8]
 80a0a1a:	2100      	movs	r1, #0
 80a0a1c:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a0a1e:	4620      	mov	r0, r4
 80a0a20:	bd70      	pop	{r4, r5, r6, pc}

080a0a22 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a0a22:	b538      	push	{r3, r4, r5, lr}
 80a0a24:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a0a26:	460c      	mov	r4, r1
 80a0a28:	b141      	cbz	r1, 80a0a3c <_ZN6StringaSEPKc+0x1a>
 80a0a2a:	4608      	mov	r0, r1
 80a0a2c:	f002 f9b1 	bl	80a2d92 <strlen>
 80a0a30:	4621      	mov	r1, r4
 80a0a32:	4602      	mov	r2, r0
 80a0a34:	4628      	mov	r0, r5
 80a0a36:	f7ff ffdc 	bl	80a09f2 <_ZN6String4copyEPKcj>
 80a0a3a:	e001      	b.n	80a0a40 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 80a0a3c:	f7ff ffb1 	bl	80a09a2 <_ZN6String10invalidateEv>

	return *this;
}
 80a0a40:	4628      	mov	r0, r5
 80a0a42:	bd38      	pop	{r3, r4, r5, pc}

080a0a44 <_ZN6StringC1Efi>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
 80a0a44:	b530      	push	{r4, r5, lr}
 80a0a46:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a0a48:	2300      	movs	r3, #0
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
 80a0a4a:	b08b      	sub	sp, #44	; 0x2c
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a0a4c:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a0a4e:	6043      	str	r3, [r0, #4]
	len = 0;
 80a0a50:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a0a52:	7303      	strb	r3, [r0, #12]

String::String(float value, int decimalPlaces)
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
 80a0a54:	b2d5      	uxtb	r5, r2
 80a0a56:	4608      	mov	r0, r1
 80a0a58:	f001 fa16 	bl	80a1e88 <__aeabi_f2d>
 80a0a5c:	ab01      	add	r3, sp, #4
 80a0a5e:	462a      	mov	r2, r5
 80a0a60:	f7ff ff36 	bl	80a08d0 <_Z4dtoadhPc>
        *this = buf;
 80a0a64:	a901      	add	r1, sp, #4
 80a0a66:	4620      	mov	r0, r4
 80a0a68:	f7ff ffdb 	bl	80a0a22 <_ZN6StringaSEPKc>
}
 80a0a6c:	4620      	mov	r0, r4
 80a0a6e:	b00b      	add	sp, #44	; 0x2c
 80a0a70:	bd30      	pop	{r4, r5, pc}

080a0a72 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a0a72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0a74:	4606      	mov	r6, r0
 80a0a76:	460d      	mov	r5, r1
 80a0a78:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a0a7a:	2400      	movs	r4, #0
  while (size--) {
 80a0a7c:	42bd      	cmp	r5, r7
 80a0a7e:	d00c      	beq.n	80a0a9a <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a0a80:	6833      	ldr	r3, [r6, #0]
 80a0a82:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a0a86:	689b      	ldr	r3, [r3, #8]
 80a0a88:	4630      	mov	r0, r6
 80a0a8a:	4798      	blx	r3
     if (chunk>=0)
 80a0a8c:	2800      	cmp	r0, #0
 80a0a8e:	db01      	blt.n	80a0a94 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a0a90:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a0a92:	e7f3      	b.n	80a0a7c <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a0a94:	2c00      	cmp	r4, #0
 80a0a96:	bf08      	it	eq
 80a0a98:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a0a9a:	4620      	mov	r0, r4
 80a0a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0a9e <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a0a9e:	b570      	push	{r4, r5, r6, lr}
 80a0aa0:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a0aa2:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a0aa4:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a0aa6:	b149      	cbz	r1, 80a0abc <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a0aa8:	f002 f973 	bl	80a2d92 <strlen>
 80a0aac:	682b      	ldr	r3, [r5, #0]
 80a0aae:	4602      	mov	r2, r0
 80a0ab0:	4621      	mov	r1, r4
 80a0ab2:	4628      	mov	r0, r5
    }
 80a0ab4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a0ab8:	68db      	ldr	r3, [r3, #12]
 80a0aba:	4718      	bx	r3
    }
 80a0abc:	bd70      	pop	{r4, r5, r6, pc}

080a0abe <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a0abe:	6803      	ldr	r3, [r0, #0]
 80a0ac0:	689b      	ldr	r3, [r3, #8]
 80a0ac2:	4718      	bx	r3

080a0ac4 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a0ac4:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a0ac6:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a0ac8:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a0aca:	f7ff fff8 	bl	80a0abe <_ZN5Print5printEc>
  n += print('\n');
 80a0ace:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a0ad0:	4604      	mov	r4, r0
  n += print('\n');
 80a0ad2:	4628      	mov	r0, r5
 80a0ad4:	f7ff fff3 	bl	80a0abe <_ZN5Print5printEc>
  return n;
}
 80a0ad8:	4420      	add	r0, r4
 80a0ada:	bd38      	pop	{r3, r4, r5, pc}

080a0adc <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a0adc:	b538      	push	{r3, r4, r5, lr}
 80a0ade:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a0ae0:	f7ff ffdd 	bl	80a0a9e <_ZN5Print5writeEPKc>
 80a0ae4:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a0ae6:	4628      	mov	r0, r5
 80a0ae8:	f7ff ffec 	bl	80a0ac4 <_ZN5Print7printlnEv>
  return n;
}
 80a0aec:	4420      	add	r0, r4
 80a0aee:	bd38      	pop	{r3, r4, r5, pc}

080a0af0 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a0af0:	2a01      	cmp	r2, #1
 80a0af2:	bf98      	it	ls
 80a0af4:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a0af6:	b530      	push	{r4, r5, lr}
 80a0af8:	460b      	mov	r3, r1
 80a0afa:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a0afc:	2100      	movs	r1, #0
 80a0afe:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a0b02:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a0b06:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a0b0a:	fb05 3312 	mls	r3, r5, r2, r3
 80a0b0e:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0b10:	2b09      	cmp	r3, #9
 80a0b12:	bf94      	ite	ls
 80a0b14:	3330      	addls	r3, #48	; 0x30
 80a0b16:	3337      	addhi	r3, #55	; 0x37
 80a0b18:	b2db      	uxtb	r3, r3
 80a0b1a:	4621      	mov	r1, r4
 80a0b1c:	f804 3901 	strb.w	r3, [r4], #-1
 80a0b20:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a0b22:	2d00      	cmp	r5, #0
 80a0b24:	d1ef      	bne.n	80a0b06 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a0b26:	f7ff ffba 	bl	80a0a9e <_ZN5Print5writeEPKc>
}
 80a0b2a:	b00b      	add	sp, #44	; 0x2c
 80a0b2c:	bd30      	pop	{r4, r5, pc}

080a0b2e <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a0b2e:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a0b30:	b922      	cbnz	r2, 80a0b3c <_ZN5Print5printEmi+0xe>
 80a0b32:	6803      	ldr	r3, [r0, #0]
 80a0b34:	b2c9      	uxtb	r1, r1
 80a0b36:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a0b38:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a0b3a:	4718      	bx	r3
  else return printNumber(n, base);
 80a0b3c:	b2d2      	uxtb	r2, r2
}
 80a0b3e:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a0b40:	f7ff bfd6 	b.w	80a0af0 <_ZN5Print11printNumberEmh>

080a0b44 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a0b44:	f7ff bff3 	b.w	80a0b2e <_ZN5Print5printEmi>

080a0b48 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a0b48:	2300      	movs	r3, #0
 80a0b4a:	461a      	mov	r2, r3
 80a0b4c:	4619      	mov	r1, r3
 80a0b4e:	6840      	ldr	r0, [r0, #4]
 80a0b50:	f7ff bdec 	b.w	80a072c <network_on>

080a0b54 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a0b54:	680b      	ldr	r3, [r1, #0]
 80a0b56:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80a0b58:	b113      	cbz	r3, 80a0b60 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80a0b5a:	685a      	ldr	r2, [r3, #4]
 80a0b5c:	3201      	adds	r2, #1
 80a0b5e:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 80a0b60:	4770      	bx	lr
	...

080a0b64 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a0b64:	4a01      	ldr	r2, [pc, #4]	; (80a0b6c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a0b66:	4b02      	ldr	r3, [pc, #8]	; (80a0b70 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a0b68:	601a      	str	r2, [r3, #0]
 80a0b6a:	4770      	bx	lr
 80a0b6c:	080a2e66 	.word	0x080a2e66
 80a0b70:	20000084 	.word	0x20000084

080a0b74 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a0b74:	4b02      	ldr	r3, [pc, #8]	; (80a0b80 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a0b76:	681a      	ldr	r2, [r3, #0]
 80a0b78:	4b02      	ldr	r3, [pc, #8]	; (80a0b84 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a0b7a:	601a      	str	r2, [r3, #0]
 80a0b7c:	4770      	bx	lr
 80a0b7e:	bf00      	nop
 80a0b80:	20000000 	.word	0x20000000
 80a0b84:	20000088 	.word	0x20000088

080a0b88 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a0b88:	2100      	movs	r1, #0
 80a0b8a:	f7ff bd83 	b.w	80a0694 <system_delay_ms>

080a0b8e <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0b8e:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a0b90:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0b92:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a0b94:	b113      	cbz	r3, 80a0b9c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0b96:	2203      	movs	r2, #3
 80a0b98:	4601      	mov	r1, r0
 80a0b9a:	4798      	blx	r3
    }
 80a0b9c:	4620      	mov	r0, r4
 80a0b9e:	bd10      	pop	{r4, pc}

080a0ba0 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a0ba0:	b510      	push	{r4, lr}
 80a0ba2:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0ba4:	f7ff fff3 	bl	80a0b8e <_ZNSt14_Function_baseD1Ev>
 80a0ba8:	4620      	mov	r0, r4
 80a0baa:	bd10      	pop	{r4, pc}

080a0bac <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 80a0bac:	b513      	push	{r0, r1, r4, lr}
 80a0bae:	460b      	mov	r3, r1
 80a0bb0:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0bb2:	c803      	ldmia	r0, {r0, r1}
 80a0bb4:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a0bb8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a0bbc:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a0bc0:	e89d 0003 	ldmia.w	sp, {r0, r1}
 80a0bc4:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a0bc8:	b002      	add	sp, #8
 80a0bca:	bd10      	pop	{r4, pc}

080a0bcc <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0bcc:	4803      	ldr	r0, [pc, #12]	; (80a0bdc <_GLOBAL__sub_I_RGB+0x10>)
 80a0bce:	2300      	movs	r3, #0
 80a0bd0:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a0bd2:	4a03      	ldr	r2, [pc, #12]	; (80a0be0 <_GLOBAL__sub_I_RGB+0x14>)
 80a0bd4:	4903      	ldr	r1, [pc, #12]	; (80a0be4 <_GLOBAL__sub_I_RGB+0x18>)
 80a0bd6:	f000 bea1 	b.w	80a191c <__aeabi_atexit>
 80a0bda:	bf00      	nop
 80a0bdc:	2000008c 	.word	0x2000008c
 80a0be0:	20000068 	.word	0x20000068
 80a0be4:	080a0ba1 	.word	0x080a0ba1

080a0be8 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a0be8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a0bea:	4b14      	ldr	r3, [pc, #80]	; (80a0c3c <serialEventRun+0x54>)
 80a0bec:	b133      	cbz	r3, 80a0bfc <serialEventRun+0x14>
 80a0bee:	f000 fc2b 	bl	80a1448 <_Z16_fetch_usbserialv>
 80a0bf2:	6803      	ldr	r3, [r0, #0]
 80a0bf4:	691b      	ldr	r3, [r3, #16]
 80a0bf6:	4798      	blx	r3
 80a0bf8:	2800      	cmp	r0, #0
 80a0bfa:	dc16      	bgt.n	80a0c2a <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a0bfc:	4b10      	ldr	r3, [pc, #64]	; (80a0c40 <serialEventRun+0x58>)
 80a0bfe:	b133      	cbz	r3, 80a0c0e <serialEventRun+0x26>
 80a0c00:	f000 fcdc 	bl	80a15bc <_Z22__fetch_global_Serial1v>
 80a0c04:	6803      	ldr	r3, [r0, #0]
 80a0c06:	691b      	ldr	r3, [r3, #16]
 80a0c08:	4798      	blx	r3
 80a0c0a:	2800      	cmp	r0, #0
 80a0c0c:	dc10      	bgt.n	80a0c30 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a0c0e:	4b0d      	ldr	r3, [pc, #52]	; (80a0c44 <serialEventRun+0x5c>)
 80a0c10:	b10b      	cbz	r3, 80a0c16 <serialEventRun+0x2e>
 80a0c12:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a0c16:	4b0c      	ldr	r3, [pc, #48]	; (80a0c48 <serialEventRun+0x60>)
 80a0c18:	b17b      	cbz	r3, 80a0c3a <serialEventRun+0x52>
 80a0c1a:	f000 fc51 	bl	80a14c0 <_Z17_fetch_usbserial1v>
 80a0c1e:	6803      	ldr	r3, [r0, #0]
 80a0c20:	691b      	ldr	r3, [r3, #16]
 80a0c22:	4798      	blx	r3
 80a0c24:	2800      	cmp	r0, #0
 80a0c26:	dc06      	bgt.n	80a0c36 <serialEventRun+0x4e>
 80a0c28:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a0c2a:	f3af 8000 	nop.w
 80a0c2e:	e7e5      	b.n	80a0bfc <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a0c30:	f3af 8000 	nop.w
 80a0c34:	e7eb      	b.n	80a0c0e <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a0c36:	f3af 8000 	nop.w
 80a0c3a:	bd08      	pop	{r3, pc}
	...

080a0c4c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a0c4c:	b508      	push	{r3, lr}
	serialEventRun();
 80a0c4e:	f7ff ffcb 	bl	80a0be8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a0c52:	f7ff fc45 	bl	80a04e0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a0c56:	4b01      	ldr	r3, [pc, #4]	; (80a0c5c <_post_loop+0x10>)
 80a0c58:	6018      	str	r0, [r3, #0]
 80a0c5a:	bd08      	pop	{r3, pc}
 80a0c5c:	20000530 	.word	0x20000530

080a0c60 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a0c60:	4802      	ldr	r0, [pc, #8]	; (80a0c6c <_Z33system_initialize_user_backup_ramv+0xc>)
 80a0c62:	4a03      	ldr	r2, [pc, #12]	; (80a0c70 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a0c64:	4903      	ldr	r1, [pc, #12]	; (80a0c74 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a0c66:	1a12      	subs	r2, r2, r0
 80a0c68:	f002 b83c 	b.w	80a2ce4 <memcpy>
 80a0c6c:	40024000 	.word	0x40024000
 80a0c70:	40024004 	.word	0x40024004
 80a0c74:	080a30c8 	.word	0x080a30c8

080a0c78 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a0c78:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0c7a:	2300      	movs	r3, #0
 80a0c7c:	9300      	str	r3, [sp, #0]
 80a0c7e:	461a      	mov	r2, r3
 80a0c80:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0c84:	f7ff fd28 	bl	80a06d8 <system_ctrl_set_result>
}
 80a0c88:	b003      	add	sp, #12
 80a0c8a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a0c90 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a0c90:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a0c92:	8843      	ldrh	r3, [r0, #2]
 80a0c94:	2b0a      	cmp	r3, #10
 80a0c96:	d008      	beq.n	80a0caa <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a0c98:	2b50      	cmp	r3, #80	; 0x50
 80a0c9a:	d109      	bne.n	80a0cb0 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a0c9c:	4b09      	ldr	r3, [pc, #36]	; (80a0cc4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a0c9e:	681b      	ldr	r3, [r3, #0]
 80a0ca0:	b13b      	cbz	r3, 80a0cb2 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a0ca2:	b003      	add	sp, #12
 80a0ca4:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a0ca8:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a0caa:	f7ff ffe5 	bl	80a0c78 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a0cae:	e006      	b.n	80a0cbe <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0cb0:	2300      	movs	r3, #0
 80a0cb2:	9300      	str	r3, [sp, #0]
 80a0cb4:	461a      	mov	r2, r3
 80a0cb6:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0cba:	f7ff fd0d 	bl	80a06d8 <system_ctrl_set_result>
        break;
    }
}
 80a0cbe:	b003      	add	sp, #12
 80a0cc0:	f85d fb04 	ldr.w	pc, [sp], #4
 80a0cc4:	2000009c 	.word	0x2000009c

080a0cc8 <module_user_init_hook>:

void module_user_init_hook()
{
 80a0cc8:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a0cca:	4c10      	ldr	r4, [pc, #64]	; (80a0d0c <module_user_init_hook+0x44>)
 80a0ccc:	4d10      	ldr	r5, [pc, #64]	; (80a0d10 <module_user_init_hook+0x48>)
 80a0cce:	6823      	ldr	r3, [r4, #0]
 80a0cd0:	42ab      	cmp	r3, r5
 80a0cd2:	4b10      	ldr	r3, [pc, #64]	; (80a0d14 <module_user_init_hook+0x4c>)
 80a0cd4:	bf0c      	ite	eq
 80a0cd6:	2201      	moveq	r2, #1
 80a0cd8:	2200      	movne	r2, #0
 80a0cda:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a0cdc:	d002      	beq.n	80a0ce4 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a0cde:	f7ff ffbf 	bl	80a0c60 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a0ce2:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a0ce4:	f7ff fbf4 	bl	80a04d0 <HAL_RNG_GetRandomNumber>
 80a0ce8:	4604      	mov	r4, r0
    srand(seed);
 80a0cea:	f002 f80f 	bl	80a2d0c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a0cee:	4b0a      	ldr	r3, [pc, #40]	; (80a0d18 <module_user_init_hook+0x50>)
 80a0cf0:	b113      	cbz	r3, 80a0cf8 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a0cf2:	4620      	mov	r0, r4
 80a0cf4:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a0cf8:	2100      	movs	r1, #0
 80a0cfa:	4807      	ldr	r0, [pc, #28]	; (80a0d18 <module_user_init_hook+0x50>)
 80a0cfc:	f7ff fd56 	bl	80a07ac <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a0d00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a0d04:	2100      	movs	r1, #0
 80a0d06:	4805      	ldr	r0, [pc, #20]	; (80a0d1c <module_user_init_hook+0x54>)
 80a0d08:	f7ff bcdc 	b.w	80a06c4 <system_ctrl_set_app_request_handler>
 80a0d0c:	40024000 	.word	0x40024000
 80a0d10:	9a271c1e 	.word	0x9a271c1e
 80a0d14:	200000a0 	.word	0x200000a0
 80a0d18:	00000000 	.word	0x00000000
 80a0d1c:	080a0c91 	.word	0x080a0c91

080a0d20 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a0d20:	4770      	bx	lr

080a0d22 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 80a0d22:	2000      	movs	r0, #0
 80a0d24:	4770      	bx	lr

080a0d26 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a0d26:	b510      	push	{r4, lr}
 80a0d28:	4604      	mov	r4, r0
 80a0d2a:	2110      	movs	r1, #16
 80a0d2c:	f000 fdfb 	bl	80a1926 <_ZdlPvj>
 80a0d30:	4620      	mov	r0, r4
 80a0d32:	bd10      	pop	{r4, pc}

080a0d34 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 80a0d34:	b508      	push	{r3, lr}
      { delete this; }
 80a0d36:	b108      	cbz	r0, 80a0d3c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 80a0d38:	f7ff fff5 	bl	80a0d26 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a0d3c:	bd08      	pop	{r3, pc}

080a0d3e <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a0d3e:	2200      	movs	r2, #0
 80a0d40:	6002      	str	r2, [r0, #0]
 80a0d42:	f64f 729c 	movw	r2, #65436	; 0xff9c
 80a0d46:	8082      	strh	r2, [r0, #4]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a0d48:	b510      	push	{r4, lr}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a0d4a:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 80a0d4e:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0d50:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0d52:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 80a0d54:	680c      	ldr	r4, [r1, #0]
 80a0d56:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0d58:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a0d5a:	bd10      	pop	{r4, pc}

080a0d5c <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a0d5c:	b510      	push	{r4, lr}
 80a0d5e:	4604      	mov	r4, r0
    free((void*)msg_);
 80a0d60:	6800      	ldr	r0, [r0, #0]
 80a0d62:	f7ff fd33 	bl	80a07cc <free>
}
 80a0d66:	4620      	mov	r0, r4
 80a0d68:	bd10      	pop	{r4, pc}

080a0d6a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 80a0d6a:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a0d6c:	68c4      	ldr	r4, [r0, #12]
 80a0d6e:	b1f4      	cbz	r4, 80a0dae <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 80a0d70:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a0d72:	2b02      	cmp	r3, #2
 80a0d74:	d103      	bne.n	80a0d7e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a0d76:	f104 000c 	add.w	r0, r4, #12
 80a0d7a:	f7ff ffef 	bl	80a0d5c <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 80a0d7e:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 80a0d80:	b135      	cbz	r5, 80a0d90 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0d82:	4628      	mov	r0, r5
 80a0d84:	f7ff ff03 	bl	80a0b8e <_ZNSt14_Function_baseD1Ev>
 80a0d88:	2110      	movs	r1, #16
 80a0d8a:	4628      	mov	r0, r5
 80a0d8c:	f000 fdcb 	bl	80a1926 <_ZdlPvj>
 80a0d90:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a0d92:	b135      	cbz	r5, 80a0da2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a0d94:	4628      	mov	r0, r5
 80a0d96:	f7ff fefa 	bl	80a0b8e <_ZNSt14_Function_baseD1Ev>
 80a0d9a:	2110      	movs	r1, #16
 80a0d9c:	4628      	mov	r0, r5
 80a0d9e:	f000 fdc2 	bl	80a1926 <_ZdlPvj>
 80a0da2:	4620      	mov	r0, r4
 80a0da4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a0da8:	2114      	movs	r1, #20
 80a0daa:	f000 bdbc 	b.w	80a1926 <_ZdlPvj>
 80a0dae:	bd38      	pop	{r3, r4, r5, pc}

080a0db0 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 80a0db0:	b513      	push	{r0, r1, r4, lr}
 80a0db2:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a0db4:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 80a0db8:	2300      	movs	r3, #0
 80a0dba:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a0dbc:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a0dbe:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a0dc0:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0dc2:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a0dc4:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a0dc6:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0dc8:	f7ff f9b6 	bl	80a0138 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0dcc:	4620      	mov	r0, r4
 80a0dce:	b002      	add	sp, #8
 80a0dd0:	bd10      	pop	{r4, pc}

080a0dd2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a0dd2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a0dd4:	460c      	mov	r4, r1
 80a0dd6:	4606      	mov	r6, r0
 80a0dd8:	460f      	mov	r7, r1
 80a0dda:	f854 3b04 	ldr.w	r3, [r4], #4
 80a0dde:	ad02      	add	r5, sp, #8
 80a0de0:	f845 3d08 	str.w	r3, [r5, #-8]!
 80a0de4:	4621      	mov	r1, r4
 80a0de6:	a801      	add	r0, sp, #4
 80a0de8:	f7ff feb4 	bl	80a0b54 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 80a0dec:	4629      	mov	r1, r5
 80a0dee:	4630      	mov	r0, r6
 80a0df0:	f7ff ffde 	bl	80a0db0 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0df4:	a801      	add	r0, sp, #4
 80a0df6:	f7ff f99f 	bl	80a0138 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0dfa:	4620      	mov	r0, r4
 80a0dfc:	f7ff f99c 	bl	80a0138 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 80a0e00:	4638      	mov	r0, r7
 80a0e02:	2108      	movs	r1, #8
 80a0e04:	f000 fd8f 	bl	80a1926 <_ZdlPvj>
        return p;
    }
 80a0e08:	4630      	mov	r0, r6
 80a0e0a:	b003      	add	sp, #12
 80a0e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080a0e10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a0e10:	b538      	push	{r3, r4, r5, lr}
 80a0e12:	2300      	movs	r3, #0
 80a0e14:	4604      	mov	r4, r0
 80a0e16:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a0e18:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a0e1a:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a0e1c:	f7ff f93d 	bl	80a009a <_Znwj>
 80a0e20:	b128      	cbz	r0, 80a0e2e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a0e22:	2301      	movs	r3, #1
 80a0e24:	6043      	str	r3, [r0, #4]
 80a0e26:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 80a0e28:	4b02      	ldr	r3, [pc, #8]	; (80a0e34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a0e2a:	60c5      	str	r5, [r0, #12]
 80a0e2c:	6003      	str	r3, [r0, #0]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a0e2e:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
 80a0e30:	4620      	mov	r0, r4
 80a0e32:	bd38      	pop	{r3, r4, r5, pc}
 80a0e34:	080a2f08 	.word	0x080a2f08

080a0e38 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0e38:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a0e3a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0e3c:	b90a      	cbnz	r2, 80a0e42 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a0e3e:	f000 fd74 	bl	80a192a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0e42:	68c3      	ldr	r3, [r0, #12]
    }
 80a0e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0e48:	4718      	bx	r3

080a0e4a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a0e4a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a0e4c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a0e4e:	f100 0110 	add.w	r1, r0, #16
 80a0e52:	f7ff fff1 	bl	80a0e38 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a0e56:	bd08      	pop	{r3, pc}

080a0e58 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0e58:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a0e5a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0e5c:	b90a      	cbnz	r2, 80a0e62 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a0e5e:	f000 fd64 	bl	80a192a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0e62:	68c3      	ldr	r3, [r0, #12]
    }
 80a0e64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0e68:	4718      	bx	r3

080a0e6a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a0e6a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a0e6c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a0e6e:	f100 0110 	add.w	r1, r0, #16
 80a0e72:	f7ff fff1 	bl	80a0e58 <_ZNKSt8functionIFvRKbEEclES1_>
 80a0e76:	bd08      	pop	{r3, pc}

080a0e78 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a0e78:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0e7a:	2300      	movs	r3, #0
 80a0e7c:	6083      	str	r3, [r0, #8]
 80a0e7e:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a0e80:	4604      	mov	r4, r0
 80a0e82:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a0e84:	b12b      	cbz	r3, 80a0e92 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a0e86:	2202      	movs	r2, #2
 80a0e88:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a0e8a:	68eb      	ldr	r3, [r5, #12]
 80a0e8c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a0e8e:	68ab      	ldr	r3, [r5, #8]
 80a0e90:	60a3      	str	r3, [r4, #8]
	}
    }
 80a0e92:	4620      	mov	r0, r4
 80a0e94:	bd38      	pop	{r3, r4, r5, pc}
	...

080a0e98 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 80a0e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0e9a:	b089      	sub	sp, #36	; 0x24
 80a0e9c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a0e9e:	4668      	mov	r0, sp
 80a0ea0:	f7ff ff4d 	bl	80a0d3e <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a0ea4:	f04f 0202 	mov.w	r2, #2
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a0ea8:	2300      	movs	r3, #0
 80a0eaa:	f88d 3008 	strb.w	r3, [sp, #8]
 80a0eae:	e8d4 3f4f 	ldrexb	r3, [r4]
 80a0eb2:	2b00      	cmp	r3, #0
 80a0eb4:	d103      	bne.n	80a0ebe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
 80a0eb6:	e8c4 2f41 	strexb	r1, r2, [r4]
 80a0eba:	2900      	cmp	r1, #0
 80a0ebc:	d1f7      	bne.n	80a0eae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
 80a0ebe:	d002      	beq.n	80a0ec6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
 80a0ec0:	f88d 3008 	strb.w	r3, [sp, #8]
 80a0ec4:	e063      	b.n	80a0f8e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 80a0ec6:	f114 050c 	adds.w	r5, r4, #12
 80a0eca:	d003      	beq.n	80a0ed4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
 80a0ecc:	4669      	mov	r1, sp
 80a0ece:	4628      	mov	r0, r5
 80a0ed0:	f7ff ff35 	bl	80a0d3e <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a0ed4:	f3bf 8f5f 	dmb	sy
 80a0ed8:	2301      	movs	r3, #1
 80a0eda:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a0edc:	f3bf 8f5f 	dmb	sy
 80a0ee0:	f104 0308 	add.w	r3, r4, #8
 80a0ee4:	2000      	movs	r0, #0
 80a0ee6:	e853 6f00 	ldrex	r6, [r3]
 80a0eea:	e843 0200 	strex	r2, r0, [r3]
 80a0eee:	2a00      	cmp	r2, #0
 80a0ef0:	d1f9      	bne.n	80a0ee6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
 80a0ef2:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a0ef6:	2e00      	cmp	r6, #0
 80a0ef8:	d049      	beq.n	80a0f8e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a0efa:	f7ff fbd3 	bl	80a06a4 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a0efe:	b120      	cbz	r0, 80a0f0a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a0f00:	4629      	mov	r1, r5
 80a0f02:	4630      	mov	r0, r6
 80a0f04:	f7ff ff98 	bl	80a0e38 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a0f08:	e03a      	b.n	80a0f80 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a0f0a:	4631      	mov	r1, r6
 80a0f0c:	a802      	add	r0, sp, #8
 80a0f0e:	f7ff ffb3 	bl	80a0e78 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a0f12:	68e0      	ldr	r0, [r4, #12]
 80a0f14:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a0f18:	b108      	cbz	r0, 80a0f1e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
 80a0f1a:	f001 ff1f 	bl	80a2d5c <strdup>
 80a0f1e:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a0f20:	2010      	movs	r0, #16
 80a0f22:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a0f26:	f7ff f8b8 	bl	80a009a <_Znwj>
 80a0f2a:	4605      	mov	r5, r0
 80a0f2c:	b1e8      	cbz	r0, 80a0f6a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0f2e:	2700      	movs	r7, #0
 80a0f30:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0f32:	2018      	movs	r0, #24
 80a0f34:	f7ff f8b1 	bl	80a009a <_Znwj>
 80a0f38:	4604      	mov	r4, r0
 80a0f3a:	b188      	cbz	r0, 80a0f60 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a0f3c:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0f3e:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a0f40:	a802      	add	r0, sp, #8
 80a0f42:	f7ff fe33 	bl	80a0bac <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0f46:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a0f48:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0f4a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0f4c:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a0f4e:	9204      	str	r2, [sp, #16]
 80a0f50:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a0f52:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a0f54:	60e3      	str	r3, [r4, #12]
 80a0f56:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a0f5a:	9205      	str	r2, [sp, #20]
 80a0f5c:	f7ff feef 	bl	80a0d3e <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a0f60:	4b0d      	ldr	r3, [pc, #52]	; (80a0f98 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0f62:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a0f64:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a0f66:	4b0d      	ldr	r3, [pc, #52]	; (80a0f9c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
 80a0f68:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
 80a0f6a:	a806      	add	r0, sp, #24
 80a0f6c:	f7ff fef6 	bl	80a0d5c <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0f70:	a802      	add	r0, sp, #8
 80a0f72:	f7ff fe0c 	bl	80a0b8e <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a0f76:	2200      	movs	r2, #0
 80a0f78:	4629      	mov	r1, r5
 80a0f7a:	4809      	ldr	r0, [pc, #36]	; (80a0fa0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
 80a0f7c:	f7ff fb9a 	bl	80a06b4 <application_thread_invoke>
 80a0f80:	4630      	mov	r0, r6
 80a0f82:	f7ff fe04 	bl	80a0b8e <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a0f86:	2110      	movs	r1, #16
 80a0f88:	4630      	mov	r0, r6
 80a0f8a:	f000 fccc 	bl	80a1926 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
 80a0f8e:	4668      	mov	r0, sp
 80a0f90:	f7ff fee4 	bl	80a0d5c <_ZN8particle5ErrorD1Ev>
    }
 80a0f94:	b009      	add	sp, #36	; 0x24
 80a0f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0f98:	080a0e4b 	.word	0x080a0e4b
 80a0f9c:	080a10c1 	.word	0x080a10c1
 80a0fa0:	080a1609 	.word	0x080a1609

080a0fa4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a0fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0fa8:	b08b      	sub	sp, #44	; 0x2c
 80a0faa:	4606      	mov	r6, r0
 80a0fac:	460f      	mov	r7, r1
 80a0fae:	4690      	mov	r8, r2
 80a0fb0:	4699      	mov	r9, r3
 80a0fb2:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a0fb6:	f7ff fbe9 	bl	80a078c <spark_cloud_flag_connected>
 80a0fba:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
 80a0fbc:	4683      	mov	fp, r0
 80a0fbe:	bb30      	cbnz	r0, 80a100e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a0fc0:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a0fc4:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a0fc6:	a905      	add	r1, sp, #20
 80a0fc8:	4628      	mov	r0, r5
 80a0fca:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a0fce:	f7ff feb6 	bl	80a0d3e <_ZN8particle5ErrorC1EOS0_>
 80a0fd2:	2014      	movs	r0, #20
 80a0fd4:	f7ff f861 	bl	80a009a <_Znwj>
 80a0fd8:	4604      	mov	r4, r0
 80a0fda:	b158      	cbz	r0, 80a0ff4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a0fdc:	2302      	movs	r3, #2
 80a0fde:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a0fe0:	2301      	movs	r3, #1
 80a0fe2:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a0fe4:	f8c0 b004 	str.w	fp, [r0, #4]
 80a0fe8:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
 80a0fec:	4629      	mov	r1, r5
 80a0fee:	300c      	adds	r0, #12
 80a0ff0:	f7ff fea5 	bl	80a0d3e <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 80a0ff4:	4630      	mov	r0, r6
 80a0ff6:	4621      	mov	r1, r4
 80a0ff8:	f840 4b04 	str.w	r4, [r0], #4
 80a0ffc:	f7ff ff08 	bl	80a0e10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a1000:	4628      	mov	r0, r5
 80a1002:	f7ff feab 	bl	80a0d5c <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a1006:	a805      	add	r0, sp, #20
 80a1008:	f7ff fea8 	bl	80a0d5c <_ZN8particle5ErrorD1Ev>
 80a100c:	e052      	b.n	80a10b4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a100e:	2400      	movs	r4, #0
 80a1010:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a1012:	2014      	movs	r0, #20
 80a1014:	606c      	str	r4, [r5, #4]
 80a1016:	60ac      	str	r4, [r5, #8]
 80a1018:	9307      	str	r3, [sp, #28]
 80a101a:	f7ff f83e 	bl	80a009a <_Znwj>
 80a101e:	4601      	mov	r1, r0
 80a1020:	b118      	cbz	r0, 80a102a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
 80a1022:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a1024:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a1026:	6044      	str	r4, [r0, #4]
 80a1028:	6084      	str	r4, [r0, #8]
 80a102a:	a804      	add	r0, sp, #16
 80a102c:	9103      	str	r1, [sp, #12]
 80a102e:	f7ff feef 	bl	80a0e10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 80a1032:	4b22      	ldr	r3, [pc, #136]	; (80a10bc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a1034:	2008      	movs	r0, #8
 80a1036:	9308      	str	r3, [sp, #32]
 80a1038:	f7ff f82f 	bl	80a009a <_Znwj>
 80a103c:	4604      	mov	r4, r0
 80a103e:	b128      	cbz	r0, 80a104c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1040:	9b03      	ldr	r3, [sp, #12]
 80a1042:	a904      	add	r1, sp, #16
 80a1044:	f840 3b04 	str.w	r3, [r0], #4
 80a1048:	f7ff fd84 	bl	80a0b54 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a104c:	9500      	str	r5, [sp, #0]
 80a104e:	fa5f f38a 	uxtb.w	r3, sl
 80a1052:	464a      	mov	r2, r9
 80a1054:	4641      	mov	r1, r8
 80a1056:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 80a1058:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a105a:	f7ff fb9f 	bl	80a079c <spark_send_event>
 80a105e:	b920      	cbnz	r0, 80a106a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 80a1060:	9b03      	ldr	r3, [sp, #12]
 80a1062:	785b      	ldrb	r3, [r3, #1]
 80a1064:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a1068:	b183      	cbz	r3, 80a108c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 80a106a:	9b03      	ldr	r3, [sp, #12]
 80a106c:	a904      	add	r1, sp, #16
 80a106e:	a806      	add	r0, sp, #24
 80a1070:	9305      	str	r3, [sp, #20]
 80a1072:	f7ff fd6f 	bl	80a0b54 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 80a1076:	a905      	add	r1, sp, #20
 80a1078:	4630      	mov	r0, r6
 80a107a:	f7ff fe99 	bl	80a0db0 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a107e:	a806      	add	r0, sp, #24
 80a1080:	f7ff f85a 	bl	80a0138 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1084:	a804      	add	r0, sp, #16
 80a1086:	f7ff f857 	bl	80a0138 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a108a:	e013      	b.n	80a10b4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
 80a108c:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 80a1090:	a905      	add	r1, sp, #20
 80a1092:	a803      	add	r0, sp, #12
 80a1094:	9205      	str	r2, [sp, #20]
 80a1096:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a109a:	f7ff fefd 	bl	80a0e98 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a109e:	a805      	add	r0, sp, #20
 80a10a0:	f7ff fe5c 	bl	80a0d5c <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a10a4:	a805      	add	r0, sp, #20
 80a10a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a10a8:	f7ff fe93 	bl	80a0dd2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
 80a10ac:	a806      	add	r0, sp, #24
 80a10ae:	f7ff f843 	bl	80a0138 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a10b2:	e7da      	b.n	80a106a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 80a10b4:	4630      	mov	r0, r6
 80a10b6:	b00b      	add	sp, #44	; 0x2c
 80a10b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a10bc:	080a1231 	.word	0x080a1231

080a10c0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a10c0:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a10c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a10c4:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a10c6:	d006      	beq.n	80a10d6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 80a10c8:	2a03      	cmp	r2, #3
 80a10ca:	d017      	beq.n	80a10fc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 80a10cc:	2a01      	cmp	r2, #1
 80a10ce:	d122      	bne.n	80a1116 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a10d0:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a10d2:	6003      	str	r3, [r0, #0]
	      break;
 80a10d4:	e01f      	b.n	80a1116 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a10d6:	2018      	movs	r0, #24
 80a10d8:	680e      	ldr	r6, [r1, #0]
 80a10da:	f7fe ffde 	bl	80a009a <_Znwj>
 80a10de:	4605      	mov	r5, r0
 80a10e0:	b150      	cbz	r0, 80a10f8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a10e2:	4631      	mov	r1, r6
 80a10e4:	f7ff fec8 	bl	80a0e78 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a10e8:	6930      	ldr	r0, [r6, #16]
 80a10ea:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a10ee:	b108      	cbz	r0, 80a10f4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 80a10f0:	f001 fe34 	bl	80a2d5c <strdup>
 80a10f4:	6128      	str	r0, [r5, #16]
 80a10f6:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a10f8:	6025      	str	r5, [r4, #0]
 80a10fa:	e00c      	b.n	80a1116 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a10fc:	6804      	ldr	r4, [r0, #0]
 80a10fe:	b154      	cbz	r4, 80a1116 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
 80a1100:	f104 0010 	add.w	r0, r4, #16
 80a1104:	f7ff fe2a 	bl	80a0d5c <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1108:	4620      	mov	r0, r4
 80a110a:	f7ff fd40 	bl	80a0b8e <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a110e:	2118      	movs	r1, #24
 80a1110:	4620      	mov	r0, r4
 80a1112:	f000 fc08 	bl	80a1926 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a1116:	2000      	movs	r0, #0
 80a1118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a111a <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a111a:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a111c:	2300      	movs	r3, #0
 80a111e:	6083      	str	r3, [r0, #8]
 80a1120:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1122:	4604      	mov	r4, r0
 80a1124:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a1126:	b12b      	cbz	r3, 80a1134 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a1128:	2202      	movs	r2, #2
 80a112a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a112c:	68eb      	ldr	r3, [r5, #12]
 80a112e:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a1130:	68ab      	ldr	r3, [r5, #8]
 80a1132:	60a3      	str	r3, [r4, #8]
	}
    }
 80a1134:	4620      	mov	r0, r4
 80a1136:	bd38      	pop	{r3, r4, r5, pc}

080a1138 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1138:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a113a:	b570      	push	{r4, r5, r6, lr}
 80a113c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a113e:	d006      	beq.n	80a114e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 80a1140:	2a03      	cmp	r2, #3
 80a1142:	d011      	beq.n	80a1168 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 80a1144:	2a01      	cmp	r2, #1
 80a1146:	d118      	bne.n	80a117a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a1148:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a114a:	6003      	str	r3, [r0, #0]
	      break;
 80a114c:	e015      	b.n	80a117a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a114e:	2014      	movs	r0, #20
 80a1150:	680e      	ldr	r6, [r1, #0]
 80a1152:	f7fe ffa2 	bl	80a009a <_Znwj>
 80a1156:	4605      	mov	r5, r0
 80a1158:	b120      	cbz	r0, 80a1164 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a115a:	4631      	mov	r1, r6
 80a115c:	f7ff ffdd 	bl	80a111a <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a1160:	7c33      	ldrb	r3, [r6, #16]
 80a1162:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a1164:	6025      	str	r5, [r4, #0]
 80a1166:	e008      	b.n	80a117a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a1168:	6804      	ldr	r4, [r0, #0]
 80a116a:	b134      	cbz	r4, 80a117a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a116c:	4620      	mov	r0, r4
 80a116e:	f7ff fd0e 	bl	80a0b8e <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a1172:	2114      	movs	r1, #20
 80a1174:	4620      	mov	r0, r4
 80a1176:	f000 fbd6 	bl	80a1926 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a117a:	2000      	movs	r0, #0
 80a117c:	bd70      	pop	{r4, r5, r6, pc}
	...

080a1180 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 80a1180:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1182:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a1184:	f3bf 8f5f 	dmb	sy
 80a1188:	b087      	sub	sp, #28
 80a118a:	2300      	movs	r3, #0
 80a118c:	e850 6f00 	ldrex	r6, [r0]
 80a1190:	e840 3200 	strex	r2, r3, [r0]
 80a1194:	2a00      	cmp	r2, #0
 80a1196:	d1f9      	bne.n	80a118c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 80a1198:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a119c:	2e00      	cmp	r6, #0
 80a119e:	d03f      	beq.n	80a1220 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a11a0:	4618      	mov	r0, r3
 80a11a2:	f7ff fa7f 	bl	80a06a4 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a11a6:	4607      	mov	r7, r0
 80a11a8:	b120      	cbz	r0, 80a11b4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a11aa:	4621      	mov	r1, r4
 80a11ac:	4630      	mov	r0, r6
 80a11ae:	f7ff fe53 	bl	80a0e58 <_ZNKSt8functionIFvRKbEEclES1_>
 80a11b2:	e02e      	b.n	80a1212 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a11b4:	4631      	mov	r1, r6
 80a11b6:	a801      	add	r0, sp, #4
 80a11b8:	f7ff ffaf 	bl	80a111a <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a11bc:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a11be:	2010      	movs	r0, #16
 80a11c0:	f88d 3014 	strb.w	r3, [sp, #20]
 80a11c4:	f7fe ff69 	bl	80a009a <_Znwj>
 80a11c8:	4605      	mov	r5, r0
 80a11ca:	b1d0      	cbz	r0, 80a1202 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a11cc:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a11ce:	2014      	movs	r0, #20
 80a11d0:	f7fe ff63 	bl	80a009a <_Znwj>
 80a11d4:	4604      	mov	r4, r0
 80a11d6:	b178      	cbz	r0, 80a11f8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a11d8:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a11da:	4601      	mov	r1, r0
 80a11dc:	a801      	add	r0, sp, #4
 80a11de:	f7ff fce5 	bl	80a0bac <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a11e2:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a11e4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a11e6:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a11e8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a11ea:	9203      	str	r2, [sp, #12]
 80a11ec:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a11ee:	60e3      	str	r3, [r4, #12]
 80a11f0:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a11f4:	9204      	str	r2, [sp, #16]
 80a11f6:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a11f8:	4b0a      	ldr	r3, [pc, #40]	; (80a1224 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a11fa:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a11fc:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a11fe:	4b0a      	ldr	r3, [pc, #40]	; (80a1228 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 80a1200:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1202:	a801      	add	r0, sp, #4
 80a1204:	f7ff fcc3 	bl	80a0b8e <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a1208:	2200      	movs	r2, #0
 80a120a:	4629      	mov	r1, r5
 80a120c:	4807      	ldr	r0, [pc, #28]	; (80a122c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 80a120e:	f7ff fa51 	bl	80a06b4 <application_thread_invoke>
 80a1212:	4630      	mov	r0, r6
 80a1214:	f7ff fcbb 	bl	80a0b8e <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a1218:	2110      	movs	r1, #16
 80a121a:	4630      	mov	r0, r6
 80a121c:	f000 fb83 	bl	80a1926 <_ZdlPvj>
        }
    }
 80a1220:	b007      	add	sp, #28
 80a1222:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1224:	080a0e6b 	.word	0x080a0e6b
 80a1228:	080a1139 	.word	0x080a1139
 80a122c:	080a1609 	.word	0x080a1609

080a1230 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a1230:	b530      	push	{r4, r5, lr}
 80a1232:	4604      	mov	r4, r0
 80a1234:	b085      	sub	sp, #20
 80a1236:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a1238:	4668      	mov	r0, sp
 80a123a:	4611      	mov	r1, r2
 80a123c:	f7ff fdc9 	bl	80a0dd2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a1240:	b17c      	cbz	r4, 80a1262 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a1242:	b224      	sxth	r4, r4
 80a1244:	4628      	mov	r0, r5
 80a1246:	b10d      	cbz	r5, 80a124c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 80a1248:	f001 fd88 	bl	80a2d5c <strdup>
 80a124c:	9002      	str	r0, [sp, #8]
 80a124e:	a902      	add	r1, sp, #8
 80a1250:	4668      	mov	r0, sp
 80a1252:	f8ad 400c 	strh.w	r4, [sp, #12]
 80a1256:	f7ff fe1f 	bl	80a0e98 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a125a:	a802      	add	r0, sp, #8
 80a125c:	f7ff fd7e 	bl	80a0d5c <_ZN8particle5ErrorD1Ev>
 80a1260:	e01d      	b.n	80a129e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a1262:	f04f 0201 	mov.w	r2, #1
 80a1266:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a1268:	f88d 4008 	strb.w	r4, [sp, #8]
 80a126c:	e8d0 3f4f 	ldrexb	r3, [r0]
 80a1270:	42a3      	cmp	r3, r4
 80a1272:	d103      	bne.n	80a127c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 80a1274:	e8c0 2f41 	strexb	r1, r2, [r0]
 80a1278:	2900      	cmp	r1, #0
 80a127a:	d1f7      	bne.n	80a126c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 80a127c:	d002      	beq.n	80a1284 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 80a127e:	f88d 3008 	strb.w	r3, [sp, #8]
 80a1282:	e00c      	b.n	80a129e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 80a1284:	f110 010c 	adds.w	r1, r0, #12
 80a1288:	f04f 0301 	mov.w	r3, #1
 80a128c:	bf18      	it	ne
 80a128e:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a1290:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 80a1294:	3004      	adds	r0, #4
 80a1296:	f800 3c03 	strb.w	r3, [r0, #-3]
 80a129a:	f7ff ff71 	bl	80a1180 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 80a129e:	a801      	add	r0, sp, #4
 80a12a0:	f7fe ff4a 	bl	80a0138 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 80a12a4:	b005      	add	sp, #20
 80a12a6:	bd30      	pop	{r4, r5, pc}

080a12a8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a12a8:	4770      	bx	lr

080a12aa <_ZN9IPAddressD0Ev>:
 80a12aa:	b510      	push	{r4, lr}
 80a12ac:	4604      	mov	r4, r0
 80a12ae:	2118      	movs	r1, #24
 80a12b0:	f000 fb39 	bl	80a1926 <_ZdlPvj>
 80a12b4:	4620      	mov	r0, r4
 80a12b6:	bd10      	pop	{r4, pc}

080a12b8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a12b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a12ba:	460f      	mov	r7, r1
 80a12bc:	f100 0608 	add.w	r6, r0, #8
 80a12c0:	1d05      	adds	r5, r0, #4
 80a12c2:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a12c4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a12c8:	220a      	movs	r2, #10
 80a12ca:	4638      	mov	r0, r7
 80a12cc:	f7ff fc3a 	bl	80a0b44 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a12d0:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a12d2:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a12d4:	d007      	beq.n	80a12e6 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a12d6:	2c00      	cmp	r4, #0
 80a12d8:	d0f4      	beq.n	80a12c4 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a12da:	212e      	movs	r1, #46	; 0x2e
 80a12dc:	4638      	mov	r0, r7
 80a12de:	f7ff fbee 	bl	80a0abe <_ZN5Print5printEc>
 80a12e2:	4404      	add	r4, r0
 80a12e4:	e7ee      	b.n	80a12c4 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a12e6:	4620      	mov	r0, r4
 80a12e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a12ec <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a12ec:	b510      	push	{r4, lr}
 80a12ee:	4604      	mov	r4, r0
 80a12f0:	4b04      	ldr	r3, [pc, #16]	; (80a1304 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a12f2:	2211      	movs	r2, #17
 80a12f4:	f840 3b04 	str.w	r3, [r0], #4
 80a12f8:	2100      	movs	r1, #0
 80a12fa:	f001 fcfe 	bl	80a2cfa <memset>
{
    clear();
}
 80a12fe:	4620      	mov	r0, r4
 80a1300:	bd10      	pop	{r4, pc}
 80a1302:	bf00      	nop
 80a1304:	080a2f24 	.word	0x080a2f24

080a1308 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a1308:	4603      	mov	r3, r0
 80a130a:	4a07      	ldr	r2, [pc, #28]	; (80a1328 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a130c:	b510      	push	{r4, lr}
 80a130e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a1312:	f101 0210 	add.w	r2, r1, #16
 80a1316:	f851 4b04 	ldr.w	r4, [r1], #4
 80a131a:	4291      	cmp	r1, r2
 80a131c:	f843 4b04 	str.w	r4, [r3], #4
 80a1320:	d1f9      	bne.n	80a1316 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a1322:	780a      	ldrb	r2, [r1, #0]
 80a1324:	701a      	strb	r2, [r3, #0]
}
 80a1326:	bd10      	pop	{r4, pc}
 80a1328:	080a2f24 	.word	0x080a2f24

080a132c <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a132c:	4a02      	ldr	r2, [pc, #8]	; (80a1338 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a132e:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a1330:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a1332:	2204      	movs	r2, #4
 80a1334:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a1336:	4770      	bx	lr
 80a1338:	080a2f24 	.word	0x080a2f24

080a133c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a133c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a133e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a1342:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a1346:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a134a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a134e:	2304      	movs	r3, #4
 80a1350:	6041      	str	r1, [r0, #4]
 80a1352:	7503      	strb	r3, [r0, #20]
 80a1354:	bd10      	pop	{r4, pc}
	...

080a1358 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a1358:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a135a:	4d04      	ldr	r5, [pc, #16]	; (80a136c <_ZN9IPAddressC1Ehhhh+0x14>)
 80a135c:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a135e:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a1362:	9500      	str	r5, [sp, #0]
 80a1364:	f7ff ffea 	bl	80a133c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1368:	b003      	add	sp, #12
 80a136a:	bd30      	pop	{r4, r5, pc}
 80a136c:	080a2f24 	.word	0x080a2f24

080a1370 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1370:	7441      	strb	r1, [r0, #17]
 80a1372:	4770      	bx	lr

080a1374 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a1374:	4770      	bx	lr

080a1376 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a1376:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a1378:	2100      	movs	r1, #0
 80a137a:	7c00      	ldrb	r0, [r0, #16]
 80a137c:	f7ff f962 	bl	80a0644 <HAL_USB_USART_Receive_Data>
}
 80a1380:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1384:	bf28      	it	cs
 80a1386:	f04f 30ff 	movcs.w	r0, #4294967295
 80a138a:	bd08      	pop	{r3, pc}

080a138c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a138c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a138e:	2101      	movs	r1, #1
 80a1390:	7c00      	ldrb	r0, [r0, #16]
 80a1392:	f7ff f957 	bl	80a0644 <HAL_USB_USART_Receive_Data>
}
 80a1396:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a139a:	bf28      	it	cs
 80a139c:	f04f 30ff 	movcs.w	r0, #4294967295
 80a13a0:	bd08      	pop	{r3, pc}

080a13a2 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a13a2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a13a4:	7c00      	ldrb	r0, [r0, #16]
 80a13a6:	f7ff f945 	bl	80a0634 <HAL_USB_USART_Available_Data_For_Write>
}
 80a13aa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a13ae:	bd08      	pop	{r3, pc}

080a13b0 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a13b0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a13b2:	7c00      	ldrb	r0, [r0, #16]
 80a13b4:	f7ff f936 	bl	80a0624 <HAL_USB_USART_Available_Data>
}
 80a13b8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a13bc:	bd08      	pop	{r3, pc}

080a13be <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a13be:	7c00      	ldrb	r0, [r0, #16]
 80a13c0:	f7ff b950 	b.w	80a0664 <HAL_USB_USART_Flush_Data>

080a13c4 <_ZN9USBSerialD0Ev>:
 80a13c4:	b510      	push	{r4, lr}
 80a13c6:	4604      	mov	r4, r0
 80a13c8:	2114      	movs	r1, #20
 80a13ca:	f000 faac 	bl	80a1926 <_ZdlPvj>
 80a13ce:	4620      	mov	r0, r4
 80a13d0:	bd10      	pop	{r4, pc}

080a13d2 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a13d2:	b538      	push	{r3, r4, r5, lr}
 80a13d4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a13d6:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a13d8:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a13da:	f7ff f92b 	bl	80a0634 <HAL_USB_USART_Available_Data_For_Write>
 80a13de:	2800      	cmp	r0, #0
 80a13e0:	dc01      	bgt.n	80a13e6 <_ZN9USBSerial5writeEh+0x14>
 80a13e2:	7c60      	ldrb	r0, [r4, #17]
 80a13e4:	b128      	cbz	r0, 80a13f2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a13e6:	4629      	mov	r1, r5
 80a13e8:	7c20      	ldrb	r0, [r4, #16]
 80a13ea:	f7ff f933 	bl	80a0654 <HAL_USB_USART_Send_Data>
 80a13ee:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a13f2:	bd38      	pop	{r3, r4, r5, pc}

080a13f4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a13f4:	b510      	push	{r4, lr}
 80a13f6:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a13f8:	2300      	movs	r3, #0
 80a13fa:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a13fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1400:	60a3      	str	r3, [r4, #8]
 80a1402:	4b05      	ldr	r3, [pc, #20]	; (80a1418 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a1404:	4608      	mov	r0, r1
 80a1406:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a1408:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a140a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a140c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a140e:	4611      	mov	r1, r2
 80a1410:	f7ff f900 	bl	80a0614 <HAL_USB_USART_Init>
}
 80a1414:	4620      	mov	r0, r4
 80a1416:	bd10      	pop	{r4, pc}
 80a1418:	080a2f38 	.word	0x080a2f38

080a141c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a141c:	b510      	push	{r4, lr}
 80a141e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1420:	2214      	movs	r2, #20
 80a1422:	2100      	movs	r1, #0
 80a1424:	f001 fc69 	bl	80a2cfa <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1428:	4b05      	ldr	r3, [pc, #20]	; (80a1440 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a142a:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a142c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a142e:	4b05      	ldr	r3, [pc, #20]	; (80a1444 <_Z19acquireSerialBufferv+0x28>)
 80a1430:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1432:	f240 1301 	movw	r3, #257	; 0x101
 80a1436:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1438:	2381      	movs	r3, #129	; 0x81
 80a143a:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a143c:	bd10      	pop	{r4, pc}
 80a143e:	bf00      	nop
 80a1440:	20000129 	.word	0x20000129
 80a1444:	200000a8 	.word	0x200000a8

080a1448 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a1448:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a144a:	4d0e      	ldr	r5, [pc, #56]	; (80a1484 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a144c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a144e:	a801      	add	r0, sp, #4
 80a1450:	f7ff ffe4 	bl	80a141c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1454:	6829      	ldr	r1, [r5, #0]
 80a1456:	f011 0401 	ands.w	r4, r1, #1
 80a145a:	d110      	bne.n	80a147e <_Z16_fetch_usbserialv+0x36>
 80a145c:	4628      	mov	r0, r5
 80a145e:	f7fe fe20 	bl	80a00a2 <__cxa_guard_acquire>
 80a1462:	b160      	cbz	r0, 80a147e <_Z16_fetch_usbserialv+0x36>
 80a1464:	aa01      	add	r2, sp, #4
 80a1466:	4621      	mov	r1, r4
 80a1468:	4807      	ldr	r0, [pc, #28]	; (80a1488 <_Z16_fetch_usbserialv+0x40>)
 80a146a:	f7ff ffc3 	bl	80a13f4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a146e:	4628      	mov	r0, r5
 80a1470:	f7fe fe1c 	bl	80a00ac <__cxa_guard_release>
 80a1474:	4a05      	ldr	r2, [pc, #20]	; (80a148c <_Z16_fetch_usbserialv+0x44>)
 80a1476:	4906      	ldr	r1, [pc, #24]	; (80a1490 <_Z16_fetch_usbserialv+0x48>)
 80a1478:	4803      	ldr	r0, [pc, #12]	; (80a1488 <_Z16_fetch_usbserialv+0x40>)
 80a147a:	f000 fa4f 	bl	80a191c <__aeabi_atexit>
	return _usbserial;
}
 80a147e:	4802      	ldr	r0, [pc, #8]	; (80a1488 <_Z16_fetch_usbserialv+0x40>)
 80a1480:	b007      	add	sp, #28
 80a1482:	bd30      	pop	{r4, r5, pc}
 80a1484:	200000a4 	.word	0x200000a4
 80a1488:	2000022c 	.word	0x2000022c
 80a148c:	20000068 	.word	0x20000068
 80a1490:	080a1375 	.word	0x080a1375

080a1494 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a1494:	b510      	push	{r4, lr}
 80a1496:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1498:	2214      	movs	r2, #20
 80a149a:	2100      	movs	r1, #0
 80a149c:	f001 fc2d 	bl	80a2cfa <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a14a0:	4b05      	ldr	r3, [pc, #20]	; (80a14b8 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a14a2:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a14a4:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a14a6:	4b05      	ldr	r3, [pc, #20]	; (80a14bc <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a14a8:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a14aa:	f240 1301 	movw	r3, #257	; 0x101
 80a14ae:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a14b0:	2381      	movs	r3, #129	; 0x81
 80a14b2:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a14b4:	bd10      	pop	{r4, pc}
 80a14b6:	bf00      	nop
 80a14b8:	200002dc 	.word	0x200002dc
 80a14bc:	20000244 	.word	0x20000244

080a14c0 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a14c0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a14c2:	4c0e      	ldr	r4, [pc, #56]	; (80a14fc <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a14c4:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a14c6:	a801      	add	r0, sp, #4
 80a14c8:	f7ff ffe4 	bl	80a1494 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a14cc:	6823      	ldr	r3, [r4, #0]
 80a14ce:	07db      	lsls	r3, r3, #31
 80a14d0:	d410      	bmi.n	80a14f4 <_Z17_fetch_usbserial1v+0x34>
 80a14d2:	4620      	mov	r0, r4
 80a14d4:	f7fe fde5 	bl	80a00a2 <__cxa_guard_acquire>
 80a14d8:	b160      	cbz	r0, 80a14f4 <_Z17_fetch_usbserial1v+0x34>
 80a14da:	aa01      	add	r2, sp, #4
 80a14dc:	2101      	movs	r1, #1
 80a14de:	4808      	ldr	r0, [pc, #32]	; (80a1500 <_Z17_fetch_usbserial1v+0x40>)
 80a14e0:	f7ff ff88 	bl	80a13f4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a14e4:	4620      	mov	r0, r4
 80a14e6:	f7fe fde1 	bl	80a00ac <__cxa_guard_release>
 80a14ea:	4a06      	ldr	r2, [pc, #24]	; (80a1504 <_Z17_fetch_usbserial1v+0x44>)
 80a14ec:	4906      	ldr	r1, [pc, #24]	; (80a1508 <_Z17_fetch_usbserial1v+0x48>)
 80a14ee:	4804      	ldr	r0, [pc, #16]	; (80a1500 <_Z17_fetch_usbserial1v+0x40>)
 80a14f0:	f000 fa14 	bl	80a191c <__aeabi_atexit>
  return _usbserial1;
}
 80a14f4:	4802      	ldr	r0, [pc, #8]	; (80a1500 <_Z17_fetch_usbserial1v+0x40>)
 80a14f6:	b006      	add	sp, #24
 80a14f8:	bd10      	pop	{r4, pc}
 80a14fa:	bf00      	nop
 80a14fc:	20000240 	.word	0x20000240
 80a1500:	200002c8 	.word	0x200002c8
 80a1504:	20000068 	.word	0x20000068
 80a1508:	080a1375 	.word	0x080a1375

080a150c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a150c:	4770      	bx	lr

080a150e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a150e:	7441      	strb	r1, [r0, #17]
 80a1510:	4770      	bx	lr

080a1512 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a1512:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a1514:	7c00      	ldrb	r0, [r0, #16]
 80a1516:	f7ff f823 	bl	80a0560 <HAL_USART_Available_Data_For_Write>
}
 80a151a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a151e:	bd08      	pop	{r3, pc}

080a1520 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a1520:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a1522:	7c00      	ldrb	r0, [r0, #16]
 80a1524:	f7fe fffc 	bl	80a0520 <HAL_USART_Available_Data>
}
 80a1528:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a152c:	bd08      	pop	{r3, pc}

080a152e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a152e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a1530:	7c00      	ldrb	r0, [r0, #16]
 80a1532:	f7ff f805 	bl	80a0540 <HAL_USART_Peek_Data>
}
 80a1536:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a153a:	bf28      	it	cs
 80a153c:	f04f 30ff 	movcs.w	r0, #4294967295
 80a1540:	bd08      	pop	{r3, pc}

080a1542 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a1542:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a1544:	7c00      	ldrb	r0, [r0, #16]
 80a1546:	f7fe fff3 	bl	80a0530 <HAL_USART_Read_Data>
}
 80a154a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a154e:	bf28      	it	cs
 80a1550:	f04f 30ff 	movcs.w	r0, #4294967295
 80a1554:	bd08      	pop	{r3, pc}

080a1556 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a1556:	7c00      	ldrb	r0, [r0, #16]
 80a1558:	f7fe bffa 	b.w	80a0550 <HAL_USART_Flush_Data>

080a155c <_ZN11USARTSerialD0Ev>:
 80a155c:	b510      	push	{r4, lr}
 80a155e:	4604      	mov	r4, r0
 80a1560:	2114      	movs	r1, #20
 80a1562:	f000 f9e0 	bl	80a1926 <_ZdlPvj>
 80a1566:	4620      	mov	r0, r4
 80a1568:	bd10      	pop	{r4, pc}

080a156a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a156a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a156c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a156e:	4604      	mov	r4, r0
 80a1570:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1572:	b925      	cbnz	r5, 80a157e <_ZN11USARTSerial5writeEh+0x14>
 80a1574:	7c00      	ldrb	r0, [r0, #16]
 80a1576:	f7fe fff3 	bl	80a0560 <HAL_USART_Available_Data_For_Write>
 80a157a:	2800      	cmp	r0, #0
 80a157c:	dd05      	ble.n	80a158a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a157e:	4631      	mov	r1, r6
 80a1580:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a1582:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1586:	f7fe bfc3 	b.w	80a0510 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a158a:	4628      	mov	r0, r5
 80a158c:	bd70      	pop	{r4, r5, r6, pc}
	...

080a1590 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1590:	b510      	push	{r4, lr}
 80a1592:	4604      	mov	r4, r0
 80a1594:	4608      	mov	r0, r1
 80a1596:	4611      	mov	r1, r2
 80a1598:	2200      	movs	r2, #0
 80a159a:	6062      	str	r2, [r4, #4]
 80a159c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a15a0:	60a2      	str	r2, [r4, #8]
 80a15a2:	4a05      	ldr	r2, [pc, #20]	; (80a15b8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a15a4:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a15a6:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a15a8:	2201      	movs	r2, #1
 80a15aa:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a15ac:	461a      	mov	r2, r3
 80a15ae:	f7fe ffa7 	bl	80a0500 <HAL_USART_Init>
}
 80a15b2:	4620      	mov	r0, r4
 80a15b4:	bd10      	pop	{r4, pc}
 80a15b6:	bf00      	nop
 80a15b8:	080a2f68 	.word	0x080a2f68

080a15bc <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a15bc:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a15be:	4d0c      	ldr	r5, [pc, #48]	; (80a15f0 <_Z22__fetch_global_Serial1v+0x34>)
 80a15c0:	6829      	ldr	r1, [r5, #0]
 80a15c2:	f011 0401 	ands.w	r4, r1, #1
 80a15c6:	d111      	bne.n	80a15ec <_Z22__fetch_global_Serial1v+0x30>
 80a15c8:	4628      	mov	r0, r5
 80a15ca:	f7fe fd6a 	bl	80a00a2 <__cxa_guard_acquire>
 80a15ce:	b168      	cbz	r0, 80a15ec <_Z22__fetch_global_Serial1v+0x30>
 80a15d0:	4a08      	ldr	r2, [pc, #32]	; (80a15f4 <_Z22__fetch_global_Serial1v+0x38>)
 80a15d2:	4621      	mov	r1, r4
 80a15d4:	4b08      	ldr	r3, [pc, #32]	; (80a15f8 <_Z22__fetch_global_Serial1v+0x3c>)
 80a15d6:	4809      	ldr	r0, [pc, #36]	; (80a15fc <_Z22__fetch_global_Serial1v+0x40>)
 80a15d8:	f7ff ffda 	bl	80a1590 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a15dc:	4628      	mov	r0, r5
 80a15de:	f7fe fd65 	bl	80a00ac <__cxa_guard_release>
 80a15e2:	4a07      	ldr	r2, [pc, #28]	; (80a1600 <_Z22__fetch_global_Serial1v+0x44>)
 80a15e4:	4907      	ldr	r1, [pc, #28]	; (80a1604 <_Z22__fetch_global_Serial1v+0x48>)
 80a15e6:	4805      	ldr	r0, [pc, #20]	; (80a15fc <_Z22__fetch_global_Serial1v+0x40>)
 80a15e8:	f000 f998 	bl	80a191c <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a15ec:	4803      	ldr	r0, [pc, #12]	; (80a15fc <_Z22__fetch_global_Serial1v+0x40>)
 80a15ee:	bd38      	pop	{r3, r4, r5, pc}
 80a15f0:	20000478 	.word	0x20000478
 80a15f4:	2000047c 	.word	0x2000047c
 80a15f8:	200003f4 	.word	0x200003f4
 80a15fc:	200003e0 	.word	0x200003e0
 80a1600:	20000068 	.word	0x20000068
 80a1604:	080a150d 	.word	0x080a150d

080a1608 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a1608:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a160a:	6883      	ldr	r3, [r0, #8]
 80a160c:	4604      	mov	r4, r0
 80a160e:	b90b      	cbnz	r3, 80a1614 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a1610:	f000 f98b 	bl	80a192a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1614:	68c3      	ldr	r3, [r0, #12]
 80a1616:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80a1618:	68a3      	ldr	r3, [r4, #8]
 80a161a:	b11b      	cbz	r3, 80a1624 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a161c:	2203      	movs	r2, #3
 80a161e:	4621      	mov	r1, r4
 80a1620:	4620      	mov	r0, r4
 80a1622:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a1624:	4620      	mov	r0, r4
}
 80a1626:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a162a:	2110      	movs	r1, #16
 80a162c:	f000 b97b 	b.w	80a1926 <_ZdlPvj>

080a1630 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a1630:	4770      	bx	lr

080a1632 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a1632:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1634:	4606      	mov	r6, r0
 80a1636:	4615      	mov	r5, r2
 80a1638:	460c      	mov	r4, r1
 80a163a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a163c:	42bc      	cmp	r4, r7
 80a163e:	d006      	beq.n	80a164e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a1640:	6833      	ldr	r3, [r6, #0]
 80a1642:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a1646:	689b      	ldr	r3, [r3, #8]
 80a1648:	4630      	mov	r0, r6
 80a164a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a164c:	e7f6      	b.n	80a163c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a164e:	4628      	mov	r0, r5
 80a1650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1652 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a1652:	2200      	movs	r2, #0
 80a1654:	7c00      	ldrb	r0, [r0, #16]
 80a1656:	f7fe bfab 	b.w	80a05b0 <HAL_I2C_Write_Data>

080a165a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a165a:	2100      	movs	r1, #0
 80a165c:	7c00      	ldrb	r0, [r0, #16]
 80a165e:	f7fe bfaf 	b.w	80a05c0 <HAL_I2C_Available_Data>

080a1662 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a1662:	2100      	movs	r1, #0
 80a1664:	7c00      	ldrb	r0, [r0, #16]
 80a1666:	f7fe bfb3 	b.w	80a05d0 <HAL_I2C_Read_Data>

080a166a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a166a:	2100      	movs	r1, #0
 80a166c:	7c00      	ldrb	r0, [r0, #16]
 80a166e:	f7fe bfb7 	b.w	80a05e0 <HAL_I2C_Peek_Data>

080a1672 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a1672:	2100      	movs	r1, #0
 80a1674:	7c00      	ldrb	r0, [r0, #16]
 80a1676:	f7fe bfbb 	b.w	80a05f0 <HAL_I2C_Flush_Data>

080a167a <_ZN7TwoWireD0Ev>:
 80a167a:	b510      	push	{r4, lr}
 80a167c:	4604      	mov	r4, r0
 80a167e:	2114      	movs	r1, #20
 80a1680:	f000 f951 	bl	80a1926 <_ZdlPvj>
 80a1684:	4620      	mov	r0, r4
 80a1686:	bd10      	pop	{r4, pc}

080a1688 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a1688:	b510      	push	{r4, lr}
 80a168a:	4604      	mov	r4, r0
 80a168c:	4608      	mov	r0, r1
 80a168e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1692:	60a3      	str	r3, [r4, #8]
 80a1694:	4b04      	ldr	r3, [pc, #16]	; (80a16a8 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
 80a1696:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a1698:	7420      	strb	r0, [r4, #16]
 80a169a:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a169c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a169e:	f7fe ffaf 	bl	80a0600 <HAL_I2C_Init>

}
 80a16a2:	4620      	mov	r0, r4
 80a16a4:	bd10      	pop	{r4, pc}
 80a16a6:	bf00      	nop
 80a16a8:	080a2f98 	.word	0x080a2f98

080a16ac <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a16ac:	2300      	movs	r3, #0
 80a16ae:	461a      	mov	r2, r3
 80a16b0:	4619      	mov	r1, r3
 80a16b2:	7c00      	ldrb	r0, [r0, #16]
 80a16b4:	f7fe bf5c 	b.w	80a0570 <HAL_I2C_Begin>

080a16b8 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80a16b8:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 80a16ba:	2400      	movs	r4, #0
 80a16bc:	7c00      	ldrb	r0, [r0, #16]
 80a16be:	9400      	str	r4, [sp, #0]
 80a16c0:	f7fe ff5e 	bl	80a0580 <HAL_I2C_Request_Data>
  return result;
}
 80a16c4:	b2c0      	uxtb	r0, r0
 80a16c6:	b002      	add	sp, #8
 80a16c8:	bd10      	pop	{r4, pc}

080a16ca <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a16ca:	2301      	movs	r3, #1
 80a16cc:	f7ff bff4 	b.w	80a16b8 <_ZN7TwoWire11requestFromEhhh>

080a16d0 <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a16d0:	2200      	movs	r2, #0
 80a16d2:	7c00      	ldrb	r0, [r0, #16]
 80a16d4:	f7fe bf5c 	b.w	80a0590 <HAL_I2C_Begin_Transmission>

080a16d8 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a16d8:	2200      	movs	r2, #0
 80a16da:	7c00      	ldrb	r0, [r0, #16]
 80a16dc:	f7fe bf60 	b.w	80a05a0 <HAL_I2C_End_Transmission>

080a16e0 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a16e0:	2101      	movs	r1, #1
 80a16e2:	f7ff bff9 	b.w	80a16d8 <_ZN7TwoWire15endTransmissionEh>

080a16e6 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a16e6:	2200      	movs	r2, #0
 80a16e8:	4611      	mov	r1, r2
 80a16ea:	6840      	ldr	r0, [r0, #4]
 80a16ec:	f7ff b816 	b.w	80a071c <network_ready>

080a16f0 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a16f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a16f2:	4616      	mov	r6, r2
 80a16f4:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a16f6:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a16f8:	460f      	mov	r7, r1
 80a16fa:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a16fc:	2100      	movs	r1, #0
 80a16fe:	a803      	add	r0, sp, #12
 80a1700:	f001 fafb 	bl	80a2cfa <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1704:	4630      	mov	r0, r6
 80a1706:	f001 fb44 	bl	80a2d92 <strlen>
 80a170a:	2500      	movs	r5, #0
 80a170c:	9500      	str	r5, [sp, #0]
 80a170e:	b281      	uxth	r1, r0
 80a1710:	687b      	ldr	r3, [r7, #4]
 80a1712:	aa03      	add	r2, sp, #12
 80a1714:	4630      	mov	r0, r6
 80a1716:	f7fe ffad 	bl	80a0674 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a171a:	b120      	cbz	r0, 80a1726 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a171c:	4629      	mov	r1, r5
 80a171e:	4620      	mov	r0, r4
 80a1720:	f7ff fe04 	bl	80a132c <_ZN9IPAddressC1Em>
 80a1724:	e003      	b.n	80a172e <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a1726:	a903      	add	r1, sp, #12
 80a1728:	4620      	mov	r0, r4
 80a172a:	f7ff fded 	bl	80a1308 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a172e:	4620      	mov	r0, r4
 80a1730:	b009      	add	sp, #36	; 0x24
 80a1732:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1734 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a1734:	2200      	movs	r2, #0
 80a1736:	4611      	mov	r1, r2
 80a1738:	6840      	ldr	r0, [r0, #4]
 80a173a:	f7ff b80f 	b.w	80a075c <network_listening>

080a173e <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a173e:	2200      	movs	r2, #0
 80a1740:	4611      	mov	r1, r2
 80a1742:	6840      	ldr	r0, [r0, #4]
 80a1744:	f7ff b81a 	b.w	80a077c <network_get_listen_timeout>

080a1748 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a1748:	2200      	movs	r2, #0
 80a174a:	6840      	ldr	r0, [r0, #4]
 80a174c:	f7ff b80e 	b.w	80a076c <network_set_listen_timeout>

080a1750 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a1750:	2200      	movs	r2, #0
 80a1752:	f081 0101 	eor.w	r1, r1, #1
 80a1756:	6840      	ldr	r0, [r0, #4]
 80a1758:	f7fe bff8 	b.w	80a074c <network_listen>

080a175c <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a175c:	2300      	movs	r3, #0
 80a175e:	461a      	mov	r2, r3
 80a1760:	4619      	mov	r1, r3
 80a1762:	6840      	ldr	r0, [r0, #4]
 80a1764:	f7fe bfea 	b.w	80a073c <network_off>

080a1768 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a1768:	2200      	movs	r2, #0
 80a176a:	4611      	mov	r1, r2
 80a176c:	6840      	ldr	r0, [r0, #4]
 80a176e:	f7fe bfc5 	b.w	80a06fc <network_connecting>

080a1772 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a1772:	2200      	movs	r2, #0
 80a1774:	2102      	movs	r1, #2
 80a1776:	6840      	ldr	r0, [r0, #4]
 80a1778:	f7fe bfc8 	b.w	80a070c <network_disconnect>

080a177c <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a177c:	2300      	movs	r3, #0
 80a177e:	461a      	mov	r2, r3
 80a1780:	6840      	ldr	r0, [r0, #4]
 80a1782:	f7fe bfb3 	b.w	80a06ec <network_connect>
	...

080a1788 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a1788:	4b02      	ldr	r3, [pc, #8]	; (80a1794 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a178a:	2204      	movs	r2, #4
 80a178c:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a178e:	4a02      	ldr	r2, [pc, #8]	; (80a1798 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a1790:	601a      	str	r2, [r3, #0]
 80a1792:	4770      	bx	lr
 80a1794:	20000500 	.word	0x20000500
 80a1798:	080a2fc0 	.word	0x080a2fc0

080a179c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a179c:	2300      	movs	r3, #0
 80a179e:	461a      	mov	r2, r3
 80a17a0:	6840      	ldr	r0, [r0, #4]
 80a17a2:	f7fe bfa3 	b.w	80a06ec <network_connect>

080a17a6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a17a6:	2200      	movs	r2, #0
 80a17a8:	2102      	movs	r1, #2
 80a17aa:	6840      	ldr	r0, [r0, #4]
 80a17ac:	f7fe bfae 	b.w	80a070c <network_disconnect>

080a17b0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a17b0:	2200      	movs	r2, #0
 80a17b2:	4611      	mov	r1, r2
 80a17b4:	6840      	ldr	r0, [r0, #4]
 80a17b6:	f7fe bfa1 	b.w	80a06fc <network_connecting>

080a17ba <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a17ba:	2200      	movs	r2, #0
 80a17bc:	4611      	mov	r1, r2
 80a17be:	6840      	ldr	r0, [r0, #4]
 80a17c0:	f7fe bfac 	b.w	80a071c <network_ready>

080a17c4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a17c4:	2300      	movs	r3, #0
 80a17c6:	461a      	mov	r2, r3
 80a17c8:	4619      	mov	r1, r3
 80a17ca:	6840      	ldr	r0, [r0, #4]
 80a17cc:	f7fe bfae 	b.w	80a072c <network_on>

080a17d0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a17d0:	2300      	movs	r3, #0
 80a17d2:	461a      	mov	r2, r3
 80a17d4:	4619      	mov	r1, r3
 80a17d6:	6840      	ldr	r0, [r0, #4]
 80a17d8:	f7fe bfb0 	b.w	80a073c <network_off>

080a17dc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a17dc:	2200      	movs	r2, #0
 80a17de:	f081 0101 	eor.w	r1, r1, #1
 80a17e2:	6840      	ldr	r0, [r0, #4]
 80a17e4:	f7fe bfb2 	b.w	80a074c <network_listen>

080a17e8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a17e8:	2200      	movs	r2, #0
 80a17ea:	6840      	ldr	r0, [r0, #4]
 80a17ec:	f7fe bfbe 	b.w	80a076c <network_set_listen_timeout>

080a17f0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a17f0:	2200      	movs	r2, #0
 80a17f2:	4611      	mov	r1, r2
 80a17f4:	6840      	ldr	r0, [r0, #4]
 80a17f6:	f7fe bfc1 	b.w	80a077c <network_get_listen_timeout>

080a17fa <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a17fa:	2200      	movs	r2, #0
 80a17fc:	4611      	mov	r1, r2
 80a17fe:	6840      	ldr	r0, [r0, #4]
 80a1800:	f7fe bfac 	b.w	80a075c <network_listening>

080a1804 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a1804:	b570      	push	{r4, r5, r6, lr}
 80a1806:	4616      	mov	r6, r2
 80a1808:	b08e      	sub	sp, #56	; 0x38
 80a180a:	4604      	mov	r4, r0
    IPAddress addr;
 80a180c:	a808      	add	r0, sp, #32
 80a180e:	f7ff fd6d 	bl	80a12ec <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a1812:	2211      	movs	r2, #17
 80a1814:	2100      	movs	r1, #0
 80a1816:	a803      	add	r0, sp, #12
 80a1818:	f001 fa6f 	bl	80a2cfa <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a181c:	4630      	mov	r0, r6
 80a181e:	f001 fab8 	bl	80a2d92 <strlen>
 80a1822:	2500      	movs	r5, #0
 80a1824:	4b0a      	ldr	r3, [pc, #40]	; (80a1850 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a1826:	9500      	str	r5, [sp, #0]
 80a1828:	b281      	uxth	r1, r0
 80a182a:	685b      	ldr	r3, [r3, #4]
 80a182c:	aa03      	add	r2, sp, #12
 80a182e:	4630      	mov	r0, r6
 80a1830:	f7fe ff20 	bl	80a0674 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1834:	b120      	cbz	r0, 80a1840 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a1836:	4629      	mov	r1, r5
 80a1838:	4620      	mov	r0, r4
 80a183a:	f7ff fd77 	bl	80a132c <_ZN9IPAddressC1Em>
 80a183e:	e003      	b.n	80a1848 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a1840:	a903      	add	r1, sp, #12
 80a1842:	4620      	mov	r0, r4
 80a1844:	f7ff fd60 	bl	80a1308 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a1848:	4620      	mov	r0, r4
 80a184a:	b00e      	add	sp, #56	; 0x38
 80a184c:	bd70      	pop	{r4, r5, r6, pc}
 80a184e:	bf00      	nop
 80a1850:	20000500 	.word	0x20000500

080a1854 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a1854:	4b02      	ldr	r3, [pc, #8]	; (80a1860 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a1856:	4a03      	ldr	r2, [pc, #12]	; (80a1864 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a1858:	601a      	str	r2, [r3, #0]
 80a185a:	2200      	movs	r2, #0
 80a185c:	605a      	str	r2, [r3, #4]
 80a185e:	4770      	bx	lr
 80a1860:	20000508 	.word	0x20000508
 80a1864:	080a2ff4 	.word	0x080a2ff4

080a1868 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1868:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a186a:	4c0c      	ldr	r4, [pc, #48]	; (80a189c <_GLOBAL__sub_I_SPI+0x34>)
 80a186c:	4e0c      	ldr	r6, [pc, #48]	; (80a18a0 <_GLOBAL__sub_I_SPI+0x38>)
 80a186e:	4d0d      	ldr	r5, [pc, #52]	; (80a18a4 <_GLOBAL__sub_I_SPI+0x3c>)
 80a1870:	2100      	movs	r1, #0
 80a1872:	4620      	mov	r0, r4
 80a1874:	f7fe ffd2 	bl	80a081c <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a1878:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a187a:	4c0b      	ldr	r4, [pc, #44]	; (80a18a8 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a187c:	4632      	mov	r2, r6
 80a187e:	4629      	mov	r1, r5
 80a1880:	f000 f84c 	bl	80a191c <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1884:	2101      	movs	r1, #1
 80a1886:	4620      	mov	r0, r4
 80a1888:	f7fe ffc8 	bl	80a081c <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a188c:	4632      	mov	r2, r6
 80a188e:	4629      	mov	r1, r5
 80a1890:	4620      	mov	r0, r4
 80a1892:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a1896:	f000 b841 	b.w	80a191c <__aeabi_atexit>
 80a189a:	bf00      	nop
 80a189c:	20000510 	.word	0x20000510
 80a18a0:	20000068 	.word	0x20000068
 80a18a4:	080a080d 	.word	0x080a080d
 80a18a8:	20000520 	.word	0x20000520

080a18ac <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a18ac:	b513      	push	{r0, r1, r4, lr}
 80a18ae:	4c08      	ldr	r4, [pc, #32]	; (80a18d0 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a18b0:	2300      	movs	r3, #0
 80a18b2:	461a      	mov	r2, r3
 80a18b4:	4619      	mov	r1, r3
 80a18b6:	9300      	str	r3, [sp, #0]
 80a18b8:	4620      	mov	r0, r4
 80a18ba:	f7ff fd4d 	bl	80a1358 <_ZN9IPAddressC1Ehhhh>
 80a18be:	4620      	mov	r0, r4
 80a18c0:	4a04      	ldr	r2, [pc, #16]	; (80a18d4 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a18c2:	4905      	ldr	r1, [pc, #20]	; (80a18d8 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a18c4:	b002      	add	sp, #8
 80a18c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a18ca:	f000 b827 	b.w	80a191c <__aeabi_atexit>
 80a18ce:	bf00      	nop
 80a18d0:	20000534 	.word	0x20000534
 80a18d4:	20000068 	.word	0x20000068
 80a18d8:	080a12a9 	.word	0x080a12a9

080a18dc <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a18dc:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a18de:	4d0b      	ldr	r5, [pc, #44]	; (80a190c <_Z19__fetch_global_Wirev+0x30>)
 80a18e0:	6829      	ldr	r1, [r5, #0]
 80a18e2:	f011 0401 	ands.w	r4, r1, #1
 80a18e6:	d10f      	bne.n	80a1908 <_Z19__fetch_global_Wirev+0x2c>
 80a18e8:	4628      	mov	r0, r5
 80a18ea:	f7fe fbda 	bl	80a00a2 <__cxa_guard_acquire>
 80a18ee:	b158      	cbz	r0, 80a1908 <_Z19__fetch_global_Wirev+0x2c>
 80a18f0:	4621      	mov	r1, r4
 80a18f2:	4807      	ldr	r0, [pc, #28]	; (80a1910 <_Z19__fetch_global_Wirev+0x34>)
 80a18f4:	f7ff fec8 	bl	80a1688 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a18f8:	4628      	mov	r0, r5
 80a18fa:	f7fe fbd7 	bl	80a00ac <__cxa_guard_release>
 80a18fe:	4a05      	ldr	r2, [pc, #20]	; (80a1914 <_Z19__fetch_global_Wirev+0x38>)
 80a1900:	4905      	ldr	r1, [pc, #20]	; (80a1918 <_Z19__fetch_global_Wirev+0x3c>)
 80a1902:	4803      	ldr	r0, [pc, #12]	; (80a1910 <_Z19__fetch_global_Wirev+0x34>)
 80a1904:	f000 f80a 	bl	80a191c <__aeabi_atexit>
	return wire;
}
 80a1908:	4801      	ldr	r0, [pc, #4]	; (80a1910 <_Z19__fetch_global_Wirev+0x34>)
 80a190a:	bd38      	pop	{r3, r4, r5, pc}
 80a190c:	2000054c 	.word	0x2000054c
 80a1910:	20000550 	.word	0x20000550
 80a1914:	20000068 	.word	0x20000068
 80a1918:	080a1631 	.word	0x080a1631

080a191c <__aeabi_atexit>:
 80a191c:	460b      	mov	r3, r1
 80a191e:	4601      	mov	r1, r0
 80a1920:	4618      	mov	r0, r3
 80a1922:	f001 b9d1 	b.w	80a2cc8 <__cxa_atexit>

080a1926 <_ZdlPvj>:
 80a1926:	f7fe bbba 	b.w	80a009e <_ZdlPv>

080a192a <_ZSt25__throw_bad_function_callv>:
 80a192a:	b508      	push	{r3, lr}
 80a192c:	f7fe ff5e 	bl	80a07ec <abort>

080a1930 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1930:	4b18      	ldr	r3, [pc, #96]	; (80a1994 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a1932:	681a      	ldr	r2, [r3, #0]
 80a1934:	07d1      	lsls	r1, r2, #31
 80a1936:	bf5c      	itt	pl
 80a1938:	2201      	movpl	r2, #1
 80a193a:	601a      	strpl	r2, [r3, #0]
 80a193c:	4b16      	ldr	r3, [pc, #88]	; (80a1998 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a193e:	681a      	ldr	r2, [r3, #0]
 80a1940:	07d2      	lsls	r2, r2, #31
 80a1942:	bf5c      	itt	pl
 80a1944:	2201      	movpl	r2, #1
 80a1946:	601a      	strpl	r2, [r3, #0]
 80a1948:	4b14      	ldr	r3, [pc, #80]	; (80a199c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a194a:	681a      	ldr	r2, [r3, #0]
 80a194c:	07d0      	lsls	r0, r2, #31
 80a194e:	bf5c      	itt	pl
 80a1950:	2201      	movpl	r2, #1
 80a1952:	601a      	strpl	r2, [r3, #0]
 80a1954:	4b12      	ldr	r3, [pc, #72]	; (80a19a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a1956:	681a      	ldr	r2, [r3, #0]
 80a1958:	07d1      	lsls	r1, r2, #31
 80a195a:	bf5c      	itt	pl
 80a195c:	2201      	movpl	r2, #1
 80a195e:	601a      	strpl	r2, [r3, #0]
 80a1960:	4b10      	ldr	r3, [pc, #64]	; (80a19a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a1962:	681a      	ldr	r2, [r3, #0]
 80a1964:	07d2      	lsls	r2, r2, #31
 80a1966:	bf5c      	itt	pl
 80a1968:	2201      	movpl	r2, #1
 80a196a:	601a      	strpl	r2, [r3, #0]
 80a196c:	4b0e      	ldr	r3, [pc, #56]	; (80a19a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a196e:	681a      	ldr	r2, [r3, #0]
 80a1970:	07d0      	lsls	r0, r2, #31
 80a1972:	bf5c      	itt	pl
 80a1974:	2201      	movpl	r2, #1
 80a1976:	601a      	strpl	r2, [r3, #0]
 80a1978:	4b0c      	ldr	r3, [pc, #48]	; (80a19ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a197a:	681a      	ldr	r2, [r3, #0]
 80a197c:	07d1      	lsls	r1, r2, #31
 80a197e:	bf5c      	itt	pl
 80a1980:	2201      	movpl	r2, #1
 80a1982:	601a      	strpl	r2, [r3, #0]
 80a1984:	4b0a      	ldr	r3, [pc, #40]	; (80a19b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a1986:	681a      	ldr	r2, [r3, #0]
 80a1988:	07d2      	lsls	r2, r2, #31
 80a198a:	bf5c      	itt	pl
 80a198c:	2201      	movpl	r2, #1
 80a198e:	601a      	strpl	r2, [r3, #0]
 80a1990:	4770      	bx	lr
 80a1992:	bf00      	nop
 80a1994:	20000580 	.word	0x20000580
 80a1998:	2000057c 	.word	0x2000057c
 80a199c:	20000578 	.word	0x20000578
 80a19a0:	20000574 	.word	0x20000574
 80a19a4:	20000570 	.word	0x20000570
 80a19a8:	2000056c 	.word	0x2000056c
 80a19ac:	20000568 	.word	0x20000568
 80a19b0:	20000564 	.word	0x20000564

080a19b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a19b4:	4b24      	ldr	r3, [pc, #144]	; (80a1a48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a19b6:	681a      	ldr	r2, [r3, #0]
 80a19b8:	07d0      	lsls	r0, r2, #31
 80a19ba:	bf5c      	itt	pl
 80a19bc:	2201      	movpl	r2, #1
 80a19be:	601a      	strpl	r2, [r3, #0]
 80a19c0:	4b22      	ldr	r3, [pc, #136]	; (80a1a4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a19c2:	681a      	ldr	r2, [r3, #0]
 80a19c4:	07d1      	lsls	r1, r2, #31
 80a19c6:	bf5c      	itt	pl
 80a19c8:	2201      	movpl	r2, #1
 80a19ca:	601a      	strpl	r2, [r3, #0]
 80a19cc:	4b20      	ldr	r3, [pc, #128]	; (80a1a50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a19ce:	681a      	ldr	r2, [r3, #0]
 80a19d0:	07d2      	lsls	r2, r2, #31
 80a19d2:	bf5c      	itt	pl
 80a19d4:	2201      	movpl	r2, #1
 80a19d6:	601a      	strpl	r2, [r3, #0]
 80a19d8:	4b1e      	ldr	r3, [pc, #120]	; (80a1a54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a19da:	681a      	ldr	r2, [r3, #0]
 80a19dc:	07d0      	lsls	r0, r2, #31
 80a19de:	bf5c      	itt	pl
 80a19e0:	2201      	movpl	r2, #1
 80a19e2:	601a      	strpl	r2, [r3, #0]
 80a19e4:	4b1c      	ldr	r3, [pc, #112]	; (80a1a58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a19e6:	681a      	ldr	r2, [r3, #0]
 80a19e8:	07d1      	lsls	r1, r2, #31
 80a19ea:	bf5c      	itt	pl
 80a19ec:	2201      	movpl	r2, #1
 80a19ee:	601a      	strpl	r2, [r3, #0]
 80a19f0:	4b1a      	ldr	r3, [pc, #104]	; (80a1a5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a19f2:	681a      	ldr	r2, [r3, #0]
 80a19f4:	07d2      	lsls	r2, r2, #31
 80a19f6:	bf5c      	itt	pl
 80a19f8:	2201      	movpl	r2, #1
 80a19fa:	601a      	strpl	r2, [r3, #0]
 80a19fc:	4b18      	ldr	r3, [pc, #96]	; (80a1a60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a19fe:	681a      	ldr	r2, [r3, #0]
 80a1a00:	07d0      	lsls	r0, r2, #31
 80a1a02:	bf5c      	itt	pl
 80a1a04:	2201      	movpl	r2, #1
 80a1a06:	601a      	strpl	r2, [r3, #0]
 80a1a08:	4b16      	ldr	r3, [pc, #88]	; (80a1a64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a1a0a:	681a      	ldr	r2, [r3, #0]
 80a1a0c:	07d1      	lsls	r1, r2, #31
 80a1a0e:	bf5c      	itt	pl
 80a1a10:	2201      	movpl	r2, #1
 80a1a12:	601a      	strpl	r2, [r3, #0]
 80a1a14:	4b14      	ldr	r3, [pc, #80]	; (80a1a68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a1a16:	681a      	ldr	r2, [r3, #0]
 80a1a18:	07d2      	lsls	r2, r2, #31
 80a1a1a:	bf5c      	itt	pl
 80a1a1c:	2201      	movpl	r2, #1
 80a1a1e:	601a      	strpl	r2, [r3, #0]
 80a1a20:	4b12      	ldr	r3, [pc, #72]	; (80a1a6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a1a22:	681a      	ldr	r2, [r3, #0]
 80a1a24:	07d0      	lsls	r0, r2, #31
 80a1a26:	bf5c      	itt	pl
 80a1a28:	2201      	movpl	r2, #1
 80a1a2a:	601a      	strpl	r2, [r3, #0]
 80a1a2c:	4b10      	ldr	r3, [pc, #64]	; (80a1a70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a1a2e:	681a      	ldr	r2, [r3, #0]
 80a1a30:	07d1      	lsls	r1, r2, #31
 80a1a32:	bf5c      	itt	pl
 80a1a34:	2201      	movpl	r2, #1
 80a1a36:	601a      	strpl	r2, [r3, #0]
 80a1a38:	4b0e      	ldr	r3, [pc, #56]	; (80a1a74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a1a3a:	681a      	ldr	r2, [r3, #0]
 80a1a3c:	07d2      	lsls	r2, r2, #31
 80a1a3e:	bf5c      	itt	pl
 80a1a40:	2201      	movpl	r2, #1
 80a1a42:	601a      	strpl	r2, [r3, #0]
 80a1a44:	4770      	bx	lr
 80a1a46:	bf00      	nop
 80a1a48:	200005b0 	.word	0x200005b0
 80a1a4c:	200005ac 	.word	0x200005ac
 80a1a50:	200005a8 	.word	0x200005a8
 80a1a54:	200005a4 	.word	0x200005a4
 80a1a58:	200005a0 	.word	0x200005a0
 80a1a5c:	2000059c 	.word	0x2000059c
 80a1a60:	20000598 	.word	0x20000598
 80a1a64:	20000594 	.word	0x20000594
 80a1a68:	20000590 	.word	0x20000590
 80a1a6c:	2000058c 	.word	0x2000058c
 80a1a70:	20000588 	.word	0x20000588
 80a1a74:	20000584 	.word	0x20000584

080a1a78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a1a78:	4b24      	ldr	r3, [pc, #144]	; (80a1b0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a1a7a:	681a      	ldr	r2, [r3, #0]
 80a1a7c:	07d0      	lsls	r0, r2, #31
 80a1a7e:	bf5c      	itt	pl
 80a1a80:	2201      	movpl	r2, #1
 80a1a82:	601a      	strpl	r2, [r3, #0]
 80a1a84:	4b22      	ldr	r3, [pc, #136]	; (80a1b10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a1a86:	681a      	ldr	r2, [r3, #0]
 80a1a88:	07d1      	lsls	r1, r2, #31
 80a1a8a:	bf5c      	itt	pl
 80a1a8c:	2201      	movpl	r2, #1
 80a1a8e:	601a      	strpl	r2, [r3, #0]
 80a1a90:	4b20      	ldr	r3, [pc, #128]	; (80a1b14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a1a92:	681a      	ldr	r2, [r3, #0]
 80a1a94:	07d2      	lsls	r2, r2, #31
 80a1a96:	bf5c      	itt	pl
 80a1a98:	2201      	movpl	r2, #1
 80a1a9a:	601a      	strpl	r2, [r3, #0]
 80a1a9c:	4b1e      	ldr	r3, [pc, #120]	; (80a1b18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a1a9e:	681a      	ldr	r2, [r3, #0]
 80a1aa0:	07d0      	lsls	r0, r2, #31
 80a1aa2:	bf5c      	itt	pl
 80a1aa4:	2201      	movpl	r2, #1
 80a1aa6:	601a      	strpl	r2, [r3, #0]
 80a1aa8:	4b1c      	ldr	r3, [pc, #112]	; (80a1b1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a1aaa:	681a      	ldr	r2, [r3, #0]
 80a1aac:	07d1      	lsls	r1, r2, #31
 80a1aae:	bf5c      	itt	pl
 80a1ab0:	2201      	movpl	r2, #1
 80a1ab2:	601a      	strpl	r2, [r3, #0]
 80a1ab4:	4b1a      	ldr	r3, [pc, #104]	; (80a1b20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a1ab6:	681a      	ldr	r2, [r3, #0]
 80a1ab8:	07d2      	lsls	r2, r2, #31
 80a1aba:	bf5c      	itt	pl
 80a1abc:	2201      	movpl	r2, #1
 80a1abe:	601a      	strpl	r2, [r3, #0]
 80a1ac0:	4b18      	ldr	r3, [pc, #96]	; (80a1b24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a1ac2:	681a      	ldr	r2, [r3, #0]
 80a1ac4:	07d0      	lsls	r0, r2, #31
 80a1ac6:	bf5c      	itt	pl
 80a1ac8:	2201      	movpl	r2, #1
 80a1aca:	601a      	strpl	r2, [r3, #0]
 80a1acc:	4b16      	ldr	r3, [pc, #88]	; (80a1b28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a1ace:	681a      	ldr	r2, [r3, #0]
 80a1ad0:	07d1      	lsls	r1, r2, #31
 80a1ad2:	bf5c      	itt	pl
 80a1ad4:	2201      	movpl	r2, #1
 80a1ad6:	601a      	strpl	r2, [r3, #0]
 80a1ad8:	4b14      	ldr	r3, [pc, #80]	; (80a1b2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a1ada:	681a      	ldr	r2, [r3, #0]
 80a1adc:	07d2      	lsls	r2, r2, #31
 80a1ade:	bf5c      	itt	pl
 80a1ae0:	2201      	movpl	r2, #1
 80a1ae2:	601a      	strpl	r2, [r3, #0]
 80a1ae4:	4b12      	ldr	r3, [pc, #72]	; (80a1b30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a1ae6:	681a      	ldr	r2, [r3, #0]
 80a1ae8:	07d0      	lsls	r0, r2, #31
 80a1aea:	bf5c      	itt	pl
 80a1aec:	2201      	movpl	r2, #1
 80a1aee:	601a      	strpl	r2, [r3, #0]
 80a1af0:	4b10      	ldr	r3, [pc, #64]	; (80a1b34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a1af2:	681a      	ldr	r2, [r3, #0]
 80a1af4:	07d1      	lsls	r1, r2, #31
 80a1af6:	bf5c      	itt	pl
 80a1af8:	2201      	movpl	r2, #1
 80a1afa:	601a      	strpl	r2, [r3, #0]
 80a1afc:	4b0e      	ldr	r3, [pc, #56]	; (80a1b38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a1afe:	681a      	ldr	r2, [r3, #0]
 80a1b00:	07d2      	lsls	r2, r2, #31
 80a1b02:	bf5c      	itt	pl
 80a1b04:	2201      	movpl	r2, #1
 80a1b06:	601a      	strpl	r2, [r3, #0]
 80a1b08:	4770      	bx	lr
 80a1b0a:	bf00      	nop
 80a1b0c:	200005e0 	.word	0x200005e0
 80a1b10:	200005dc 	.word	0x200005dc
 80a1b14:	200005d8 	.word	0x200005d8
 80a1b18:	200005d4 	.word	0x200005d4
 80a1b1c:	200005d0 	.word	0x200005d0
 80a1b20:	200005cc 	.word	0x200005cc
 80a1b24:	200005c8 	.word	0x200005c8
 80a1b28:	200005c4 	.word	0x200005c4
 80a1b2c:	200005c0 	.word	0x200005c0
 80a1b30:	200005bc 	.word	0x200005bc
 80a1b34:	200005b8 	.word	0x200005b8
 80a1b38:	200005b4 	.word	0x200005b4

080a1b3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1b3c:	4b18      	ldr	r3, [pc, #96]	; (80a1ba0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a1b3e:	681a      	ldr	r2, [r3, #0]
 80a1b40:	07d1      	lsls	r1, r2, #31
 80a1b42:	bf5c      	itt	pl
 80a1b44:	2201      	movpl	r2, #1
 80a1b46:	601a      	strpl	r2, [r3, #0]
 80a1b48:	4b16      	ldr	r3, [pc, #88]	; (80a1ba4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a1b4a:	681a      	ldr	r2, [r3, #0]
 80a1b4c:	07d2      	lsls	r2, r2, #31
 80a1b4e:	bf5c      	itt	pl
 80a1b50:	2201      	movpl	r2, #1
 80a1b52:	601a      	strpl	r2, [r3, #0]
 80a1b54:	4b14      	ldr	r3, [pc, #80]	; (80a1ba8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a1b56:	681a      	ldr	r2, [r3, #0]
 80a1b58:	07d0      	lsls	r0, r2, #31
 80a1b5a:	bf5c      	itt	pl
 80a1b5c:	2201      	movpl	r2, #1
 80a1b5e:	601a      	strpl	r2, [r3, #0]
 80a1b60:	4b12      	ldr	r3, [pc, #72]	; (80a1bac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a1b62:	681a      	ldr	r2, [r3, #0]
 80a1b64:	07d1      	lsls	r1, r2, #31
 80a1b66:	bf5c      	itt	pl
 80a1b68:	2201      	movpl	r2, #1
 80a1b6a:	601a      	strpl	r2, [r3, #0]
 80a1b6c:	4b10      	ldr	r3, [pc, #64]	; (80a1bb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a1b6e:	681a      	ldr	r2, [r3, #0]
 80a1b70:	07d2      	lsls	r2, r2, #31
 80a1b72:	bf5c      	itt	pl
 80a1b74:	2201      	movpl	r2, #1
 80a1b76:	601a      	strpl	r2, [r3, #0]
 80a1b78:	4b0e      	ldr	r3, [pc, #56]	; (80a1bb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a1b7a:	681a      	ldr	r2, [r3, #0]
 80a1b7c:	07d0      	lsls	r0, r2, #31
 80a1b7e:	bf5c      	itt	pl
 80a1b80:	2201      	movpl	r2, #1
 80a1b82:	601a      	strpl	r2, [r3, #0]
 80a1b84:	4b0c      	ldr	r3, [pc, #48]	; (80a1bb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a1b86:	681a      	ldr	r2, [r3, #0]
 80a1b88:	07d1      	lsls	r1, r2, #31
 80a1b8a:	bf5c      	itt	pl
 80a1b8c:	2201      	movpl	r2, #1
 80a1b8e:	601a      	strpl	r2, [r3, #0]
 80a1b90:	4b0a      	ldr	r3, [pc, #40]	; (80a1bbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a1b92:	681a      	ldr	r2, [r3, #0]
 80a1b94:	07d2      	lsls	r2, r2, #31
 80a1b96:	bf5c      	itt	pl
 80a1b98:	2201      	movpl	r2, #1
 80a1b9a:	601a      	strpl	r2, [r3, #0]
 80a1b9c:	4770      	bx	lr
 80a1b9e:	bf00      	nop
 80a1ba0:	20000600 	.word	0x20000600
 80a1ba4:	200005fc 	.word	0x200005fc
 80a1ba8:	200005f8 	.word	0x200005f8
 80a1bac:	200005f4 	.word	0x200005f4
 80a1bb0:	200005f0 	.word	0x200005f0
 80a1bb4:	200005ec 	.word	0x200005ec
 80a1bb8:	200005e8 	.word	0x200005e8
 80a1bbc:	200005e4 	.word	0x200005e4

080a1bc0 <__aeabi_drsub>:
 80a1bc0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a1bc4:	e002      	b.n	80a1bcc <__adddf3>
 80a1bc6:	bf00      	nop

080a1bc8 <__aeabi_dsub>:
 80a1bc8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a1bcc <__adddf3>:
 80a1bcc:	b530      	push	{r4, r5, lr}
 80a1bce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a1bd2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a1bd6:	ea94 0f05 	teq	r4, r5
 80a1bda:	bf08      	it	eq
 80a1bdc:	ea90 0f02 	teqeq	r0, r2
 80a1be0:	bf1f      	itttt	ne
 80a1be2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a1be6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a1bea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a1bee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a1bf2:	f000 80e2 	beq.w	80a1dba <__adddf3+0x1ee>
 80a1bf6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a1bfa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a1bfe:	bfb8      	it	lt
 80a1c00:	426d      	neglt	r5, r5
 80a1c02:	dd0c      	ble.n	80a1c1e <__adddf3+0x52>
 80a1c04:	442c      	add	r4, r5
 80a1c06:	ea80 0202 	eor.w	r2, r0, r2
 80a1c0a:	ea81 0303 	eor.w	r3, r1, r3
 80a1c0e:	ea82 0000 	eor.w	r0, r2, r0
 80a1c12:	ea83 0101 	eor.w	r1, r3, r1
 80a1c16:	ea80 0202 	eor.w	r2, r0, r2
 80a1c1a:	ea81 0303 	eor.w	r3, r1, r3
 80a1c1e:	2d36      	cmp	r5, #54	; 0x36
 80a1c20:	bf88      	it	hi
 80a1c22:	bd30      	pophi	{r4, r5, pc}
 80a1c24:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a1c28:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a1c2c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a1c30:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a1c34:	d002      	beq.n	80a1c3c <__adddf3+0x70>
 80a1c36:	4240      	negs	r0, r0
 80a1c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a1c3c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a1c40:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a1c44:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a1c48:	d002      	beq.n	80a1c50 <__adddf3+0x84>
 80a1c4a:	4252      	negs	r2, r2
 80a1c4c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a1c50:	ea94 0f05 	teq	r4, r5
 80a1c54:	f000 80a7 	beq.w	80a1da6 <__adddf3+0x1da>
 80a1c58:	f1a4 0401 	sub.w	r4, r4, #1
 80a1c5c:	f1d5 0e20 	rsbs	lr, r5, #32
 80a1c60:	db0d      	blt.n	80a1c7e <__adddf3+0xb2>
 80a1c62:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a1c66:	fa22 f205 	lsr.w	r2, r2, r5
 80a1c6a:	1880      	adds	r0, r0, r2
 80a1c6c:	f141 0100 	adc.w	r1, r1, #0
 80a1c70:	fa03 f20e 	lsl.w	r2, r3, lr
 80a1c74:	1880      	adds	r0, r0, r2
 80a1c76:	fa43 f305 	asr.w	r3, r3, r5
 80a1c7a:	4159      	adcs	r1, r3
 80a1c7c:	e00e      	b.n	80a1c9c <__adddf3+0xd0>
 80a1c7e:	f1a5 0520 	sub.w	r5, r5, #32
 80a1c82:	f10e 0e20 	add.w	lr, lr, #32
 80a1c86:	2a01      	cmp	r2, #1
 80a1c88:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a1c8c:	bf28      	it	cs
 80a1c8e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a1c92:	fa43 f305 	asr.w	r3, r3, r5
 80a1c96:	18c0      	adds	r0, r0, r3
 80a1c98:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a1c9c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1ca0:	d507      	bpl.n	80a1cb2 <__adddf3+0xe6>
 80a1ca2:	f04f 0e00 	mov.w	lr, #0
 80a1ca6:	f1dc 0c00 	rsbs	ip, ip, #0
 80a1caa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a1cae:	eb6e 0101 	sbc.w	r1, lr, r1
 80a1cb2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a1cb6:	d31b      	bcc.n	80a1cf0 <__adddf3+0x124>
 80a1cb8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a1cbc:	d30c      	bcc.n	80a1cd8 <__adddf3+0x10c>
 80a1cbe:	0849      	lsrs	r1, r1, #1
 80a1cc0:	ea5f 0030 	movs.w	r0, r0, rrx
 80a1cc4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a1cc8:	f104 0401 	add.w	r4, r4, #1
 80a1ccc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a1cd0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a1cd4:	f080 809a 	bcs.w	80a1e0c <__adddf3+0x240>
 80a1cd8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a1cdc:	bf08      	it	eq
 80a1cde:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a1ce2:	f150 0000 	adcs.w	r0, r0, #0
 80a1ce6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a1cea:	ea41 0105 	orr.w	r1, r1, r5
 80a1cee:	bd30      	pop	{r4, r5, pc}
 80a1cf0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a1cf4:	4140      	adcs	r0, r0
 80a1cf6:	eb41 0101 	adc.w	r1, r1, r1
 80a1cfa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a1cfe:	f1a4 0401 	sub.w	r4, r4, #1
 80a1d02:	d1e9      	bne.n	80a1cd8 <__adddf3+0x10c>
 80a1d04:	f091 0f00 	teq	r1, #0
 80a1d08:	bf04      	itt	eq
 80a1d0a:	4601      	moveq	r1, r0
 80a1d0c:	2000      	moveq	r0, #0
 80a1d0e:	fab1 f381 	clz	r3, r1
 80a1d12:	bf08      	it	eq
 80a1d14:	3320      	addeq	r3, #32
 80a1d16:	f1a3 030b 	sub.w	r3, r3, #11
 80a1d1a:	f1b3 0220 	subs.w	r2, r3, #32
 80a1d1e:	da0c      	bge.n	80a1d3a <__adddf3+0x16e>
 80a1d20:	320c      	adds	r2, #12
 80a1d22:	dd08      	ble.n	80a1d36 <__adddf3+0x16a>
 80a1d24:	f102 0c14 	add.w	ip, r2, #20
 80a1d28:	f1c2 020c 	rsb	r2, r2, #12
 80a1d2c:	fa01 f00c 	lsl.w	r0, r1, ip
 80a1d30:	fa21 f102 	lsr.w	r1, r1, r2
 80a1d34:	e00c      	b.n	80a1d50 <__adddf3+0x184>
 80a1d36:	f102 0214 	add.w	r2, r2, #20
 80a1d3a:	bfd8      	it	le
 80a1d3c:	f1c2 0c20 	rsble	ip, r2, #32
 80a1d40:	fa01 f102 	lsl.w	r1, r1, r2
 80a1d44:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a1d48:	bfdc      	itt	le
 80a1d4a:	ea41 010c 	orrle.w	r1, r1, ip
 80a1d4e:	4090      	lslle	r0, r2
 80a1d50:	1ae4      	subs	r4, r4, r3
 80a1d52:	bfa2      	ittt	ge
 80a1d54:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a1d58:	4329      	orrge	r1, r5
 80a1d5a:	bd30      	popge	{r4, r5, pc}
 80a1d5c:	ea6f 0404 	mvn.w	r4, r4
 80a1d60:	3c1f      	subs	r4, #31
 80a1d62:	da1c      	bge.n	80a1d9e <__adddf3+0x1d2>
 80a1d64:	340c      	adds	r4, #12
 80a1d66:	dc0e      	bgt.n	80a1d86 <__adddf3+0x1ba>
 80a1d68:	f104 0414 	add.w	r4, r4, #20
 80a1d6c:	f1c4 0220 	rsb	r2, r4, #32
 80a1d70:	fa20 f004 	lsr.w	r0, r0, r4
 80a1d74:	fa01 f302 	lsl.w	r3, r1, r2
 80a1d78:	ea40 0003 	orr.w	r0, r0, r3
 80a1d7c:	fa21 f304 	lsr.w	r3, r1, r4
 80a1d80:	ea45 0103 	orr.w	r1, r5, r3
 80a1d84:	bd30      	pop	{r4, r5, pc}
 80a1d86:	f1c4 040c 	rsb	r4, r4, #12
 80a1d8a:	f1c4 0220 	rsb	r2, r4, #32
 80a1d8e:	fa20 f002 	lsr.w	r0, r0, r2
 80a1d92:	fa01 f304 	lsl.w	r3, r1, r4
 80a1d96:	ea40 0003 	orr.w	r0, r0, r3
 80a1d9a:	4629      	mov	r1, r5
 80a1d9c:	bd30      	pop	{r4, r5, pc}
 80a1d9e:	fa21 f004 	lsr.w	r0, r1, r4
 80a1da2:	4629      	mov	r1, r5
 80a1da4:	bd30      	pop	{r4, r5, pc}
 80a1da6:	f094 0f00 	teq	r4, #0
 80a1daa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a1dae:	bf06      	itte	eq
 80a1db0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a1db4:	3401      	addeq	r4, #1
 80a1db6:	3d01      	subne	r5, #1
 80a1db8:	e74e      	b.n	80a1c58 <__adddf3+0x8c>
 80a1dba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a1dbe:	bf18      	it	ne
 80a1dc0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a1dc4:	d029      	beq.n	80a1e1a <__adddf3+0x24e>
 80a1dc6:	ea94 0f05 	teq	r4, r5
 80a1dca:	bf08      	it	eq
 80a1dcc:	ea90 0f02 	teqeq	r0, r2
 80a1dd0:	d005      	beq.n	80a1dde <__adddf3+0x212>
 80a1dd2:	ea54 0c00 	orrs.w	ip, r4, r0
 80a1dd6:	bf04      	itt	eq
 80a1dd8:	4619      	moveq	r1, r3
 80a1dda:	4610      	moveq	r0, r2
 80a1ddc:	bd30      	pop	{r4, r5, pc}
 80a1dde:	ea91 0f03 	teq	r1, r3
 80a1de2:	bf1e      	ittt	ne
 80a1de4:	2100      	movne	r1, #0
 80a1de6:	2000      	movne	r0, #0
 80a1de8:	bd30      	popne	{r4, r5, pc}
 80a1dea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a1dee:	d105      	bne.n	80a1dfc <__adddf3+0x230>
 80a1df0:	0040      	lsls	r0, r0, #1
 80a1df2:	4149      	adcs	r1, r1
 80a1df4:	bf28      	it	cs
 80a1df6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a1dfa:	bd30      	pop	{r4, r5, pc}
 80a1dfc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a1e00:	bf3c      	itt	cc
 80a1e02:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a1e06:	bd30      	popcc	{r4, r5, pc}
 80a1e08:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1e0c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a1e10:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a1e14:	f04f 0000 	mov.w	r0, #0
 80a1e18:	bd30      	pop	{r4, r5, pc}
 80a1e1a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a1e1e:	bf1a      	itte	ne
 80a1e20:	4619      	movne	r1, r3
 80a1e22:	4610      	movne	r0, r2
 80a1e24:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a1e28:	bf1c      	itt	ne
 80a1e2a:	460b      	movne	r3, r1
 80a1e2c:	4602      	movne	r2, r0
 80a1e2e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a1e32:	bf06      	itte	eq
 80a1e34:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a1e38:	ea91 0f03 	teqeq	r1, r3
 80a1e3c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a1e40:	bd30      	pop	{r4, r5, pc}
 80a1e42:	bf00      	nop

080a1e44 <__aeabi_ui2d>:
 80a1e44:	f090 0f00 	teq	r0, #0
 80a1e48:	bf04      	itt	eq
 80a1e4a:	2100      	moveq	r1, #0
 80a1e4c:	4770      	bxeq	lr
 80a1e4e:	b530      	push	{r4, r5, lr}
 80a1e50:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a1e54:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a1e58:	f04f 0500 	mov.w	r5, #0
 80a1e5c:	f04f 0100 	mov.w	r1, #0
 80a1e60:	e750      	b.n	80a1d04 <__adddf3+0x138>
 80a1e62:	bf00      	nop

080a1e64 <__aeabi_i2d>:
 80a1e64:	f090 0f00 	teq	r0, #0
 80a1e68:	bf04      	itt	eq
 80a1e6a:	2100      	moveq	r1, #0
 80a1e6c:	4770      	bxeq	lr
 80a1e6e:	b530      	push	{r4, r5, lr}
 80a1e70:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a1e74:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a1e78:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a1e7c:	bf48      	it	mi
 80a1e7e:	4240      	negmi	r0, r0
 80a1e80:	f04f 0100 	mov.w	r1, #0
 80a1e84:	e73e      	b.n	80a1d04 <__adddf3+0x138>
 80a1e86:	bf00      	nop

080a1e88 <__aeabi_f2d>:
 80a1e88:	0042      	lsls	r2, r0, #1
 80a1e8a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a1e8e:	ea4f 0131 	mov.w	r1, r1, rrx
 80a1e92:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a1e96:	bf1f      	itttt	ne
 80a1e98:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a1e9c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a1ea0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a1ea4:	4770      	bxne	lr
 80a1ea6:	f092 0f00 	teq	r2, #0
 80a1eaa:	bf14      	ite	ne
 80a1eac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a1eb0:	4770      	bxeq	lr
 80a1eb2:	b530      	push	{r4, r5, lr}
 80a1eb4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a1eb8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1ebc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a1ec0:	e720      	b.n	80a1d04 <__adddf3+0x138>
 80a1ec2:	bf00      	nop

080a1ec4 <__aeabi_ul2d>:
 80a1ec4:	ea50 0201 	orrs.w	r2, r0, r1
 80a1ec8:	bf08      	it	eq
 80a1eca:	4770      	bxeq	lr
 80a1ecc:	b530      	push	{r4, r5, lr}
 80a1ece:	f04f 0500 	mov.w	r5, #0
 80a1ed2:	e00a      	b.n	80a1eea <__aeabi_l2d+0x16>

080a1ed4 <__aeabi_l2d>:
 80a1ed4:	ea50 0201 	orrs.w	r2, r0, r1
 80a1ed8:	bf08      	it	eq
 80a1eda:	4770      	bxeq	lr
 80a1edc:	b530      	push	{r4, r5, lr}
 80a1ede:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a1ee2:	d502      	bpl.n	80a1eea <__aeabi_l2d+0x16>
 80a1ee4:	4240      	negs	r0, r0
 80a1ee6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a1eea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a1eee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a1ef2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a1ef6:	f43f aedc 	beq.w	80a1cb2 <__adddf3+0xe6>
 80a1efa:	f04f 0203 	mov.w	r2, #3
 80a1efe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a1f02:	bf18      	it	ne
 80a1f04:	3203      	addne	r2, #3
 80a1f06:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a1f0a:	bf18      	it	ne
 80a1f0c:	3203      	addne	r2, #3
 80a1f0e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a1f12:	f1c2 0320 	rsb	r3, r2, #32
 80a1f16:	fa00 fc03 	lsl.w	ip, r0, r3
 80a1f1a:	fa20 f002 	lsr.w	r0, r0, r2
 80a1f1e:	fa01 fe03 	lsl.w	lr, r1, r3
 80a1f22:	ea40 000e 	orr.w	r0, r0, lr
 80a1f26:	fa21 f102 	lsr.w	r1, r1, r2
 80a1f2a:	4414      	add	r4, r2
 80a1f2c:	e6c1      	b.n	80a1cb2 <__adddf3+0xe6>
 80a1f2e:	bf00      	nop

080a1f30 <__aeabi_dmul>:
 80a1f30:	b570      	push	{r4, r5, r6, lr}
 80a1f32:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a1f36:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a1f3a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a1f3e:	bf1d      	ittte	ne
 80a1f40:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a1f44:	ea94 0f0c 	teqne	r4, ip
 80a1f48:	ea95 0f0c 	teqne	r5, ip
 80a1f4c:	f000 f8de 	bleq	80a210c <__aeabi_dmul+0x1dc>
 80a1f50:	442c      	add	r4, r5
 80a1f52:	ea81 0603 	eor.w	r6, r1, r3
 80a1f56:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a1f5a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a1f5e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a1f62:	bf18      	it	ne
 80a1f64:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a1f68:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a1f6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a1f70:	d038      	beq.n	80a1fe4 <__aeabi_dmul+0xb4>
 80a1f72:	fba0 ce02 	umull	ip, lr, r0, r2
 80a1f76:	f04f 0500 	mov.w	r5, #0
 80a1f7a:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a1f7e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a1f82:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a1f86:	f04f 0600 	mov.w	r6, #0
 80a1f8a:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a1f8e:	f09c 0f00 	teq	ip, #0
 80a1f92:	bf18      	it	ne
 80a1f94:	f04e 0e01 	orrne.w	lr, lr, #1
 80a1f98:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a1f9c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a1fa0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a1fa4:	d204      	bcs.n	80a1fb0 <__aeabi_dmul+0x80>
 80a1fa6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a1faa:	416d      	adcs	r5, r5
 80a1fac:	eb46 0606 	adc.w	r6, r6, r6
 80a1fb0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a1fb4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a1fb8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a1fbc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a1fc0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a1fc4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a1fc8:	bf88      	it	hi
 80a1fca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a1fce:	d81e      	bhi.n	80a200e <__aeabi_dmul+0xde>
 80a1fd0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a1fd4:	bf08      	it	eq
 80a1fd6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a1fda:	f150 0000 	adcs.w	r0, r0, #0
 80a1fde:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a1fe2:	bd70      	pop	{r4, r5, r6, pc}
 80a1fe4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a1fe8:	ea46 0101 	orr.w	r1, r6, r1
 80a1fec:	ea40 0002 	orr.w	r0, r0, r2
 80a1ff0:	ea81 0103 	eor.w	r1, r1, r3
 80a1ff4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a1ff8:	bfc2      	ittt	gt
 80a1ffa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a1ffe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a2002:	bd70      	popgt	{r4, r5, r6, pc}
 80a2004:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2008:	f04f 0e00 	mov.w	lr, #0
 80a200c:	3c01      	subs	r4, #1
 80a200e:	f300 80ab 	bgt.w	80a2168 <__aeabi_dmul+0x238>
 80a2012:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a2016:	bfde      	ittt	le
 80a2018:	2000      	movle	r0, #0
 80a201a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a201e:	bd70      	pople	{r4, r5, r6, pc}
 80a2020:	f1c4 0400 	rsb	r4, r4, #0
 80a2024:	3c20      	subs	r4, #32
 80a2026:	da35      	bge.n	80a2094 <__aeabi_dmul+0x164>
 80a2028:	340c      	adds	r4, #12
 80a202a:	dc1b      	bgt.n	80a2064 <__aeabi_dmul+0x134>
 80a202c:	f104 0414 	add.w	r4, r4, #20
 80a2030:	f1c4 0520 	rsb	r5, r4, #32
 80a2034:	fa00 f305 	lsl.w	r3, r0, r5
 80a2038:	fa20 f004 	lsr.w	r0, r0, r4
 80a203c:	fa01 f205 	lsl.w	r2, r1, r5
 80a2040:	ea40 0002 	orr.w	r0, r0, r2
 80a2044:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a2048:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a204c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a2050:	fa21 f604 	lsr.w	r6, r1, r4
 80a2054:	eb42 0106 	adc.w	r1, r2, r6
 80a2058:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a205c:	bf08      	it	eq
 80a205e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2062:	bd70      	pop	{r4, r5, r6, pc}
 80a2064:	f1c4 040c 	rsb	r4, r4, #12
 80a2068:	f1c4 0520 	rsb	r5, r4, #32
 80a206c:	fa00 f304 	lsl.w	r3, r0, r4
 80a2070:	fa20 f005 	lsr.w	r0, r0, r5
 80a2074:	fa01 f204 	lsl.w	r2, r1, r4
 80a2078:	ea40 0002 	orr.w	r0, r0, r2
 80a207c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2080:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a2084:	f141 0100 	adc.w	r1, r1, #0
 80a2088:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a208c:	bf08      	it	eq
 80a208e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2092:	bd70      	pop	{r4, r5, r6, pc}
 80a2094:	f1c4 0520 	rsb	r5, r4, #32
 80a2098:	fa00 f205 	lsl.w	r2, r0, r5
 80a209c:	ea4e 0e02 	orr.w	lr, lr, r2
 80a20a0:	fa20 f304 	lsr.w	r3, r0, r4
 80a20a4:	fa01 f205 	lsl.w	r2, r1, r5
 80a20a8:	ea43 0302 	orr.w	r3, r3, r2
 80a20ac:	fa21 f004 	lsr.w	r0, r1, r4
 80a20b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a20b4:	fa21 f204 	lsr.w	r2, r1, r4
 80a20b8:	ea20 0002 	bic.w	r0, r0, r2
 80a20bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a20c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a20c4:	bf08      	it	eq
 80a20c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a20ca:	bd70      	pop	{r4, r5, r6, pc}
 80a20cc:	f094 0f00 	teq	r4, #0
 80a20d0:	d10f      	bne.n	80a20f2 <__aeabi_dmul+0x1c2>
 80a20d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a20d6:	0040      	lsls	r0, r0, #1
 80a20d8:	eb41 0101 	adc.w	r1, r1, r1
 80a20dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a20e0:	bf08      	it	eq
 80a20e2:	3c01      	subeq	r4, #1
 80a20e4:	d0f7      	beq.n	80a20d6 <__aeabi_dmul+0x1a6>
 80a20e6:	ea41 0106 	orr.w	r1, r1, r6
 80a20ea:	f095 0f00 	teq	r5, #0
 80a20ee:	bf18      	it	ne
 80a20f0:	4770      	bxne	lr
 80a20f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a20f6:	0052      	lsls	r2, r2, #1
 80a20f8:	eb43 0303 	adc.w	r3, r3, r3
 80a20fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a2100:	bf08      	it	eq
 80a2102:	3d01      	subeq	r5, #1
 80a2104:	d0f7      	beq.n	80a20f6 <__aeabi_dmul+0x1c6>
 80a2106:	ea43 0306 	orr.w	r3, r3, r6
 80a210a:	4770      	bx	lr
 80a210c:	ea94 0f0c 	teq	r4, ip
 80a2110:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a2114:	bf18      	it	ne
 80a2116:	ea95 0f0c 	teqne	r5, ip
 80a211a:	d00c      	beq.n	80a2136 <__aeabi_dmul+0x206>
 80a211c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2120:	bf18      	it	ne
 80a2122:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2126:	d1d1      	bne.n	80a20cc <__aeabi_dmul+0x19c>
 80a2128:	ea81 0103 	eor.w	r1, r1, r3
 80a212c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2130:	f04f 0000 	mov.w	r0, #0
 80a2134:	bd70      	pop	{r4, r5, r6, pc}
 80a2136:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a213a:	bf06      	itte	eq
 80a213c:	4610      	moveq	r0, r2
 80a213e:	4619      	moveq	r1, r3
 80a2140:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2144:	d019      	beq.n	80a217a <__aeabi_dmul+0x24a>
 80a2146:	ea94 0f0c 	teq	r4, ip
 80a214a:	d102      	bne.n	80a2152 <__aeabi_dmul+0x222>
 80a214c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a2150:	d113      	bne.n	80a217a <__aeabi_dmul+0x24a>
 80a2152:	ea95 0f0c 	teq	r5, ip
 80a2156:	d105      	bne.n	80a2164 <__aeabi_dmul+0x234>
 80a2158:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a215c:	bf1c      	itt	ne
 80a215e:	4610      	movne	r0, r2
 80a2160:	4619      	movne	r1, r3
 80a2162:	d10a      	bne.n	80a217a <__aeabi_dmul+0x24a>
 80a2164:	ea81 0103 	eor.w	r1, r1, r3
 80a2168:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a216c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a2170:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a2174:	f04f 0000 	mov.w	r0, #0
 80a2178:	bd70      	pop	{r4, r5, r6, pc}
 80a217a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a217e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a2182:	bd70      	pop	{r4, r5, r6, pc}

080a2184 <__aeabi_ddiv>:
 80a2184:	b570      	push	{r4, r5, r6, lr}
 80a2186:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a218a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a218e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a2192:	bf1d      	ittte	ne
 80a2194:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a2198:	ea94 0f0c 	teqne	r4, ip
 80a219c:	ea95 0f0c 	teqne	r5, ip
 80a21a0:	f000 f8a7 	bleq	80a22f2 <__aeabi_ddiv+0x16e>
 80a21a4:	eba4 0405 	sub.w	r4, r4, r5
 80a21a8:	ea81 0e03 	eor.w	lr, r1, r3
 80a21ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a21b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a21b4:	f000 8088 	beq.w	80a22c8 <__aeabi_ddiv+0x144>
 80a21b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a21bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a21c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a21c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a21c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a21cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a21d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a21d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a21d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a21dc:	429d      	cmp	r5, r3
 80a21de:	bf08      	it	eq
 80a21e0:	4296      	cmpeq	r6, r2
 80a21e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a21e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a21ea:	d202      	bcs.n	80a21f2 <__aeabi_ddiv+0x6e>
 80a21ec:	085b      	lsrs	r3, r3, #1
 80a21ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80a21f2:	1ab6      	subs	r6, r6, r2
 80a21f4:	eb65 0503 	sbc.w	r5, r5, r3
 80a21f8:	085b      	lsrs	r3, r3, #1
 80a21fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80a21fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a2202:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a2206:	ebb6 0e02 	subs.w	lr, r6, r2
 80a220a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a220e:	bf22      	ittt	cs
 80a2210:	1ab6      	subcs	r6, r6, r2
 80a2212:	4675      	movcs	r5, lr
 80a2214:	ea40 000c 	orrcs.w	r0, r0, ip
 80a2218:	085b      	lsrs	r3, r3, #1
 80a221a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a221e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2222:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2226:	bf22      	ittt	cs
 80a2228:	1ab6      	subcs	r6, r6, r2
 80a222a:	4675      	movcs	r5, lr
 80a222c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a2230:	085b      	lsrs	r3, r3, #1
 80a2232:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2236:	ebb6 0e02 	subs.w	lr, r6, r2
 80a223a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a223e:	bf22      	ittt	cs
 80a2240:	1ab6      	subcs	r6, r6, r2
 80a2242:	4675      	movcs	r5, lr
 80a2244:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a2248:	085b      	lsrs	r3, r3, #1
 80a224a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a224e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2252:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2256:	bf22      	ittt	cs
 80a2258:	1ab6      	subcs	r6, r6, r2
 80a225a:	4675      	movcs	r5, lr
 80a225c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a2260:	ea55 0e06 	orrs.w	lr, r5, r6
 80a2264:	d018      	beq.n	80a2298 <__aeabi_ddiv+0x114>
 80a2266:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a226a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a226e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a2272:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a2276:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a227a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a227e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a2282:	d1c0      	bne.n	80a2206 <__aeabi_ddiv+0x82>
 80a2284:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2288:	d10b      	bne.n	80a22a2 <__aeabi_ddiv+0x11e>
 80a228a:	ea41 0100 	orr.w	r1, r1, r0
 80a228e:	f04f 0000 	mov.w	r0, #0
 80a2292:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a2296:	e7b6      	b.n	80a2206 <__aeabi_ddiv+0x82>
 80a2298:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a229c:	bf04      	itt	eq
 80a229e:	4301      	orreq	r1, r0
 80a22a0:	2000      	moveq	r0, #0
 80a22a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a22a6:	bf88      	it	hi
 80a22a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a22ac:	f63f aeaf 	bhi.w	80a200e <__aeabi_dmul+0xde>
 80a22b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80a22b4:	bf04      	itt	eq
 80a22b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a22ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a22be:	f150 0000 	adcs.w	r0, r0, #0
 80a22c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a22c6:	bd70      	pop	{r4, r5, r6, pc}
 80a22c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a22cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a22d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a22d4:	bfc2      	ittt	gt
 80a22d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a22da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a22de:	bd70      	popgt	{r4, r5, r6, pc}
 80a22e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a22e4:	f04f 0e00 	mov.w	lr, #0
 80a22e8:	3c01      	subs	r4, #1
 80a22ea:	e690      	b.n	80a200e <__aeabi_dmul+0xde>
 80a22ec:	ea45 0e06 	orr.w	lr, r5, r6
 80a22f0:	e68d      	b.n	80a200e <__aeabi_dmul+0xde>
 80a22f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a22f6:	ea94 0f0c 	teq	r4, ip
 80a22fa:	bf08      	it	eq
 80a22fc:	ea95 0f0c 	teqeq	r5, ip
 80a2300:	f43f af3b 	beq.w	80a217a <__aeabi_dmul+0x24a>
 80a2304:	ea94 0f0c 	teq	r4, ip
 80a2308:	d10a      	bne.n	80a2320 <__aeabi_ddiv+0x19c>
 80a230a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a230e:	f47f af34 	bne.w	80a217a <__aeabi_dmul+0x24a>
 80a2312:	ea95 0f0c 	teq	r5, ip
 80a2316:	f47f af25 	bne.w	80a2164 <__aeabi_dmul+0x234>
 80a231a:	4610      	mov	r0, r2
 80a231c:	4619      	mov	r1, r3
 80a231e:	e72c      	b.n	80a217a <__aeabi_dmul+0x24a>
 80a2320:	ea95 0f0c 	teq	r5, ip
 80a2324:	d106      	bne.n	80a2334 <__aeabi_ddiv+0x1b0>
 80a2326:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a232a:	f43f aefd 	beq.w	80a2128 <__aeabi_dmul+0x1f8>
 80a232e:	4610      	mov	r0, r2
 80a2330:	4619      	mov	r1, r3
 80a2332:	e722      	b.n	80a217a <__aeabi_dmul+0x24a>
 80a2334:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2338:	bf18      	it	ne
 80a233a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a233e:	f47f aec5 	bne.w	80a20cc <__aeabi_dmul+0x19c>
 80a2342:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a2346:	f47f af0d 	bne.w	80a2164 <__aeabi_dmul+0x234>
 80a234a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a234e:	f47f aeeb 	bne.w	80a2128 <__aeabi_dmul+0x1f8>
 80a2352:	e712      	b.n	80a217a <__aeabi_dmul+0x24a>

080a2354 <__gedf2>:
 80a2354:	f04f 3cff 	mov.w	ip, #4294967295
 80a2358:	e006      	b.n	80a2368 <__cmpdf2+0x4>
 80a235a:	bf00      	nop

080a235c <__ledf2>:
 80a235c:	f04f 0c01 	mov.w	ip, #1
 80a2360:	e002      	b.n	80a2368 <__cmpdf2+0x4>
 80a2362:	bf00      	nop

080a2364 <__cmpdf2>:
 80a2364:	f04f 0c01 	mov.w	ip, #1
 80a2368:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a236c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a2370:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2374:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a2378:	bf18      	it	ne
 80a237a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a237e:	d01b      	beq.n	80a23b8 <__cmpdf2+0x54>
 80a2380:	b001      	add	sp, #4
 80a2382:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a2386:	bf0c      	ite	eq
 80a2388:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a238c:	ea91 0f03 	teqne	r1, r3
 80a2390:	bf02      	ittt	eq
 80a2392:	ea90 0f02 	teqeq	r0, r2
 80a2396:	2000      	moveq	r0, #0
 80a2398:	4770      	bxeq	lr
 80a239a:	f110 0f00 	cmn.w	r0, #0
 80a239e:	ea91 0f03 	teq	r1, r3
 80a23a2:	bf58      	it	pl
 80a23a4:	4299      	cmppl	r1, r3
 80a23a6:	bf08      	it	eq
 80a23a8:	4290      	cmpeq	r0, r2
 80a23aa:	bf2c      	ite	cs
 80a23ac:	17d8      	asrcs	r0, r3, #31
 80a23ae:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a23b2:	f040 0001 	orr.w	r0, r0, #1
 80a23b6:	4770      	bx	lr
 80a23b8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a23bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a23c0:	d102      	bne.n	80a23c8 <__cmpdf2+0x64>
 80a23c2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a23c6:	d107      	bne.n	80a23d8 <__cmpdf2+0x74>
 80a23c8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a23cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a23d0:	d1d6      	bne.n	80a2380 <__cmpdf2+0x1c>
 80a23d2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a23d6:	d0d3      	beq.n	80a2380 <__cmpdf2+0x1c>
 80a23d8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a23dc:	4770      	bx	lr
 80a23de:	bf00      	nop

080a23e0 <__aeabi_cdrcmple>:
 80a23e0:	4684      	mov	ip, r0
 80a23e2:	4610      	mov	r0, r2
 80a23e4:	4662      	mov	r2, ip
 80a23e6:	468c      	mov	ip, r1
 80a23e8:	4619      	mov	r1, r3
 80a23ea:	4663      	mov	r3, ip
 80a23ec:	e000      	b.n	80a23f0 <__aeabi_cdcmpeq>
 80a23ee:	bf00      	nop

080a23f0 <__aeabi_cdcmpeq>:
 80a23f0:	b501      	push	{r0, lr}
 80a23f2:	f7ff ffb7 	bl	80a2364 <__cmpdf2>
 80a23f6:	2800      	cmp	r0, #0
 80a23f8:	bf48      	it	mi
 80a23fa:	f110 0f00 	cmnmi.w	r0, #0
 80a23fe:	bd01      	pop	{r0, pc}

080a2400 <__aeabi_dcmpeq>:
 80a2400:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2404:	f7ff fff4 	bl	80a23f0 <__aeabi_cdcmpeq>
 80a2408:	bf0c      	ite	eq
 80a240a:	2001      	moveq	r0, #1
 80a240c:	2000      	movne	r0, #0
 80a240e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2412:	bf00      	nop

080a2414 <__aeabi_dcmplt>:
 80a2414:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2418:	f7ff ffea 	bl	80a23f0 <__aeabi_cdcmpeq>
 80a241c:	bf34      	ite	cc
 80a241e:	2001      	movcc	r0, #1
 80a2420:	2000      	movcs	r0, #0
 80a2422:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2426:	bf00      	nop

080a2428 <__aeabi_dcmple>:
 80a2428:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a242c:	f7ff ffe0 	bl	80a23f0 <__aeabi_cdcmpeq>
 80a2430:	bf94      	ite	ls
 80a2432:	2001      	movls	r0, #1
 80a2434:	2000      	movhi	r0, #0
 80a2436:	f85d fb08 	ldr.w	pc, [sp], #8
 80a243a:	bf00      	nop

080a243c <__aeabi_dcmpge>:
 80a243c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2440:	f7ff ffce 	bl	80a23e0 <__aeabi_cdrcmple>
 80a2444:	bf94      	ite	ls
 80a2446:	2001      	movls	r0, #1
 80a2448:	2000      	movhi	r0, #0
 80a244a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a244e:	bf00      	nop

080a2450 <__aeabi_dcmpgt>:
 80a2450:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2454:	f7ff ffc4 	bl	80a23e0 <__aeabi_cdrcmple>
 80a2458:	bf34      	ite	cc
 80a245a:	2001      	movcc	r0, #1
 80a245c:	2000      	movcs	r0, #0
 80a245e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2462:	bf00      	nop

080a2464 <__aeabi_d2uiz>:
 80a2464:	004a      	lsls	r2, r1, #1
 80a2466:	d211      	bcs.n	80a248c <__aeabi_d2uiz+0x28>
 80a2468:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a246c:	d211      	bcs.n	80a2492 <__aeabi_d2uiz+0x2e>
 80a246e:	d50d      	bpl.n	80a248c <__aeabi_d2uiz+0x28>
 80a2470:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a2474:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a2478:	d40e      	bmi.n	80a2498 <__aeabi_d2uiz+0x34>
 80a247a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a247e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a2482:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a2486:	fa23 f002 	lsr.w	r0, r3, r2
 80a248a:	4770      	bx	lr
 80a248c:	f04f 0000 	mov.w	r0, #0
 80a2490:	4770      	bx	lr
 80a2492:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a2496:	d102      	bne.n	80a249e <__aeabi_d2uiz+0x3a>
 80a2498:	f04f 30ff 	mov.w	r0, #4294967295
 80a249c:	4770      	bx	lr
 80a249e:	f04f 0000 	mov.w	r0, #0
 80a24a2:	4770      	bx	lr

080a24a4 <__aeabi_frsub>:
 80a24a4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a24a8:	e002      	b.n	80a24b0 <__addsf3>
 80a24aa:	bf00      	nop

080a24ac <__aeabi_fsub>:
 80a24ac:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a24b0 <__addsf3>:
 80a24b0:	0042      	lsls	r2, r0, #1
 80a24b2:	bf1f      	itttt	ne
 80a24b4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a24b8:	ea92 0f03 	teqne	r2, r3
 80a24bc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a24c0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a24c4:	d06a      	beq.n	80a259c <__addsf3+0xec>
 80a24c6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a24ca:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a24ce:	bfc1      	itttt	gt
 80a24d0:	18d2      	addgt	r2, r2, r3
 80a24d2:	4041      	eorgt	r1, r0
 80a24d4:	4048      	eorgt	r0, r1
 80a24d6:	4041      	eorgt	r1, r0
 80a24d8:	bfb8      	it	lt
 80a24da:	425b      	neglt	r3, r3
 80a24dc:	2b19      	cmp	r3, #25
 80a24de:	bf88      	it	hi
 80a24e0:	4770      	bxhi	lr
 80a24e2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a24e6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a24ea:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a24ee:	bf18      	it	ne
 80a24f0:	4240      	negne	r0, r0
 80a24f2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a24f6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a24fa:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a24fe:	bf18      	it	ne
 80a2500:	4249      	negne	r1, r1
 80a2502:	ea92 0f03 	teq	r2, r3
 80a2506:	d03f      	beq.n	80a2588 <__addsf3+0xd8>
 80a2508:	f1a2 0201 	sub.w	r2, r2, #1
 80a250c:	fa41 fc03 	asr.w	ip, r1, r3
 80a2510:	eb10 000c 	adds.w	r0, r0, ip
 80a2514:	f1c3 0320 	rsb	r3, r3, #32
 80a2518:	fa01 f103 	lsl.w	r1, r1, r3
 80a251c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a2520:	d502      	bpl.n	80a2528 <__addsf3+0x78>
 80a2522:	4249      	negs	r1, r1
 80a2524:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a2528:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a252c:	d313      	bcc.n	80a2556 <__addsf3+0xa6>
 80a252e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a2532:	d306      	bcc.n	80a2542 <__addsf3+0x92>
 80a2534:	0840      	lsrs	r0, r0, #1
 80a2536:	ea4f 0131 	mov.w	r1, r1, rrx
 80a253a:	f102 0201 	add.w	r2, r2, #1
 80a253e:	2afe      	cmp	r2, #254	; 0xfe
 80a2540:	d251      	bcs.n	80a25e6 <__addsf3+0x136>
 80a2542:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a2546:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a254a:	bf08      	it	eq
 80a254c:	f020 0001 	biceq.w	r0, r0, #1
 80a2550:	ea40 0003 	orr.w	r0, r0, r3
 80a2554:	4770      	bx	lr
 80a2556:	0049      	lsls	r1, r1, #1
 80a2558:	eb40 0000 	adc.w	r0, r0, r0
 80a255c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a2560:	f1a2 0201 	sub.w	r2, r2, #1
 80a2564:	d1ed      	bne.n	80a2542 <__addsf3+0x92>
 80a2566:	fab0 fc80 	clz	ip, r0
 80a256a:	f1ac 0c08 	sub.w	ip, ip, #8
 80a256e:	ebb2 020c 	subs.w	r2, r2, ip
 80a2572:	fa00 f00c 	lsl.w	r0, r0, ip
 80a2576:	bfaa      	itet	ge
 80a2578:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a257c:	4252      	neglt	r2, r2
 80a257e:	4318      	orrge	r0, r3
 80a2580:	bfbc      	itt	lt
 80a2582:	40d0      	lsrlt	r0, r2
 80a2584:	4318      	orrlt	r0, r3
 80a2586:	4770      	bx	lr
 80a2588:	f092 0f00 	teq	r2, #0
 80a258c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a2590:	bf06      	itte	eq
 80a2592:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a2596:	3201      	addeq	r2, #1
 80a2598:	3b01      	subne	r3, #1
 80a259a:	e7b5      	b.n	80a2508 <__addsf3+0x58>
 80a259c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a25a0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a25a4:	bf18      	it	ne
 80a25a6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a25aa:	d021      	beq.n	80a25f0 <__addsf3+0x140>
 80a25ac:	ea92 0f03 	teq	r2, r3
 80a25b0:	d004      	beq.n	80a25bc <__addsf3+0x10c>
 80a25b2:	f092 0f00 	teq	r2, #0
 80a25b6:	bf08      	it	eq
 80a25b8:	4608      	moveq	r0, r1
 80a25ba:	4770      	bx	lr
 80a25bc:	ea90 0f01 	teq	r0, r1
 80a25c0:	bf1c      	itt	ne
 80a25c2:	2000      	movne	r0, #0
 80a25c4:	4770      	bxne	lr
 80a25c6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a25ca:	d104      	bne.n	80a25d6 <__addsf3+0x126>
 80a25cc:	0040      	lsls	r0, r0, #1
 80a25ce:	bf28      	it	cs
 80a25d0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a25d4:	4770      	bx	lr
 80a25d6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a25da:	bf3c      	itt	cc
 80a25dc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a25e0:	4770      	bxcc	lr
 80a25e2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a25e6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a25ea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a25ee:	4770      	bx	lr
 80a25f0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a25f4:	bf16      	itet	ne
 80a25f6:	4608      	movne	r0, r1
 80a25f8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a25fc:	4601      	movne	r1, r0
 80a25fe:	0242      	lsls	r2, r0, #9
 80a2600:	bf06      	itte	eq
 80a2602:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a2606:	ea90 0f01 	teqeq	r0, r1
 80a260a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a260e:	4770      	bx	lr

080a2610 <__aeabi_ui2f>:
 80a2610:	f04f 0300 	mov.w	r3, #0
 80a2614:	e004      	b.n	80a2620 <__aeabi_i2f+0x8>
 80a2616:	bf00      	nop

080a2618 <__aeabi_i2f>:
 80a2618:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a261c:	bf48      	it	mi
 80a261e:	4240      	negmi	r0, r0
 80a2620:	ea5f 0c00 	movs.w	ip, r0
 80a2624:	bf08      	it	eq
 80a2626:	4770      	bxeq	lr
 80a2628:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a262c:	4601      	mov	r1, r0
 80a262e:	f04f 0000 	mov.w	r0, #0
 80a2632:	e01c      	b.n	80a266e <__aeabi_l2f+0x2a>

080a2634 <__aeabi_ul2f>:
 80a2634:	ea50 0201 	orrs.w	r2, r0, r1
 80a2638:	bf08      	it	eq
 80a263a:	4770      	bxeq	lr
 80a263c:	f04f 0300 	mov.w	r3, #0
 80a2640:	e00a      	b.n	80a2658 <__aeabi_l2f+0x14>
 80a2642:	bf00      	nop

080a2644 <__aeabi_l2f>:
 80a2644:	ea50 0201 	orrs.w	r2, r0, r1
 80a2648:	bf08      	it	eq
 80a264a:	4770      	bxeq	lr
 80a264c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a2650:	d502      	bpl.n	80a2658 <__aeabi_l2f+0x14>
 80a2652:	4240      	negs	r0, r0
 80a2654:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2658:	ea5f 0c01 	movs.w	ip, r1
 80a265c:	bf02      	ittt	eq
 80a265e:	4684      	moveq	ip, r0
 80a2660:	4601      	moveq	r1, r0
 80a2662:	2000      	moveq	r0, #0
 80a2664:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a2668:	bf08      	it	eq
 80a266a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a266e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a2672:	fabc f28c 	clz	r2, ip
 80a2676:	3a08      	subs	r2, #8
 80a2678:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a267c:	db10      	blt.n	80a26a0 <__aeabi_l2f+0x5c>
 80a267e:	fa01 fc02 	lsl.w	ip, r1, r2
 80a2682:	4463      	add	r3, ip
 80a2684:	fa00 fc02 	lsl.w	ip, r0, r2
 80a2688:	f1c2 0220 	rsb	r2, r2, #32
 80a268c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a2690:	fa20 f202 	lsr.w	r2, r0, r2
 80a2694:	eb43 0002 	adc.w	r0, r3, r2
 80a2698:	bf08      	it	eq
 80a269a:	f020 0001 	biceq.w	r0, r0, #1
 80a269e:	4770      	bx	lr
 80a26a0:	f102 0220 	add.w	r2, r2, #32
 80a26a4:	fa01 fc02 	lsl.w	ip, r1, r2
 80a26a8:	f1c2 0220 	rsb	r2, r2, #32
 80a26ac:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a26b0:	fa21 f202 	lsr.w	r2, r1, r2
 80a26b4:	eb43 0002 	adc.w	r0, r3, r2
 80a26b8:	bf08      	it	eq
 80a26ba:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a26be:	4770      	bx	lr

080a26c0 <__aeabi_fmul>:
 80a26c0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a26c4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a26c8:	bf1e      	ittt	ne
 80a26ca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a26ce:	ea92 0f0c 	teqne	r2, ip
 80a26d2:	ea93 0f0c 	teqne	r3, ip
 80a26d6:	d06f      	beq.n	80a27b8 <__aeabi_fmul+0xf8>
 80a26d8:	441a      	add	r2, r3
 80a26da:	ea80 0c01 	eor.w	ip, r0, r1
 80a26de:	0240      	lsls	r0, r0, #9
 80a26e0:	bf18      	it	ne
 80a26e2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a26e6:	d01e      	beq.n	80a2726 <__aeabi_fmul+0x66>
 80a26e8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a26ec:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a26f0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a26f4:	fba0 3101 	umull	r3, r1, r0, r1
 80a26f8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a26fc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a2700:	bf3e      	ittt	cc
 80a2702:	0049      	lslcc	r1, r1, #1
 80a2704:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a2708:	005b      	lslcc	r3, r3, #1
 80a270a:	ea40 0001 	orr.w	r0, r0, r1
 80a270e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a2712:	2afd      	cmp	r2, #253	; 0xfd
 80a2714:	d81d      	bhi.n	80a2752 <__aeabi_fmul+0x92>
 80a2716:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a271a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a271e:	bf08      	it	eq
 80a2720:	f020 0001 	biceq.w	r0, r0, #1
 80a2724:	4770      	bx	lr
 80a2726:	f090 0f00 	teq	r0, #0
 80a272a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a272e:	bf08      	it	eq
 80a2730:	0249      	lsleq	r1, r1, #9
 80a2732:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a2736:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a273a:	3a7f      	subs	r2, #127	; 0x7f
 80a273c:	bfc2      	ittt	gt
 80a273e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a2742:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a2746:	4770      	bxgt	lr
 80a2748:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a274c:	f04f 0300 	mov.w	r3, #0
 80a2750:	3a01      	subs	r2, #1
 80a2752:	dc5d      	bgt.n	80a2810 <__aeabi_fmul+0x150>
 80a2754:	f112 0f19 	cmn.w	r2, #25
 80a2758:	bfdc      	itt	le
 80a275a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a275e:	4770      	bxle	lr
 80a2760:	f1c2 0200 	rsb	r2, r2, #0
 80a2764:	0041      	lsls	r1, r0, #1
 80a2766:	fa21 f102 	lsr.w	r1, r1, r2
 80a276a:	f1c2 0220 	rsb	r2, r2, #32
 80a276e:	fa00 fc02 	lsl.w	ip, r0, r2
 80a2772:	ea5f 0031 	movs.w	r0, r1, rrx
 80a2776:	f140 0000 	adc.w	r0, r0, #0
 80a277a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a277e:	bf08      	it	eq
 80a2780:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a2784:	4770      	bx	lr
 80a2786:	f092 0f00 	teq	r2, #0
 80a278a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a278e:	bf02      	ittt	eq
 80a2790:	0040      	lsleq	r0, r0, #1
 80a2792:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a2796:	3a01      	subeq	r2, #1
 80a2798:	d0f9      	beq.n	80a278e <__aeabi_fmul+0xce>
 80a279a:	ea40 000c 	orr.w	r0, r0, ip
 80a279e:	f093 0f00 	teq	r3, #0
 80a27a2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a27a6:	bf02      	ittt	eq
 80a27a8:	0049      	lsleq	r1, r1, #1
 80a27aa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a27ae:	3b01      	subeq	r3, #1
 80a27b0:	d0f9      	beq.n	80a27a6 <__aeabi_fmul+0xe6>
 80a27b2:	ea41 010c 	orr.w	r1, r1, ip
 80a27b6:	e78f      	b.n	80a26d8 <__aeabi_fmul+0x18>
 80a27b8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a27bc:	ea92 0f0c 	teq	r2, ip
 80a27c0:	bf18      	it	ne
 80a27c2:	ea93 0f0c 	teqne	r3, ip
 80a27c6:	d00a      	beq.n	80a27de <__aeabi_fmul+0x11e>
 80a27c8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a27cc:	bf18      	it	ne
 80a27ce:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a27d2:	d1d8      	bne.n	80a2786 <__aeabi_fmul+0xc6>
 80a27d4:	ea80 0001 	eor.w	r0, r0, r1
 80a27d8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a27dc:	4770      	bx	lr
 80a27de:	f090 0f00 	teq	r0, #0
 80a27e2:	bf17      	itett	ne
 80a27e4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a27e8:	4608      	moveq	r0, r1
 80a27ea:	f091 0f00 	teqne	r1, #0
 80a27ee:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a27f2:	d014      	beq.n	80a281e <__aeabi_fmul+0x15e>
 80a27f4:	ea92 0f0c 	teq	r2, ip
 80a27f8:	d101      	bne.n	80a27fe <__aeabi_fmul+0x13e>
 80a27fa:	0242      	lsls	r2, r0, #9
 80a27fc:	d10f      	bne.n	80a281e <__aeabi_fmul+0x15e>
 80a27fe:	ea93 0f0c 	teq	r3, ip
 80a2802:	d103      	bne.n	80a280c <__aeabi_fmul+0x14c>
 80a2804:	024b      	lsls	r3, r1, #9
 80a2806:	bf18      	it	ne
 80a2808:	4608      	movne	r0, r1
 80a280a:	d108      	bne.n	80a281e <__aeabi_fmul+0x15e>
 80a280c:	ea80 0001 	eor.w	r0, r0, r1
 80a2810:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a2814:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a2818:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a281c:	4770      	bx	lr
 80a281e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a2822:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a2826:	4770      	bx	lr

080a2828 <__aeabi_fdiv>:
 80a2828:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a282c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a2830:	bf1e      	ittt	ne
 80a2832:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a2836:	ea92 0f0c 	teqne	r2, ip
 80a283a:	ea93 0f0c 	teqne	r3, ip
 80a283e:	d069      	beq.n	80a2914 <__aeabi_fdiv+0xec>
 80a2840:	eba2 0203 	sub.w	r2, r2, r3
 80a2844:	ea80 0c01 	eor.w	ip, r0, r1
 80a2848:	0249      	lsls	r1, r1, #9
 80a284a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a284e:	d037      	beq.n	80a28c0 <__aeabi_fdiv+0x98>
 80a2850:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a2854:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a2858:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a285c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a2860:	428b      	cmp	r3, r1
 80a2862:	bf38      	it	cc
 80a2864:	005b      	lslcc	r3, r3, #1
 80a2866:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a286a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a286e:	428b      	cmp	r3, r1
 80a2870:	bf24      	itt	cs
 80a2872:	1a5b      	subcs	r3, r3, r1
 80a2874:	ea40 000c 	orrcs.w	r0, r0, ip
 80a2878:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a287c:	bf24      	itt	cs
 80a287e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a2882:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a2886:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a288a:	bf24      	itt	cs
 80a288c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a2890:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a2894:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a2898:	bf24      	itt	cs
 80a289a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a289e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a28a2:	011b      	lsls	r3, r3, #4
 80a28a4:	bf18      	it	ne
 80a28a6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a28aa:	d1e0      	bne.n	80a286e <__aeabi_fdiv+0x46>
 80a28ac:	2afd      	cmp	r2, #253	; 0xfd
 80a28ae:	f63f af50 	bhi.w	80a2752 <__aeabi_fmul+0x92>
 80a28b2:	428b      	cmp	r3, r1
 80a28b4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a28b8:	bf08      	it	eq
 80a28ba:	f020 0001 	biceq.w	r0, r0, #1
 80a28be:	4770      	bx	lr
 80a28c0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a28c4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a28c8:	327f      	adds	r2, #127	; 0x7f
 80a28ca:	bfc2      	ittt	gt
 80a28cc:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a28d0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a28d4:	4770      	bxgt	lr
 80a28d6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a28da:	f04f 0300 	mov.w	r3, #0
 80a28de:	3a01      	subs	r2, #1
 80a28e0:	e737      	b.n	80a2752 <__aeabi_fmul+0x92>
 80a28e2:	f092 0f00 	teq	r2, #0
 80a28e6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a28ea:	bf02      	ittt	eq
 80a28ec:	0040      	lsleq	r0, r0, #1
 80a28ee:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a28f2:	3a01      	subeq	r2, #1
 80a28f4:	d0f9      	beq.n	80a28ea <__aeabi_fdiv+0xc2>
 80a28f6:	ea40 000c 	orr.w	r0, r0, ip
 80a28fa:	f093 0f00 	teq	r3, #0
 80a28fe:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a2902:	bf02      	ittt	eq
 80a2904:	0049      	lsleq	r1, r1, #1
 80a2906:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a290a:	3b01      	subeq	r3, #1
 80a290c:	d0f9      	beq.n	80a2902 <__aeabi_fdiv+0xda>
 80a290e:	ea41 010c 	orr.w	r1, r1, ip
 80a2912:	e795      	b.n	80a2840 <__aeabi_fdiv+0x18>
 80a2914:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a2918:	ea92 0f0c 	teq	r2, ip
 80a291c:	d108      	bne.n	80a2930 <__aeabi_fdiv+0x108>
 80a291e:	0242      	lsls	r2, r0, #9
 80a2920:	f47f af7d 	bne.w	80a281e <__aeabi_fmul+0x15e>
 80a2924:	ea93 0f0c 	teq	r3, ip
 80a2928:	f47f af70 	bne.w	80a280c <__aeabi_fmul+0x14c>
 80a292c:	4608      	mov	r0, r1
 80a292e:	e776      	b.n	80a281e <__aeabi_fmul+0x15e>
 80a2930:	ea93 0f0c 	teq	r3, ip
 80a2934:	d104      	bne.n	80a2940 <__aeabi_fdiv+0x118>
 80a2936:	024b      	lsls	r3, r1, #9
 80a2938:	f43f af4c 	beq.w	80a27d4 <__aeabi_fmul+0x114>
 80a293c:	4608      	mov	r0, r1
 80a293e:	e76e      	b.n	80a281e <__aeabi_fmul+0x15e>
 80a2940:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a2944:	bf18      	it	ne
 80a2946:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a294a:	d1ca      	bne.n	80a28e2 <__aeabi_fdiv+0xba>
 80a294c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a2950:	f47f af5c 	bne.w	80a280c <__aeabi_fmul+0x14c>
 80a2954:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a2958:	f47f af3c 	bne.w	80a27d4 <__aeabi_fmul+0x114>
 80a295c:	e75f      	b.n	80a281e <__aeabi_fmul+0x15e>
 80a295e:	bf00      	nop

080a2960 <__aeabi_uldivmod>:
 80a2960:	b953      	cbnz	r3, 80a2978 <__aeabi_uldivmod+0x18>
 80a2962:	b94a      	cbnz	r2, 80a2978 <__aeabi_uldivmod+0x18>
 80a2964:	2900      	cmp	r1, #0
 80a2966:	bf08      	it	eq
 80a2968:	2800      	cmpeq	r0, #0
 80a296a:	bf1c      	itt	ne
 80a296c:	f04f 31ff 	movne.w	r1, #4294967295
 80a2970:	f04f 30ff 	movne.w	r0, #4294967295
 80a2974:	f000 b9a6 	b.w	80a2cc4 <__aeabi_idiv0>
 80a2978:	f1ad 0c08 	sub.w	ip, sp, #8
 80a297c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80a2980:	f000 f82a 	bl	80a29d8 <__udivmoddi4>
 80a2984:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a2988:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a298c:	b004      	add	sp, #16
 80a298e:	4770      	bx	lr

080a2990 <__aeabi_d2ulz>:
 80a2990:	b5d0      	push	{r4, r6, r7, lr}
 80a2992:	2200      	movs	r2, #0
 80a2994:	4b0e      	ldr	r3, [pc, #56]	; (80a29d0 <__aeabi_d2ulz+0x40>)
 80a2996:	4606      	mov	r6, r0
 80a2998:	460f      	mov	r7, r1
 80a299a:	f7ff fac9 	bl	80a1f30 <__aeabi_dmul>
 80a299e:	f7ff fd61 	bl	80a2464 <__aeabi_d2uiz>
 80a29a2:	4604      	mov	r4, r0
 80a29a4:	f7ff fa4e 	bl	80a1e44 <__aeabi_ui2d>
 80a29a8:	2200      	movs	r2, #0
 80a29aa:	4b0a      	ldr	r3, [pc, #40]	; (80a29d4 <__aeabi_d2ulz+0x44>)
 80a29ac:	f7ff fac0 	bl	80a1f30 <__aeabi_dmul>
 80a29b0:	4602      	mov	r2, r0
 80a29b2:	460b      	mov	r3, r1
 80a29b4:	4630      	mov	r0, r6
 80a29b6:	4639      	mov	r1, r7
 80a29b8:	f7ff f906 	bl	80a1bc8 <__aeabi_dsub>
 80a29bc:	f7ff fd52 	bl	80a2464 <__aeabi_d2uiz>
 80a29c0:	4623      	mov	r3, r4
 80a29c2:	2200      	movs	r2, #0
 80a29c4:	ea42 0200 	orr.w	r2, r2, r0
 80a29c8:	4610      	mov	r0, r2
 80a29ca:	4619      	mov	r1, r3
 80a29cc:	bdd0      	pop	{r4, r6, r7, pc}
 80a29ce:	bf00      	nop
 80a29d0:	3df00000 	.word	0x3df00000
 80a29d4:	41f00000 	.word	0x41f00000

080a29d8 <__udivmoddi4>:
 80a29d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a29dc:	468c      	mov	ip, r1
 80a29de:	460c      	mov	r4, r1
 80a29e0:	4605      	mov	r5, r0
 80a29e2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80a29e4:	2b00      	cmp	r3, #0
 80a29e6:	d14f      	bne.n	80a2a88 <__udivmoddi4+0xb0>
 80a29e8:	428a      	cmp	r2, r1
 80a29ea:	4617      	mov	r7, r2
 80a29ec:	d96b      	bls.n	80a2ac6 <__udivmoddi4+0xee>
 80a29ee:	fab2 fe82 	clz	lr, r2
 80a29f2:	f1be 0f00 	cmp.w	lr, #0
 80a29f6:	d00b      	beq.n	80a2a10 <__udivmoddi4+0x38>
 80a29f8:	f1ce 0520 	rsb	r5, lr, #32
 80a29fc:	fa20 f505 	lsr.w	r5, r0, r5
 80a2a00:	fa01 f30e 	lsl.w	r3, r1, lr
 80a2a04:	ea45 0c03 	orr.w	ip, r5, r3
 80a2a08:	fa02 f70e 	lsl.w	r7, r2, lr
 80a2a0c:	fa00 f50e 	lsl.w	r5, r0, lr
 80a2a10:	0c39      	lsrs	r1, r7, #16
 80a2a12:	fbbc f0f1 	udiv	r0, ip, r1
 80a2a16:	b2ba      	uxth	r2, r7
 80a2a18:	fb01 c310 	mls	r3, r1, r0, ip
 80a2a1c:	fb00 f802 	mul.w	r8, r0, r2
 80a2a20:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80a2a24:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
 80a2a28:	45a0      	cmp	r8, r4
 80a2a2a:	d909      	bls.n	80a2a40 <__udivmoddi4+0x68>
 80a2a2c:	19e4      	adds	r4, r4, r7
 80a2a2e:	f100 33ff 	add.w	r3, r0, #4294967295
 80a2a32:	f080 8128 	bcs.w	80a2c86 <__udivmoddi4+0x2ae>
 80a2a36:	45a0      	cmp	r8, r4
 80a2a38:	f240 8125 	bls.w	80a2c86 <__udivmoddi4+0x2ae>
 80a2a3c:	3802      	subs	r0, #2
 80a2a3e:	443c      	add	r4, r7
 80a2a40:	ebc8 0404 	rsb	r4, r8, r4
 80a2a44:	fbb4 f3f1 	udiv	r3, r4, r1
 80a2a48:	fb01 4c13 	mls	ip, r1, r3, r4
 80a2a4c:	fb03 f202 	mul.w	r2, r3, r2
 80a2a50:	b2ac      	uxth	r4, r5
 80a2a52:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
 80a2a56:	428a      	cmp	r2, r1
 80a2a58:	d909      	bls.n	80a2a6e <__udivmoddi4+0x96>
 80a2a5a:	19c9      	adds	r1, r1, r7
 80a2a5c:	f103 34ff 	add.w	r4, r3, #4294967295
 80a2a60:	f080 810f 	bcs.w	80a2c82 <__udivmoddi4+0x2aa>
 80a2a64:	428a      	cmp	r2, r1
 80a2a66:	f240 810c 	bls.w	80a2c82 <__udivmoddi4+0x2aa>
 80a2a6a:	3b02      	subs	r3, #2
 80a2a6c:	4439      	add	r1, r7
 80a2a6e:	1a8a      	subs	r2, r1, r2
 80a2a70:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80a2a74:	2100      	movs	r1, #0
 80a2a76:	2e00      	cmp	r6, #0
 80a2a78:	d063      	beq.n	80a2b42 <__udivmoddi4+0x16a>
 80a2a7a:	fa22 f20e 	lsr.w	r2, r2, lr
 80a2a7e:	2300      	movs	r3, #0
 80a2a80:	e886 000c 	stmia.w	r6, {r2, r3}
 80a2a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2a88:	428b      	cmp	r3, r1
 80a2a8a:	d907      	bls.n	80a2a9c <__udivmoddi4+0xc4>
 80a2a8c:	2e00      	cmp	r6, #0
 80a2a8e:	d056      	beq.n	80a2b3e <__udivmoddi4+0x166>
 80a2a90:	2100      	movs	r1, #0
 80a2a92:	e886 0011 	stmia.w	r6, {r0, r4}
 80a2a96:	4608      	mov	r0, r1
 80a2a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2a9c:	fab3 f183 	clz	r1, r3
 80a2aa0:	2900      	cmp	r1, #0
 80a2aa2:	f040 8093 	bne.w	80a2bcc <__udivmoddi4+0x1f4>
 80a2aa6:	42a3      	cmp	r3, r4
 80a2aa8:	d302      	bcc.n	80a2ab0 <__udivmoddi4+0xd8>
 80a2aaa:	4282      	cmp	r2, r0
 80a2aac:	f200 80fe 	bhi.w	80a2cac <__udivmoddi4+0x2d4>
 80a2ab0:	1a85      	subs	r5, r0, r2
 80a2ab2:	eb64 0303 	sbc.w	r3, r4, r3
 80a2ab6:	469c      	mov	ip, r3
 80a2ab8:	2001      	movs	r0, #1
 80a2aba:	2e00      	cmp	r6, #0
 80a2abc:	d041      	beq.n	80a2b42 <__udivmoddi4+0x16a>
 80a2abe:	e886 1020 	stmia.w	r6, {r5, ip}
 80a2ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2ac6:	b912      	cbnz	r2, 80a2ace <__udivmoddi4+0xf6>
 80a2ac8:	2701      	movs	r7, #1
 80a2aca:	fbb7 f7f2 	udiv	r7, r7, r2
 80a2ace:	fab7 fe87 	clz	lr, r7
 80a2ad2:	f1be 0f00 	cmp.w	lr, #0
 80a2ad6:	d136      	bne.n	80a2b46 <__udivmoddi4+0x16e>
 80a2ad8:	1be4      	subs	r4, r4, r7
 80a2ada:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a2ade:	fa1f f987 	uxth.w	r9, r7
 80a2ae2:	2101      	movs	r1, #1
 80a2ae4:	fbb4 f3f8 	udiv	r3, r4, r8
 80a2ae8:	fb08 4413 	mls	r4, r8, r3, r4
 80a2aec:	fb09 f203 	mul.w	r2, r9, r3
 80a2af0:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80a2af4:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
 80a2af8:	42a2      	cmp	r2, r4
 80a2afa:	d907      	bls.n	80a2b0c <__udivmoddi4+0x134>
 80a2afc:	19e4      	adds	r4, r4, r7
 80a2afe:	f103 30ff 	add.w	r0, r3, #4294967295
 80a2b02:	d202      	bcs.n	80a2b0a <__udivmoddi4+0x132>
 80a2b04:	42a2      	cmp	r2, r4
 80a2b06:	f200 80d3 	bhi.w	80a2cb0 <__udivmoddi4+0x2d8>
 80a2b0a:	4603      	mov	r3, r0
 80a2b0c:	1aa4      	subs	r4, r4, r2
 80a2b0e:	fbb4 f0f8 	udiv	r0, r4, r8
 80a2b12:	fb08 4810 	mls	r8, r8, r0, r4
 80a2b16:	fb09 f900 	mul.w	r9, r9, r0
 80a2b1a:	b2ac      	uxth	r4, r5
 80a2b1c:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
 80a2b20:	4591      	cmp	r9, r2
 80a2b22:	d907      	bls.n	80a2b34 <__udivmoddi4+0x15c>
 80a2b24:	19d2      	adds	r2, r2, r7
 80a2b26:	f100 34ff 	add.w	r4, r0, #4294967295
 80a2b2a:	d202      	bcs.n	80a2b32 <__udivmoddi4+0x15a>
 80a2b2c:	4591      	cmp	r9, r2
 80a2b2e:	f200 80ba 	bhi.w	80a2ca6 <__udivmoddi4+0x2ce>
 80a2b32:	4620      	mov	r0, r4
 80a2b34:	ebc9 0202 	rsb	r2, r9, r2
 80a2b38:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80a2b3c:	e79b      	b.n	80a2a76 <__udivmoddi4+0x9e>
 80a2b3e:	4631      	mov	r1, r6
 80a2b40:	4630      	mov	r0, r6
 80a2b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2b46:	fa07 f70e 	lsl.w	r7, r7, lr
 80a2b4a:	f1ce 0c20 	rsb	ip, lr, #32
 80a2b4e:	fa24 f30c 	lsr.w	r3, r4, ip
 80a2b52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a2b56:	fbb3 faf8 	udiv	sl, r3, r8
 80a2b5a:	fa1f f987 	uxth.w	r9, r7
 80a2b5e:	fb08 351a 	mls	r5, r8, sl, r3
 80a2b62:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a2b66:	fa04 f40e 	lsl.w	r4, r4, lr
 80a2b6a:	fb0a fb09 	mul.w	fp, sl, r9
 80a2b6e:	ea4c 0c04 	orr.w	ip, ip, r4
 80a2b72:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80a2b76:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
 80a2b7a:	459b      	cmp	fp, r3
 80a2b7c:	fa00 f50e 	lsl.w	r5, r0, lr
 80a2b80:	d90a      	bls.n	80a2b98 <__udivmoddi4+0x1c0>
 80a2b82:	19db      	adds	r3, r3, r7
 80a2b84:	f10a 32ff 	add.w	r2, sl, #4294967295
 80a2b88:	f080 808b 	bcs.w	80a2ca2 <__udivmoddi4+0x2ca>
 80a2b8c:	459b      	cmp	fp, r3
 80a2b8e:	f240 8088 	bls.w	80a2ca2 <__udivmoddi4+0x2ca>
 80a2b92:	f1aa 0a02 	sub.w	sl, sl, #2
 80a2b96:	443b      	add	r3, r7
 80a2b98:	ebcb 0303 	rsb	r3, fp, r3
 80a2b9c:	fbb3 f0f8 	udiv	r0, r3, r8
 80a2ba0:	fb08 3310 	mls	r3, r8, r0, r3
 80a2ba4:	fb00 f409 	mul.w	r4, r0, r9
 80a2ba8:	fa1f fc8c 	uxth.w	ip, ip
 80a2bac:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
 80a2bb0:	429c      	cmp	r4, r3
 80a2bb2:	d907      	bls.n	80a2bc4 <__udivmoddi4+0x1ec>
 80a2bb4:	19db      	adds	r3, r3, r7
 80a2bb6:	f100 32ff 	add.w	r2, r0, #4294967295
 80a2bba:	d26e      	bcs.n	80a2c9a <__udivmoddi4+0x2c2>
 80a2bbc:	429c      	cmp	r4, r3
 80a2bbe:	d96c      	bls.n	80a2c9a <__udivmoddi4+0x2c2>
 80a2bc0:	3802      	subs	r0, #2
 80a2bc2:	443b      	add	r3, r7
 80a2bc4:	1b1c      	subs	r4, r3, r4
 80a2bc6:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
 80a2bca:	e78b      	b.n	80a2ae4 <__udivmoddi4+0x10c>
 80a2bcc:	f1c1 0e20 	rsb	lr, r1, #32
 80a2bd0:	408b      	lsls	r3, r1
 80a2bd2:	fa22 fc0e 	lsr.w	ip, r2, lr
 80a2bd6:	ea4c 0c03 	orr.w	ip, ip, r3
 80a2bda:	fa24 f70e 	lsr.w	r7, r4, lr
 80a2bde:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80a2be2:	fbb7 faf9 	udiv	sl, r7, r9
 80a2be6:	fa1f f38c 	uxth.w	r3, ip
 80a2bea:	fb09 771a 	mls	r7, r9, sl, r7
 80a2bee:	fa20 f80e 	lsr.w	r8, r0, lr
 80a2bf2:	408c      	lsls	r4, r1
 80a2bf4:	fb0a f503 	mul.w	r5, sl, r3
 80a2bf8:	ea48 0404 	orr.w	r4, r8, r4
 80a2bfc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80a2c00:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 80a2c04:	42bd      	cmp	r5, r7
 80a2c06:	fa02 f201 	lsl.w	r2, r2, r1
 80a2c0a:	fa00 fb01 	lsl.w	fp, r0, r1
 80a2c0e:	d909      	bls.n	80a2c24 <__udivmoddi4+0x24c>
 80a2c10:	eb17 070c 	adds.w	r7, r7, ip
 80a2c14:	f10a 30ff 	add.w	r0, sl, #4294967295
 80a2c18:	d241      	bcs.n	80a2c9e <__udivmoddi4+0x2c6>
 80a2c1a:	42bd      	cmp	r5, r7
 80a2c1c:	d93f      	bls.n	80a2c9e <__udivmoddi4+0x2c6>
 80a2c1e:	f1aa 0a02 	sub.w	sl, sl, #2
 80a2c22:	4467      	add	r7, ip
 80a2c24:	1b7f      	subs	r7, r7, r5
 80a2c26:	fbb7 f5f9 	udiv	r5, r7, r9
 80a2c2a:	fb09 7715 	mls	r7, r9, r5, r7
 80a2c2e:	fb05 f303 	mul.w	r3, r5, r3
 80a2c32:	b2a4      	uxth	r4, r4
 80a2c34:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 80a2c38:	42bb      	cmp	r3, r7
 80a2c3a:	d908      	bls.n	80a2c4e <__udivmoddi4+0x276>
 80a2c3c:	eb17 070c 	adds.w	r7, r7, ip
 80a2c40:	f105 30ff 	add.w	r0, r5, #4294967295
 80a2c44:	d227      	bcs.n	80a2c96 <__udivmoddi4+0x2be>
 80a2c46:	42bb      	cmp	r3, r7
 80a2c48:	d925      	bls.n	80a2c96 <__udivmoddi4+0x2be>
 80a2c4a:	3d02      	subs	r5, #2
 80a2c4c:	4467      	add	r7, ip
 80a2c4e:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
 80a2c52:	fba0 8902 	umull	r8, r9, r0, r2
 80a2c56:	1aff      	subs	r7, r7, r3
 80a2c58:	454f      	cmp	r7, r9
 80a2c5a:	4645      	mov	r5, r8
 80a2c5c:	464c      	mov	r4, r9
 80a2c5e:	d314      	bcc.n	80a2c8a <__udivmoddi4+0x2b2>
 80a2c60:	d029      	beq.n	80a2cb6 <__udivmoddi4+0x2de>
 80a2c62:	b366      	cbz	r6, 80a2cbe <__udivmoddi4+0x2e6>
 80a2c64:	ebbb 0305 	subs.w	r3, fp, r5
 80a2c68:	eb67 0704 	sbc.w	r7, r7, r4
 80a2c6c:	fa07 fe0e 	lsl.w	lr, r7, lr
 80a2c70:	40cb      	lsrs	r3, r1
 80a2c72:	40cf      	lsrs	r7, r1
 80a2c74:	ea4e 0303 	orr.w	r3, lr, r3
 80a2c78:	e886 0088 	stmia.w	r6, {r3, r7}
 80a2c7c:	2100      	movs	r1, #0
 80a2c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2c82:	4623      	mov	r3, r4
 80a2c84:	e6f3      	b.n	80a2a6e <__udivmoddi4+0x96>
 80a2c86:	4618      	mov	r0, r3
 80a2c88:	e6da      	b.n	80a2a40 <__udivmoddi4+0x68>
 80a2c8a:	ebb8 0502 	subs.w	r5, r8, r2
 80a2c8e:	eb69 040c 	sbc.w	r4, r9, ip
 80a2c92:	3801      	subs	r0, #1
 80a2c94:	e7e5      	b.n	80a2c62 <__udivmoddi4+0x28a>
 80a2c96:	4605      	mov	r5, r0
 80a2c98:	e7d9      	b.n	80a2c4e <__udivmoddi4+0x276>
 80a2c9a:	4610      	mov	r0, r2
 80a2c9c:	e792      	b.n	80a2bc4 <__udivmoddi4+0x1ec>
 80a2c9e:	4682      	mov	sl, r0
 80a2ca0:	e7c0      	b.n	80a2c24 <__udivmoddi4+0x24c>
 80a2ca2:	4692      	mov	sl, r2
 80a2ca4:	e778      	b.n	80a2b98 <__udivmoddi4+0x1c0>
 80a2ca6:	3802      	subs	r0, #2
 80a2ca8:	443a      	add	r2, r7
 80a2caa:	e743      	b.n	80a2b34 <__udivmoddi4+0x15c>
 80a2cac:	4608      	mov	r0, r1
 80a2cae:	e704      	b.n	80a2aba <__udivmoddi4+0xe2>
 80a2cb0:	3b02      	subs	r3, #2
 80a2cb2:	443c      	add	r4, r7
 80a2cb4:	e72a      	b.n	80a2b0c <__udivmoddi4+0x134>
 80a2cb6:	45c3      	cmp	fp, r8
 80a2cb8:	d3e7      	bcc.n	80a2c8a <__udivmoddi4+0x2b2>
 80a2cba:	463c      	mov	r4, r7
 80a2cbc:	e7d1      	b.n	80a2c62 <__udivmoddi4+0x28a>
 80a2cbe:	4631      	mov	r1, r6
 80a2cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a2cc4 <__aeabi_idiv0>:
 80a2cc4:	4770      	bx	lr
 80a2cc6:	bf00      	nop

080a2cc8 <__cxa_atexit>:
 80a2cc8:	b510      	push	{r4, lr}
 80a2cca:	4c05      	ldr	r4, [pc, #20]	; (80a2ce0 <__cxa_atexit+0x18>)
 80a2ccc:	4613      	mov	r3, r2
 80a2cce:	b12c      	cbz	r4, 80a2cdc <__cxa_atexit+0x14>
 80a2cd0:	460a      	mov	r2, r1
 80a2cd2:	4601      	mov	r1, r0
 80a2cd4:	2002      	movs	r0, #2
 80a2cd6:	f3af 8000 	nop.w
 80a2cda:	bd10      	pop	{r4, pc}
 80a2cdc:	4620      	mov	r0, r4
 80a2cde:	bd10      	pop	{r4, pc}
 80a2ce0:	00000000 	.word	0x00000000

080a2ce4 <memcpy>:
 80a2ce4:	b510      	push	{r4, lr}
 80a2ce6:	1e43      	subs	r3, r0, #1
 80a2ce8:	440a      	add	r2, r1
 80a2cea:	4291      	cmp	r1, r2
 80a2cec:	d004      	beq.n	80a2cf8 <memcpy+0x14>
 80a2cee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a2cf2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a2cf6:	e7f8      	b.n	80a2cea <memcpy+0x6>
 80a2cf8:	bd10      	pop	{r4, pc}

080a2cfa <memset>:
 80a2cfa:	4603      	mov	r3, r0
 80a2cfc:	4402      	add	r2, r0
 80a2cfe:	4293      	cmp	r3, r2
 80a2d00:	d002      	beq.n	80a2d08 <memset+0xe>
 80a2d02:	f803 1b01 	strb.w	r1, [r3], #1
 80a2d06:	e7fa      	b.n	80a2cfe <memset+0x4>
 80a2d08:	4770      	bx	lr
	...

080a2d0c <srand>:
 80a2d0c:	b538      	push	{r3, r4, r5, lr}
 80a2d0e:	4b12      	ldr	r3, [pc, #72]	; (80a2d58 <srand+0x4c>)
 80a2d10:	4605      	mov	r5, r0
 80a2d12:	681c      	ldr	r4, [r3, #0]
 80a2d14:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a2d16:	b9d3      	cbnz	r3, 80a2d4e <srand+0x42>
 80a2d18:	2018      	movs	r0, #24
 80a2d1a:	f7fd fd4f 	bl	80a07bc <malloc>
 80a2d1e:	f243 330e 	movw	r3, #13070	; 0x330e
 80a2d22:	63a0      	str	r0, [r4, #56]	; 0x38
 80a2d24:	8003      	strh	r3, [r0, #0]
 80a2d26:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a2d2a:	8043      	strh	r3, [r0, #2]
 80a2d2c:	f241 2334 	movw	r3, #4660	; 0x1234
 80a2d30:	8083      	strh	r3, [r0, #4]
 80a2d32:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a2d36:	80c3      	strh	r3, [r0, #6]
 80a2d38:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a2d3c:	8103      	strh	r3, [r0, #8]
 80a2d3e:	2305      	movs	r3, #5
 80a2d40:	8143      	strh	r3, [r0, #10]
 80a2d42:	230b      	movs	r3, #11
 80a2d44:	8183      	strh	r3, [r0, #12]
 80a2d46:	2201      	movs	r2, #1
 80a2d48:	2300      	movs	r3, #0
 80a2d4a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a2d4e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a2d50:	2200      	movs	r2, #0
 80a2d52:	611d      	str	r5, [r3, #16]
 80a2d54:	615a      	str	r2, [r3, #20]
 80a2d56:	bd38      	pop	{r3, r4, r5, pc}
 80a2d58:	20000064 	.word	0x20000064

080a2d5c <strdup>:
 80a2d5c:	4b02      	ldr	r3, [pc, #8]	; (80a2d68 <strdup+0xc>)
 80a2d5e:	4601      	mov	r1, r0
 80a2d60:	6818      	ldr	r0, [r3, #0]
 80a2d62:	f000 b803 	b.w	80a2d6c <_strdup_r>
 80a2d66:	bf00      	nop
 80a2d68:	20000064 	.word	0x20000064

080a2d6c <_strdup_r>:
 80a2d6c:	b570      	push	{r4, r5, r6, lr}
 80a2d6e:	4606      	mov	r6, r0
 80a2d70:	4608      	mov	r0, r1
 80a2d72:	460c      	mov	r4, r1
 80a2d74:	f000 f80d 	bl	80a2d92 <strlen>
 80a2d78:	1c45      	adds	r5, r0, #1
 80a2d7a:	4629      	mov	r1, r5
 80a2d7c:	4630      	mov	r0, r6
 80a2d7e:	f7fd fd3d 	bl	80a07fc <_malloc_r>
 80a2d82:	4606      	mov	r6, r0
 80a2d84:	b118      	cbz	r0, 80a2d8e <_strdup_r+0x22>
 80a2d86:	462a      	mov	r2, r5
 80a2d88:	4621      	mov	r1, r4
 80a2d8a:	f7ff ffab 	bl	80a2ce4 <memcpy>
 80a2d8e:	4630      	mov	r0, r6
 80a2d90:	bd70      	pop	{r4, r5, r6, pc}

080a2d92 <strlen>:
 80a2d92:	4603      	mov	r3, r0
 80a2d94:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a2d98:	2a00      	cmp	r2, #0
 80a2d9a:	d1fb      	bne.n	80a2d94 <strlen+0x2>
 80a2d9c:	1a18      	subs	r0, r3, r0
 80a2d9e:	3801      	subs	r0, #1
 80a2da0:	4770      	bx	lr

080a2da2 <link_code_end>:
	...

080a2da4 <dynalib_user>:
 80a2da4:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a2db4:	0000 0000 6944 6e64 7427 6620 6e69 2064     ....Didn't find 
 80a2dc4:	6953 3131 3534 4f00 214b 5500 5656 7369     Si1145.OK!.UVVis
 80a2dd4:	5500 4956 0052 5655 6449 0078               .UVIR.UVIdx.

080a2de0 <_ZTV8SPIClass>:
	...
 80a2de8:	080d 080a 080f 080a 6162 6475 5300 7265     ........baud.Ser
 80a2df8:	6169 006c 5355 5342 7265 6169 316c 7400     ial.USBSerial1.t
 80a2e08:	7079 0065 6170 6172 006d 6d63 0064 6469     ype.param.cmd.id
 80a2e18:	6800 646e 7300 7274 006d 6966 746c 6c00     .hnd.strm.filt.l
 80a2e28:	6c76 6100 6464 6148 646e 656c 0072 6572     vl.addHandler.re
 80a2e38:	6f6d 6576 6148 646e 656c 0072 6e65 6d75     moveHandler.enum
 80a2e48:	6148 646e 656c 7372 4a00 4f53 534e 7274     Handlers.JSONStr
 80a2e58:	6165 4c6d 676f 6148 646e 656c 0072 7061     eamLogHandler.ap
 80a2e68:	0070 3025 3031 2075 5d00 0020 6425 2c00     p.%010u .] .%d.,
 80a2e78:	0020 2928 203a 2000 005b 6f63 6564 3d20      .(): . [.code =
 80a2e88:	0020 6925 6400 7465 6961 736c 3d20 0020      .%i.details = .
 80a2e98:	0a0d 6600 6c00 006e 6e66 6300 646f 0065     ...f.ln.fn.code.
 80a2ea8:	6564 6174 6c69 6e00 6e6f 0065 7274 6361     detail.none.trac
 80a2eb8:	0065 6e69 6f66 7700 7261 006e 7265 6f72     e.info.warn.erro
 80a2ec8:	0072 6170 696e 0063 6c61 006c 005a 2b25     r.panic.all.Z.%+
 80a2ed8:	3330 3a64 3025 7532 2500 2d59 6d25 252d     03d:%02u.%Y-%m-%
 80a2ee8:	5464 4825 253a 3a4d 5325 7a25 6100 6373     dT%H:%M:%S%z.asc
 80a2ef8:	6974 656d 0000 0000                         time....

080a2f00 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a2f08:	0d21 080a 0d27 080a 0d6b 080a 0d35 080a     !...'...k...5...
 80a2f18:	0d23 080a                                   #...

080a2f1c <_ZTV9IPAddress>:
	...
 80a2f24:	12b9 080a 12a9 080a 12ab 080a               ............

080a2f30 <_ZTV9USBSerial>:
	...
 80a2f38:	1375 080a 13c5 080a 13d3 080a 0a73 080a     u...........s...
 80a2f48:	13b1 080a 1377 080a 138d 080a 13bf 080a     ....w...........
 80a2f58:	13a3 080a 1371 080a                         ....q...

080a2f60 <_ZTV11USARTSerial>:
	...
 80a2f68:	150d 080a 155d 080a 156b 080a 0a73 080a     ....]...k...s...
 80a2f78:	1521 080a 1543 080a 152f 080a 1557 080a     !...C.../...W...
 80a2f88:	150f 080a 1513 080a                         ........

080a2f90 <_ZTV7TwoWire>:
	...
 80a2f98:	1631 080a 167b 080a 1653 080a 1633 080a     1...{...S...3...
 80a2fa8:	165b 080a 1663 080a 166b 080a 1673 080a     [...c...k...s...

080a2fb8 <_ZTVN5spark9WiFiClassE>:
	...
 80a2fc0:	177d 080a 1773 080a 1769 080a 16e7 080a     }...s...i.......
 80a2fd0:	0b49 080a 175d 080a 1751 080a 1749 080a     I...]...Q...I...
 80a2fe0:	173f 080a 1735 080a 16f1 080a               ?...5.......

080a2fec <_ZTVN5spark12NetworkClassE>:
	...
 80a2ff4:	179d 080a 17a7 080a 17b1 080a 17bb 080a     ................
 80a3004:	17c5 080a 17d1 080a 17dd 080a 17e9 080a     ................
 80a3014:	17f1 080a 17fb 080a 1805 080a               ............

080a3020 <__sf_fake_stdin>:
	...

080a3040 <__sf_fake_stdout>:
	...

080a3060 <__sf_fake_stderr>:
	...
 80a3080:	0043                                        C.

080a3082 <link_const_variable_data_end>:
	...

080a3084 <link_constructors_location>:
 80a3084:	080a0221 	.word	0x080a0221
 80a3088:	080a04ad 	.word	0x080a04ad
 80a308c:	080a0845 	.word	0x080a0845
 80a3090:	080a0b65 	.word	0x080a0b65
 80a3094:	080a0b75 	.word	0x080a0b75
 80a3098:	080a0bcd 	.word	0x080a0bcd
 80a309c:	080a1789 	.word	0x080a1789
 80a30a0:	080a1855 	.word	0x080a1855
 80a30a4:	080a1869 	.word	0x080a1869
 80a30a8:	080a18ad 	.word	0x080a18ad
 80a30ac:	080a1931 	.word	0x080a1931
 80a30b0:	080a19b5 	.word	0x080a19b5
 80a30b4:	080a1a79 	.word	0x080a1a79
 80a30b8:	080a1b3d 	.word	0x080a1b3d

080a30bc <link_constructors_end>:
 80a30bc:	00000000 	.word	0x00000000
