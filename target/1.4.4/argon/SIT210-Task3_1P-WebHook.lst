
d:/GDRIVE/School/DEVIT_UNI/2020_T1/SIT210/OnTrack/SIT210-03.1P/SIT210-Task3_1P-WebHook/target/1.4.4/argon/SIT210-Task3_1P-WebHook.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002e84  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000d6ea0  000d6ea0  00006ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000000  2003f400  2003f400  00016f3c  2**0
                  CONTENTS
  5 .data         00000068  2003e34c  000d6ea8  0000e34c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000043c  2003e3b4  2003e3b4  0001e3b4  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000d6f10  000d6f10  00016f10  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000d6f38  000d6f38  00016f38  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000de1c2  00000000  00000000  00016f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000112cd  00000000  00000000  000f50fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001e700  00000000  00000000  001063cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002538  00000000  00000000  00124acb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000045d0  00000000  00000000  00127003  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00034eb4  00000000  00000000  0012b5d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00029341  00000000  00000000  00160487  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    001021bf  00000000  00000000  001897c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000ce64  00000000  00000000  0028b988  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fd09 	bl	d6a44 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fd0e 	bl	d6a5a <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e34c 	.word	0x2003e34c
   d4048:	000d6ea8 	.word	0x000d6ea8
   d404c:	2003e3b4 	.word	0x2003e3b4
   d4050:	2003e3b4 	.word	0x2003e3b4
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f000 fedb 	bl	d4e14 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d6e9c 	.word	0x000d6e9c
   d4080:	000d6e5c 	.word	0x000d6e5c

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b816 	b.w	d40b4 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f8c3 	bl	d4214 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f000 be8d 	b.w	d4db0 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 bbc1 	b.w	d481c <malloc>

000d409a <_ZdlPv>:
   d409a:	f000 bbc7 	b.w	d482c <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 bbc5 	b.w	d482c <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr
	...

000d40b4 <setup>:


//Call UV sensor library method uv.begin()
void setup() 
{
  uv.begin();
   d40b4:	4801      	ldr	r0, [pc, #4]	; (d40bc <setup+0x8>)
   d40b6:	f000 b97a 	b.w	d43ae <_ZN15Adafruit_SI11455beginEv>
   d40ba:	bf00      	nop
   d40bc:	2003e3c1 	.word	0x2003e3c1

000d40c0 <_Z5getUVv>:
}


//Function to read UV data from sensor
void getUV()
{
   d40c0:	b510      	push	{r4, lr}
    UVVis = uv.readVisible();
   d40c2:	4c12      	ldr	r4, [pc, #72]	; (d410c <_Z5getUVv+0x4c>)
   d40c4:	4620      	mov	r0, r4
   d40c6:	f000 f909 	bl	d42dc <_ZN15Adafruit_SI114511readVisibleEv>
   d40ca:	ee07 0a90 	vmov	s15, r0
   d40ce:	4b10      	ldr	r3, [pc, #64]	; (d4110 <_Z5getUVv+0x50>)
   d40d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
    UVIR = uv.readIR();
   d40d4:	4620      	mov	r0, r4


//Function to read UV data from sensor
void getUV()
{
    UVVis = uv.readVisible();
   d40d6:	edc3 7a00 	vstr	s15, [r3]
    UVIR = uv.readIR();
   d40da:	f000 f902 	bl	d42e2 <_ZN15Adafruit_SI11456readIREv>
   d40de:	ee07 0a90 	vmov	s15, r0
   d40e2:	4b0c      	ldr	r3, [pc, #48]	; (d4114 <_Z5getUVv+0x54>)
   d40e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
    UVIdx = uv.readUV();
   d40e8:	4620      	mov	r0, r4

//Function to read UV data from sensor
void getUV()
{
    UVVis = uv.readVisible();
    UVIR = uv.readIR();
   d40ea:	edc3 7a00 	vstr	s15, [r3]
    UVIdx = uv.readUV();
   d40ee:	f000 f8f2 	bl	d42d6 <_ZN15Adafruit_SI11456readUVEv>
    UVIdx /= 100.0;
   d40f2:	ee07 0a90 	vmov	s15, r0
   d40f6:	ed9f 7a08 	vldr	s14, [pc, #32]	; d4118 <_Z5getUVv+0x58>
   d40fa:	4b08      	ldr	r3, [pc, #32]	; (d411c <_Z5getUVv+0x5c>)
   d40fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
   d4100:	eec6 7a87 	vdiv.f32	s15, s13, s14
   d4104:	edc3 7a00 	vstr	s15, [r3]
   d4108:	bd10      	pop	{r4, pc}
   d410a:	bf00      	nop
   d410c:	2003e3c1 	.word	0x2003e3c1
   d4110:	2003e3bc 	.word	0x2003e3bc
   d4114:	2003e3c4 	.word	0x2003e3c4
   d4118:	42c80000 	.word	0x42c80000
   d411c:	2003e3b8 	.word	0x2003e3b8

000d4120 <_Z11publishDatav>:
}


//Function to publish data every 30 seconds
void publishData()
{
   d4120:	b510      	push	{r4, lr}
   d4122:	b094      	sub	sp, #80	; 0x50

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d4124:	4931      	ldr	r1, [pc, #196]	; (d41ec <_Z11publishDatav+0xcc>)
   d4126:	a808      	add	r0, sp, #32
   d4128:	f000 fceb 	bl	d4b02 <_ZN6StringC1EPK19__FlashStringHelper>
  Particle.publish("UV", "{ \"UVVis\": \"" + String(UVVis) + "\"," +
   d412c:	4b30      	ldr	r3, [pc, #192]	; (d41f0 <_Z11publishDatav+0xd0>)
   d412e:	2106      	movs	r1, #6
   d4130:	ed93 0a00 	vldr	s0, [r3]
   d4134:	a804      	add	r0, sp, #16
   d4136:	f000 fd08 	bl	d4b4a <_ZN6StringC1Efi>
   d413a:	a904      	add	r1, sp, #16
   d413c:	a808      	add	r0, sp, #32
   d413e:	f000 fd35 	bl	d4bac <_ZplRK15StringSumHelperRK6String>
   d4142:	492c      	ldr	r1, [pc, #176]	; (d41f4 <_Z11publishDatav+0xd4>)
   d4144:	f000 fd3e 	bl	d4bc4 <_ZplRK15StringSumHelperPKc>
   "\"UVIR\": \"" + String(UVIR) + "\"," +
   d4148:	492b      	ldr	r1, [pc, #172]	; (d41f8 <_Z11publishDatav+0xd8>)
   d414a:	f000 fd3b 	bl	d4bc4 <_ZplRK15StringSumHelperPKc>
   d414e:	4b2b      	ldr	r3, [pc, #172]	; (d41fc <_Z11publishDatav+0xdc>)
   d4150:	4604      	mov	r4, r0
   d4152:	ed93 0a00 	vldr	s0, [r3]
   d4156:	2106      	movs	r1, #6
   d4158:	a80c      	add	r0, sp, #48	; 0x30
   d415a:	f000 fcf6 	bl	d4b4a <_ZN6StringC1Efi>
   d415e:	a90c      	add	r1, sp, #48	; 0x30
   d4160:	4620      	mov	r0, r4
   d4162:	f000 fd23 	bl	d4bac <_ZplRK15StringSumHelperRK6String>
   d4166:	4923      	ldr	r1, [pc, #140]	; (d41f4 <_Z11publishDatav+0xd4>)
   d4168:	f000 fd2c 	bl	d4bc4 <_ZplRK15StringSumHelperPKc>
    "\"UVIdx\": \"" + String(UVIdx) + "\"}", PRIVATE); 
   d416c:	4924      	ldr	r1, [pc, #144]	; (d4200 <_Z11publishDatav+0xe0>)
   d416e:	f000 fd29 	bl	d4bc4 <_ZplRK15StringSumHelperPKc>
   d4172:	4b24      	ldr	r3, [pc, #144]	; (d4204 <_Z11publishDatav+0xe4>)
   d4174:	4604      	mov	r4, r0
   d4176:	ed93 0a00 	vldr	s0, [r3]
   d417a:	2106      	movs	r1, #6
   d417c:	a810      	add	r0, sp, #64	; 0x40
   d417e:	f000 fce4 	bl	d4b4a <_ZN6StringC1Efi>
   d4182:	a910      	add	r1, sp, #64	; 0x40
   d4184:	4620      	mov	r0, r4
   d4186:	f000 fd11 	bl	d4bac <_ZplRK15StringSumHelperRK6String>
   d418a:	491f      	ldr	r1, [pc, #124]	; (d4208 <_Z11publishDatav+0xe8>)
   d418c:	f000 fd1a 	bl	d4bc4 <_ZplRK15StringSumHelperPKc>
   d4190:	4b1e      	ldr	r3, [pc, #120]	; (d420c <_Z11publishDatav+0xec>)
   d4192:	6802      	ldr	r2, [r0, #0]
   d4194:	781b      	ldrb	r3, [r3, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4196:	f88d 3000 	strb.w	r3, [sp]
   d419a:	491d      	ldr	r1, [pc, #116]	; (d4210 <_Z11publishDatav+0xf0>)
   d419c:	233c      	movs	r3, #60	; 0x3c
   d419e:	a802      	add	r0, sp, #8
   d41a0:	f000 ff94 	bl	d50cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d41a4:	9c03      	ldr	r4, [sp, #12]
   d41a6:	b17c      	cbz	r4, d41c8 <_Z11publishDatav+0xa8>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d41a8:	6863      	ldr	r3, [r4, #4]
   d41aa:	3b01      	subs	r3, #1
   d41ac:	6063      	str	r3, [r4, #4]
   d41ae:	b95b      	cbnz	r3, d41c8 <_Z11publishDatav+0xa8>
        {
          _M_dispose();
   d41b0:	6823      	ldr	r3, [r4, #0]
   d41b2:	4620      	mov	r0, r4
   d41b4:	689b      	ldr	r3, [r3, #8]
   d41b6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d41b8:	68a3      	ldr	r3, [r4, #8]
   d41ba:	3b01      	subs	r3, #1
   d41bc:	60a3      	str	r3, [r4, #8]
   d41be:	b91b      	cbnz	r3, d41c8 <_Z11publishDatav+0xa8>
            _M_destroy();
   d41c0:	6823      	ldr	r3, [r4, #0]
   d41c2:	4620      	mov	r0, r4
   d41c4:	68db      	ldr	r3, [r3, #12]
   d41c6:	4798      	blx	r3
   d41c8:	a810      	add	r0, sp, #64	; 0x40
   d41ca:	f000 fc53 	bl	d4a74 <_ZN6StringD1Ev>

//Function to publish data every 30 seconds
void publishData()
{
  Particle.publish("UV", "{ \"UVVis\": \"" + String(UVVis) + "\"," +
   "\"UVIR\": \"" + String(UVIR) + "\"," +
   d41ce:	a80c      	add	r0, sp, #48	; 0x30
   d41d0:	f000 fc50 	bl	d4a74 <_ZN6StringD1Ev>


//Function to publish data every 30 seconds
void publishData()
{
  Particle.publish("UV", "{ \"UVVis\": \"" + String(UVVis) + "\"," +
   d41d4:	a804      	add	r0, sp, #16
   d41d6:	f000 fc4d 	bl	d4a74 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d41da:	a808      	add	r0, sp, #32
   d41dc:	f000 fc4a 	bl	d4a74 <_ZN6StringD1Ev>
   "\"UVIR\": \"" + String(UVIR) + "\"," +
    "\"UVIdx\": \"" + String(UVIdx) + "\"}", PRIVATE); 
  delay(30000);
   d41e0:	f247 5030 	movw	r0, #30000	; 0x7530
   d41e4:	f000 fd96 	bl	d4d14 <delay>
} 
   d41e8:	b014      	add	sp, #80	; 0x50
   d41ea:	bd10      	pop	{r4, pc}
   d41ec:	000d6b28 	.word	0x000d6b28
   d41f0:	2003e3bc 	.word	0x2003e3bc
   d41f4:	000d6b35 	.word	0x000d6b35
   d41f8:	000d6b38 	.word	0x000d6b38
   d41fc:	2003e3c4 	.word	0x2003e3c4
   d4200:	000d6b42 	.word	0x000d6b42
   d4204:	2003e3b8 	.word	0x2003e3b8
   d4208:	000d6b4d 	.word	0x000d6b4d
   d420c:	2003e3c0 	.word	0x2003e3c0
   d4210:	000d6b50 	.word	0x000d6b50

000d4214 <loop>:
}


//Call getUV and publish functions
void loop() 
{
   d4214:	b508      	push	{r3, lr}
    getUV();
   d4216:	f7ff ff53 	bl	d40c0 <_Z5getUVv>
    publishData(); 
}
   d421a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

//Call getUV and publish functions
void loop() 
{
    getUV();
    publishData(); 
   d421e:	f7ff bf7f 	b.w	d4120 <_Z11publishDatav>
	...

000d4224 <_GLOBAL__sub_I_uv>:
{
  Particle.publish("UV", "{ \"UVVis\": \"" + String(UVVis) + "\"," +
   "\"UVIR\": \"" + String(UVIR) + "\"," +
    "\"UVIdx\": \"" + String(UVIdx) + "\"}", PRIVATE); 
  delay(30000);
} 
   d4224:	b508      	push	{r3, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4226:	4b05      	ldr	r3, [pc, #20]	; (d423c <_GLOBAL__sub_I_uv+0x18>)
   d4228:	2201      	movs	r2, #1
   d422a:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d422c:	f000 f952 	bl	d44d4 <HAL_Pin_Map>

//Library for SI1145 UV sensor
#include <Adafruit_SI1145.h>

//reference Adafruit SI1145 UV sensor library class
Adafruit_SI1145 uv = Adafruit_SI1145();
   d4230:	4803      	ldr	r0, [pc, #12]	; (d4240 <_GLOBAL__sub_I_uv+0x1c>)
{
  Particle.publish("UV", "{ \"UVVis\": \"" + String(UVVis) + "\"," +
   "\"UVIR\": \"" + String(UVIR) + "\"," +
    "\"UVIdx\": \"" + String(UVIdx) + "\"}", PRIVATE); 
  delay(30000);
} 
   d4232:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

//Library for SI1145 UV sensor
#include <Adafruit_SI1145.h>

//reference Adafruit SI1145 UV sensor library class
Adafruit_SI1145 uv = Adafruit_SI1145();
   d4236:	f000 b805 	b.w	d4244 <_ZN15Adafruit_SI1145C1Ev>
   d423a:	bf00      	nop
   d423c:	2003e3c0 	.word	0x2003e3c0
   d4240:	2003e3c1 	.word	0x2003e3c1

000d4244 <_ZN15Adafruit_SI1145C1Ev>:

#include "application.h"
#include "Adafruit_SI1145.h"

Adafruit_SI1145::Adafruit_SI1145() {
  _addr = SI1145_ADDR;
   d4244:	2360      	movs	r3, #96	; 0x60
   d4246:	7003      	strb	r3, [r0, #0]
}
   d4248:	4770      	bx	lr

000d424a <_ZN15Adafruit_SI11455read8Eh>:
  return read8(SI1145_REG_PARAMRD);
}

/*********************************************************************/

uint8_t  Adafruit_SI1145::read8(uint8_t reg) {
   d424a:	b538      	push	{r3, r4, r5, lr}
   d424c:	4604      	mov	r4, r0
   d424e:	460d      	mov	r5, r1
  uint16_t val;
    Wire.beginTransmission(_addr);
   d4250:	f001 fc56 	bl	d5b00 <_Z19__fetch_global_Wirev>
   d4254:	7821      	ldrb	r1, [r4, #0]
   d4256:	f001 fa93 	bl	d5780 <_ZN7TwoWire17beginTransmissionEh>
    Wire.write((uint8_t)reg);
   d425a:	f001 fc51 	bl	d5b00 <_Z19__fetch_global_Wirev>
   d425e:	6803      	ldr	r3, [r0, #0]
   d4260:	4629      	mov	r1, r5
   d4262:	689b      	ldr	r3, [r3, #8]
   d4264:	4798      	blx	r3
    Wire.endTransmission();
   d4266:	f001 fc4b 	bl	d5b00 <_Z19__fetch_global_Wirev>
   d426a:	f001 fa91 	bl	d5790 <_ZN7TwoWire15endTransmissionEv>

    Wire.requestFrom((uint8_t)_addr, (uint8_t)1);  
   d426e:	f001 fc47 	bl	d5b00 <_Z19__fetch_global_Wirev>
   d4272:	2201      	movs	r2, #1
   d4274:	7821      	ldrb	r1, [r4, #0]
   d4276:	f001 fa80 	bl	d577a <_ZN7TwoWire11requestFromEhh>
    return Wire.read();
   d427a:	f001 fc41 	bl	d5b00 <_Z19__fetch_global_Wirev>
   d427e:	6803      	ldr	r3, [r0, #0]
   d4280:	695b      	ldr	r3, [r3, #20]
   d4282:	4798      	blx	r3
}
   d4284:	b2c0      	uxtb	r0, r0
   d4286:	bd38      	pop	{r3, r4, r5, pc}

000d4288 <_ZN15Adafruit_SI11456read16Eh>:

uint16_t Adafruit_SI1145::read16(uint8_t a) {
   d4288:	b538      	push	{r3, r4, r5, lr}
   d428a:	4604      	mov	r4, r0
   d428c:	460d      	mov	r5, r1
  uint16_t ret;

  Wire.beginTransmission(_addr); // start transmission to device 
   d428e:	f001 fc37 	bl	d5b00 <_Z19__fetch_global_Wirev>
   d4292:	7821      	ldrb	r1, [r4, #0]
   d4294:	f001 fa74 	bl	d5780 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(a); // sends register address to read from
   d4298:	f001 fc32 	bl	d5b00 <_Z19__fetch_global_Wirev>
   d429c:	6803      	ldr	r3, [r0, #0]
   d429e:	4629      	mov	r1, r5
   d42a0:	689b      	ldr	r3, [r3, #8]
   d42a2:	4798      	blx	r3
  Wire.endTransmission(); // end transmission
   d42a4:	f001 fc2c 	bl	d5b00 <_Z19__fetch_global_Wirev>
   d42a8:	f001 fa72 	bl	d5790 <_ZN7TwoWire15endTransmissionEv>
  
  Wire.requestFrom(_addr, (uint8_t)2);// send data n-bytes read
   d42ac:	f001 fc28 	bl	d5b00 <_Z19__fetch_global_Wirev>
   d42b0:	7821      	ldrb	r1, [r4, #0]
   d42b2:	2202      	movs	r2, #2
   d42b4:	f001 fa61 	bl	d577a <_ZN7TwoWire11requestFromEhh>
  ret = Wire.read(); // receive DATA
   d42b8:	f001 fc22 	bl	d5b00 <_Z19__fetch_global_Wirev>
   d42bc:	6803      	ldr	r3, [r0, #0]
   d42be:	695b      	ldr	r3, [r3, #20]
   d42c0:	4798      	blx	r3
   d42c2:	4604      	mov	r4, r0
  ret |= (uint16_t)Wire.read() << 8; // receive DATA
   d42c4:	f001 fc1c 	bl	d5b00 <_Z19__fetch_global_Wirev>
   d42c8:	6803      	ldr	r3, [r0, #0]
   d42ca:	695b      	ldr	r3, [r3, #20]
   d42cc:	4798      	blx	r3

  return ret;
   d42ce:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
}
   d42d2:	b280      	uxth	r0, r0
   d42d4:	bd38      	pop	{r3, r4, r5, pc}

000d42d6 <_ZN15Adafruit_SI11456readUVEv>:

//////////////////////////////////////////////////////

// returns the UV index * 100 (divide by 100 to get the index)
uint16_t Adafruit_SI1145::readUV(void) {
 return read16(0x2C); 
   d42d6:	212c      	movs	r1, #44	; 0x2c
   d42d8:	f7ff bfd6 	b.w	d4288 <_ZN15Adafruit_SI11456read16Eh>

000d42dc <_ZN15Adafruit_SI114511readVisibleEv>:
}

// returns visible+IR light levels
uint16_t Adafruit_SI1145::readVisible(void) {
 return read16(0x22); 
   d42dc:	2122      	movs	r1, #34	; 0x22
   d42de:	f7ff bfd3 	b.w	d4288 <_ZN15Adafruit_SI11456read16Eh>

000d42e2 <_ZN15Adafruit_SI11456readIREv>:
}

// returns IR light levels
uint16_t Adafruit_SI1145::readIR(void) {
 return read16(0x24); 
   d42e2:	2124      	movs	r1, #36	; 0x24
   d42e4:	f7ff bfd0 	b.w	d4288 <_ZN15Adafruit_SI11456read16Eh>

000d42e8 <_ZN15Adafruit_SI11456write8Ehh>:
  ret |= (uint16_t)Wire.read() << 8; // receive DATA

  return ret;
}

void Adafruit_SI1145::write8(uint8_t reg, uint8_t val) {
   d42e8:	b570      	push	{r4, r5, r6, lr}
   d42ea:	4606      	mov	r6, r0
   d42ec:	4614      	mov	r4, r2
   d42ee:	460d      	mov	r5, r1

  Wire.beginTransmission(_addr); // start transmission to device 
   d42f0:	f001 fc06 	bl	d5b00 <_Z19__fetch_global_Wirev>
   d42f4:	7831      	ldrb	r1, [r6, #0]
   d42f6:	f001 fa43 	bl	d5780 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg); // sends register address to write
   d42fa:	f001 fc01 	bl	d5b00 <_Z19__fetch_global_Wirev>
   d42fe:	6803      	ldr	r3, [r0, #0]
   d4300:	4629      	mov	r1, r5
   d4302:	689b      	ldr	r3, [r3, #8]
   d4304:	4798      	blx	r3
  Wire.write(val); // sends value
   d4306:	f001 fbfb 	bl	d5b00 <_Z19__fetch_global_Wirev>
   d430a:	6803      	ldr	r3, [r0, #0]
   d430c:	4621      	mov	r1, r4
   d430e:	689b      	ldr	r3, [r3, #8]
   d4310:	4798      	blx	r3
  Wire.endTransmission(); // end transmission
   d4312:	f001 fbf5 	bl	d5b00 <_Z19__fetch_global_Wirev>
}
   d4316:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void Adafruit_SI1145::write8(uint8_t reg, uint8_t val) {

  Wire.beginTransmission(_addr); // start transmission to device 
  Wire.write(reg); // sends register address to write
  Wire.write(val); // sends value
  Wire.endTransmission(); // end transmission
   d431a:	f001 ba39 	b.w	d5790 <_ZN7TwoWire15endTransmissionEv>

000d431e <_ZN15Adafruit_SI11455resetEv>:
  write8(SI1145_REG_COMMAND, SI1145_PSALS_AUTO);

  return true;
}

void Adafruit_SI1145::reset() {
   d431e:	b510      	push	{r4, lr}
  write8(SI1145_REG_MEASRATE0, 0);
   d4320:	2200      	movs	r2, #0
  write8(SI1145_REG_COMMAND, SI1145_PSALS_AUTO);

  return true;
}

void Adafruit_SI1145::reset() {
   d4322:	4604      	mov	r4, r0
  write8(SI1145_REG_MEASRATE0, 0);
   d4324:	2108      	movs	r1, #8
   d4326:	f7ff ffdf 	bl	d42e8 <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_MEASRATE1, 0);
   d432a:	4620      	mov	r0, r4
   d432c:	2200      	movs	r2, #0
   d432e:	2109      	movs	r1, #9
   d4330:	f7ff ffda 	bl	d42e8 <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_IRQEN, 0);
   d4334:	4620      	mov	r0, r4
   d4336:	2200      	movs	r2, #0
   d4338:	2104      	movs	r1, #4
   d433a:	f7ff ffd5 	bl	d42e8 <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_IRQMODE1, 0);
   d433e:	4620      	mov	r0, r4
   d4340:	2200      	movs	r2, #0
   d4342:	2105      	movs	r1, #5
   d4344:	f7ff ffd0 	bl	d42e8 <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_IRQMODE2, 0);
   d4348:	4620      	mov	r0, r4
   d434a:	2200      	movs	r2, #0
   d434c:	2106      	movs	r1, #6
   d434e:	f7ff ffcb 	bl	d42e8 <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_INTCFG, 0);
   d4352:	4620      	mov	r0, r4
   d4354:	2200      	movs	r2, #0
   d4356:	2103      	movs	r1, #3
   d4358:	f7ff ffc6 	bl	d42e8 <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_IRQSTAT, 0xFF);
   d435c:	4620      	mov	r0, r4
   d435e:	22ff      	movs	r2, #255	; 0xff
   d4360:	2121      	movs	r1, #33	; 0x21
   d4362:	f7ff ffc1 	bl	d42e8 <_ZN15Adafruit_SI11456write8Ehh>

  write8(SI1145_REG_COMMAND, SI1145_RESET);
   d4366:	2201      	movs	r2, #1
   d4368:	2118      	movs	r1, #24
   d436a:	4620      	mov	r0, r4
   d436c:	f7ff ffbc 	bl	d42e8 <_ZN15Adafruit_SI11456write8Ehh>
  delay(10);
   d4370:	200a      	movs	r0, #10
   d4372:	f000 fccf 	bl	d4d14 <delay>
  write8(SI1145_REG_HWKEY, 0x17);
   d4376:	4620      	mov	r0, r4
   d4378:	2217      	movs	r2, #23
   d437a:	2107      	movs	r1, #7
   d437c:	f7ff ffb4 	bl	d42e8 <_ZN15Adafruit_SI11456write8Ehh>
  
  delay(10);
   d4380:	200a      	movs	r0, #10
}
   d4382:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  write8(SI1145_REG_COMMAND, SI1145_RESET);
  delay(10);
  write8(SI1145_REG_HWKEY, 0x17);
  
  delay(10);
   d4386:	f000 bcc5 	b.w	d4d14 <delay>

000d438a <_ZN15Adafruit_SI114510writeParamEhh>:
 return read16(0x26); 
}

/*********************************************************************/

uint8_t Adafruit_SI1145::writeParam(uint8_t p, uint8_t v) {
   d438a:	b538      	push	{r3, r4, r5, lr}
   d438c:	4604      	mov	r4, r0
   d438e:	460d      	mov	r5, r1
  //Serial.print("Param 0x"); Serial.print(p, HEX);
  //Serial.print(" = 0x"); Serial.println(v, HEX);
  
  write8(SI1145_REG_PARAMWR, v);
   d4390:	2117      	movs	r1, #23
   d4392:	f7ff ffa9 	bl	d42e8 <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_COMMAND, p | SI1145_PARAM_SET);
   d4396:	4620      	mov	r0, r4
   d4398:	f045 02a0 	orr.w	r2, r5, #160	; 0xa0
   d439c:	2118      	movs	r1, #24
   d439e:	f7ff ffa3 	bl	d42e8 <_ZN15Adafruit_SI11456write8Ehh>
  return read8(SI1145_REG_PARAMRD);
   d43a2:	4620      	mov	r0, r4
   d43a4:	212e      	movs	r1, #46	; 0x2e
}
   d43a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  //Serial.print("Param 0x"); Serial.print(p, HEX);
  //Serial.print(" = 0x"); Serial.println(v, HEX);
  
  write8(SI1145_REG_PARAMWR, v);
  write8(SI1145_REG_COMMAND, p | SI1145_PARAM_SET);
  return read8(SI1145_REG_PARAMRD);
   d43aa:	f7ff bf4e 	b.w	d424a <_ZN15Adafruit_SI11455read8Eh>

000d43ae <_ZN15Adafruit_SI11455beginEv>:
Adafruit_SI1145::Adafruit_SI1145() {
  _addr = SI1145_ADDR;
}


boolean Adafruit_SI1145::begin(void) {
   d43ae:	b510      	push	{r4, lr}
   d43b0:	4604      	mov	r4, r0
  Wire.begin();
   d43b2:	f001 fba5 	bl	d5b00 <_Z19__fetch_global_Wirev>
   d43b6:	f001 f9d1 	bl	d575c <_ZN7TwoWire5beginEv>
 
  uint8_t id = read8(SI1145_REG_PARTID);
   d43ba:	2100      	movs	r1, #0
   d43bc:	4620      	mov	r0, r4
   d43be:	f7ff ff44 	bl	d424a <_ZN15Adafruit_SI11455read8Eh>
  if (id != 0x45) return false; // look for SI1145
   d43c2:	2845      	cmp	r0, #69	; 0x45
   d43c4:	d172      	bne.n	d44ac <_ZN15Adafruit_SI11455beginEv+0xfe>
  
  reset();
   d43c6:	4620      	mov	r0, r4
   d43c8:	f7ff ffa9 	bl	d431e <_ZN15Adafruit_SI11455resetEv>
  

    /***********************************/
  // enable UVindex measurement coefficients!
  write8(SI1145_REG_UCOEFF0, 0x29);
   d43cc:	4620      	mov	r0, r4
   d43ce:	2229      	movs	r2, #41	; 0x29
   d43d0:	2113      	movs	r1, #19
   d43d2:	f7ff ff89 	bl	d42e8 <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_UCOEFF1, 0x89);
   d43d6:	4620      	mov	r0, r4
   d43d8:	2289      	movs	r2, #137	; 0x89
   d43da:	2114      	movs	r1, #20
   d43dc:	f7ff ff84 	bl	d42e8 <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_UCOEFF2, 0x02);
   d43e0:	4620      	mov	r0, r4
   d43e2:	2202      	movs	r2, #2
   d43e4:	2115      	movs	r1, #21
   d43e6:	f7ff ff7f 	bl	d42e8 <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_UCOEFF3, 0x00);
   d43ea:	4620      	mov	r0, r4
   d43ec:	2200      	movs	r2, #0
   d43ee:	2116      	movs	r1, #22
   d43f0:	f7ff ff7a 	bl	d42e8 <_ZN15Adafruit_SI11456write8Ehh>

  // enable UV sensor
  writeParam(SI1145_PARAM_CHLIST, SI1145_PARAM_CHLIST_ENUV |
  SI1145_PARAM_CHLIST_ENALSIR | SI1145_PARAM_CHLIST_ENALSVIS |
  SI1145_PARAM_CHLIST_ENPS1);
   d43f4:	22b1      	movs	r2, #177	; 0xb1
   d43f6:	2101      	movs	r1, #1
   d43f8:	4620      	mov	r0, r4
   d43fa:	f7ff ffc6 	bl	d438a <_ZN15Adafruit_SI114510writeParamEhh>
  // enable interrupt on every sample
  write8(SI1145_REG_INTCFG, SI1145_REG_INTCFG_INTOE);  
   d43fe:	4620      	mov	r0, r4
   d4400:	2201      	movs	r2, #1
   d4402:	2103      	movs	r1, #3
   d4404:	f7ff ff70 	bl	d42e8 <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_IRQEN, SI1145_REG_IRQEN_ALSEVERYSAMPLE);  
   d4408:	4620      	mov	r0, r4
   d440a:	2201      	movs	r2, #1
   d440c:	2104      	movs	r1, #4
   d440e:	f7ff ff6b 	bl	d42e8 <_ZN15Adafruit_SI11456write8Ehh>

/****************************** Prox Sense 1 */

  // program LED current
  write8(SI1145_REG_PSLED21, 0x03); // 20mA for LED 1 only
   d4412:	4620      	mov	r0, r4
   d4414:	2203      	movs	r2, #3
   d4416:	210f      	movs	r1, #15
   d4418:	f7ff ff66 	bl	d42e8 <_ZN15Adafruit_SI11456write8Ehh>
  writeParam(SI1145_PARAM_PS1ADCMUX, SI1145_PARAM_ADCMUX_LARGEIR);
   d441c:	2203      	movs	r2, #3
   d441e:	2107      	movs	r1, #7
   d4420:	4620      	mov	r0, r4
   d4422:	f7ff ffb2 	bl	d438a <_ZN15Adafruit_SI114510writeParamEhh>
  // prox sensor #1 uses LED #1
  writeParam(SI1145_PARAM_PSLED12SEL, SI1145_PARAM_PSLED12SEL_PS1LED1);
   d4426:	2201      	movs	r2, #1
   d4428:	2102      	movs	r1, #2
   d442a:	4620      	mov	r0, r4
   d442c:	f7ff ffad 	bl	d438a <_ZN15Adafruit_SI114510writeParamEhh>
  // fastest clocks, clock div 1
  writeParam(SI1145_PARAM_PSADCGAIN, 0);
   d4430:	2200      	movs	r2, #0
   d4432:	210b      	movs	r1, #11
   d4434:	4620      	mov	r0, r4
   d4436:	f7ff ffa8 	bl	d438a <_ZN15Adafruit_SI114510writeParamEhh>
  // take 511 clocks to measure
  writeParam(SI1145_PARAM_PSADCOUNTER, SI1145_PARAM_ADCCOUNTER_511CLK);
   d443a:	2270      	movs	r2, #112	; 0x70
   d443c:	210a      	movs	r1, #10
   d443e:	4620      	mov	r0, r4
   d4440:	f7ff ffa3 	bl	d438a <_ZN15Adafruit_SI114510writeParamEhh>
  // in prox mode, high range
  writeParam(SI1145_PARAM_PSADCMISC, SI1145_PARAM_PSADCMISC_RANGE|
    SI1145_PARAM_PSADCMISC_PSMODE);
   d4444:	2224      	movs	r2, #36	; 0x24
   d4446:	210c      	movs	r1, #12
   d4448:	4620      	mov	r0, r4
   d444a:	f7ff ff9e 	bl	d438a <_ZN15Adafruit_SI114510writeParamEhh>

  writeParam(SI1145_PARAM_ALSIRADCMUX, SI1145_PARAM_ADCMUX_SMALLIR);  
   d444e:	2200      	movs	r2, #0
   d4450:	210e      	movs	r1, #14
   d4452:	4620      	mov	r0, r4
   d4454:	f7ff ff99 	bl	d438a <_ZN15Adafruit_SI114510writeParamEhh>
  // fastest clocks, clock div 1
  writeParam(SI1145_PARAM_ALSIRADCGAIN, 0);
   d4458:	2200      	movs	r2, #0
   d445a:	211e      	movs	r1, #30
   d445c:	4620      	mov	r0, r4
   d445e:	f7ff ff94 	bl	d438a <_ZN15Adafruit_SI114510writeParamEhh>
  // take 511 clocks to measure
  writeParam(SI1145_PARAM_ALSIRADCOUNTER, SI1145_PARAM_ADCCOUNTER_511CLK);
   d4462:	2270      	movs	r2, #112	; 0x70
   d4464:	211d      	movs	r1, #29
   d4466:	4620      	mov	r0, r4
   d4468:	f7ff ff8f 	bl	d438a <_ZN15Adafruit_SI114510writeParamEhh>
  // in high range mode
  writeParam(SI1145_PARAM_ALSIRADCMISC, SI1145_PARAM_ALSIRADCMISC_RANGE);
   d446c:	2220      	movs	r2, #32
   d446e:	211f      	movs	r1, #31
   d4470:	4620      	mov	r0, r4
   d4472:	f7ff ff8a 	bl	d438a <_ZN15Adafruit_SI114510writeParamEhh>



  // fastest clocks, clock div 1
  writeParam(SI1145_PARAM_ALSVISADCGAIN, 0);
   d4476:	2200      	movs	r2, #0
   d4478:	2111      	movs	r1, #17
   d447a:	4620      	mov	r0, r4
   d447c:	f7ff ff85 	bl	d438a <_ZN15Adafruit_SI114510writeParamEhh>
  // take 511 clocks to measure
  writeParam(SI1145_PARAM_ALSVISADCOUNTER, SI1145_PARAM_ADCCOUNTER_511CLK);
   d4480:	2270      	movs	r2, #112	; 0x70
   d4482:	2110      	movs	r1, #16
   d4484:	4620      	mov	r0, r4
   d4486:	f7ff ff80 	bl	d438a <_ZN15Adafruit_SI114510writeParamEhh>
  // in high range mode (not normal signal)
  writeParam(SI1145_PARAM_ALSVISADCMISC, SI1145_PARAM_ALSVISADCMISC_VISRANGE);
   d448a:	2220      	movs	r2, #32
   d448c:	2112      	movs	r1, #18
   d448e:	4620      	mov	r0, r4
   d4490:	f7ff ff7b 	bl	d438a <_ZN15Adafruit_SI114510writeParamEhh>


/************************/

  // measurement rate for auto
  write8(SI1145_REG_MEASRATE0, 0xFF); // 255 * 31.25uS = 8ms
   d4494:	4620      	mov	r0, r4
   d4496:	22ff      	movs	r2, #255	; 0xff
   d4498:	2108      	movs	r1, #8
   d449a:	f7ff ff25 	bl	d42e8 <_ZN15Adafruit_SI11456write8Ehh>
  
  // auto run
  write8(SI1145_REG_COMMAND, SI1145_PSALS_AUTO);
   d449e:	4620      	mov	r0, r4
   d44a0:	220f      	movs	r2, #15
   d44a2:	2118      	movs	r1, #24
   d44a4:	f7ff ff20 	bl	d42e8 <_ZN15Adafruit_SI11456write8Ehh>

  return true;
   d44a8:	2001      	movs	r0, #1
   d44aa:	bd10      	pop	{r4, pc}

boolean Adafruit_SI1145::begin(void) {
  Wire.begin();
 
  uint8_t id = read8(SI1145_REG_PARTID);
  if (id != 0x45) return false; // look for SI1145
   d44ac:	2000      	movs	r0, #0
  
  // auto run
  write8(SI1145_REG_COMMAND, SI1145_PSALS_AUTO);

  return true;
}
   d44ae:	bd10      	pop	{r4, pc}

000d44b0 <_GLOBAL__sub_I__ZN15Adafruit_SI1145C2Ev>:
   d44b0:	f000 b810 	b.w	d44d4 <HAL_Pin_Map>

000d44b4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d44b4:	b508      	push	{r3, lr}
   d44b6:	4b02      	ldr	r3, [pc, #8]	; (d44c0 <netdb_freeaddrinfo+0xc>)
   d44b8:	681b      	ldr	r3, [r3, #0]
   d44ba:	689b      	ldr	r3, [r3, #8]
   d44bc:	9301      	str	r3, [sp, #4]
   d44be:	bd08      	pop	{r3, pc}
   d44c0:	00030268 	.word	0x00030268

000d44c4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d44c4:	b508      	push	{r3, lr}
   d44c6:	4b02      	ldr	r3, [pc, #8]	; (d44d0 <netdb_getaddrinfo+0xc>)
   d44c8:	681b      	ldr	r3, [r3, #0]
   d44ca:	68db      	ldr	r3, [r3, #12]
   d44cc:	9301      	str	r3, [sp, #4]
   d44ce:	bd08      	pop	{r3, pc}
   d44d0:	00030268 	.word	0x00030268

000d44d4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d44d4:	b508      	push	{r3, lr}
   d44d6:	4b02      	ldr	r3, [pc, #8]	; (d44e0 <HAL_Pin_Map+0xc>)
   d44d8:	681b      	ldr	r3, [r3, #0]
   d44da:	681b      	ldr	r3, [r3, #0]
   d44dc:	9301      	str	r3, [sp, #4]
   d44de:	bd08      	pop	{r3, pc}
   d44e0:	0003022c 	.word	0x0003022c

000d44e4 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d44e4:	b508      	push	{r3, lr}
   d44e6:	4b02      	ldr	r3, [pc, #8]	; (d44f0 <HAL_SPI_Init+0xc>)
   d44e8:	681b      	ldr	r3, [r3, #0]
   d44ea:	69db      	ldr	r3, [r3, #28]
   d44ec:	9301      	str	r3, [sp, #4]
   d44ee:	bd08      	pop	{r3, pc}
   d44f0:	00030230 	.word	0x00030230

000d44f4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d44f4:	b508      	push	{r3, lr}
   d44f6:	4b02      	ldr	r3, [pc, #8]	; (d4500 <HAL_RNG_GetRandomNumber+0xc>)
   d44f8:	681b      	ldr	r3, [r3, #0]
   d44fa:	685b      	ldr	r3, [r3, #4]
   d44fc:	9301      	str	r3, [sp, #4]
   d44fe:	bd08      	pop	{r3, pc}
   d4500:	00030218 	.word	0x00030218

000d4504 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4504:	b508      	push	{r3, lr}
   d4506:	4b02      	ldr	r3, [pc, #8]	; (d4510 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4508:	681b      	ldr	r3, [r3, #0]
   d450a:	695b      	ldr	r3, [r3, #20]
   d450c:	9301      	str	r3, [sp, #4]
   d450e:	bd08      	pop	{r3, pc}
   d4510:	00030218 	.word	0x00030218

000d4514 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4514:	b508      	push	{r3, lr}
   d4516:	4b02      	ldr	r3, [pc, #8]	; (d4520 <os_thread_is_current+0xc>)
   d4518:	681b      	ldr	r3, [r3, #0]
   d451a:	689b      	ldr	r3, [r3, #8]
   d451c:	9301      	str	r3, [sp, #4]
   d451e:	bd08      	pop	{r3, pc}
   d4520:	00030248 	.word	0x00030248

000d4524 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4524:	b508      	push	{r3, lr}
   d4526:	4b02      	ldr	r3, [pc, #8]	; (d4530 <os_thread_join+0xc>)
   d4528:	681b      	ldr	r3, [r3, #0]
   d452a:	691b      	ldr	r3, [r3, #16]
   d452c:	9301      	str	r3, [sp, #4]
   d452e:	bd08      	pop	{r3, pc}
   d4530:	00030248 	.word	0x00030248

000d4534 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4534:	b508      	push	{r3, lr}
   d4536:	4b02      	ldr	r3, [pc, #8]	; (d4540 <os_thread_cleanup+0xc>)
   d4538:	681b      	ldr	r3, [r3, #0]
   d453a:	695b      	ldr	r3, [r3, #20]
   d453c:	9301      	str	r3, [sp, #4]
   d453e:	bd08      	pop	{r3, pc}
   d4540:	00030248 	.word	0x00030248

000d4544 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d4544:	b508      	push	{r3, lr}
   d4546:	4b02      	ldr	r3, [pc, #8]	; (d4550 <os_mutex_create+0xc>)
   d4548:	681b      	ldr	r3, [r3, #0]
   d454a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d454c:	9301      	str	r3, [sp, #4]
   d454e:	bd08      	pop	{r3, pc}
   d4550:	00030248 	.word	0x00030248

000d4554 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4554:	b508      	push	{r3, lr}
   d4556:	4b02      	ldr	r3, [pc, #8]	; (d4560 <os_mutex_recursive_create+0xc>)
   d4558:	681b      	ldr	r3, [r3, #0]
   d455a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d455c:	9301      	str	r3, [sp, #4]
   d455e:	bd08      	pop	{r3, pc}
   d4560:	00030248 	.word	0x00030248

000d4564 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4564:	b508      	push	{r3, lr}
   d4566:	4b02      	ldr	r3, [pc, #8]	; (d4570 <inet_inet_ntop+0xc>)
   d4568:	681b      	ldr	r3, [r3, #0]
   d456a:	695b      	ldr	r3, [r3, #20]
   d456c:	9301      	str	r3, [sp, #4]
   d456e:	bd08      	pop	{r3, pc}
   d4570:	00030264 	.word	0x00030264

000d4574 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4574:	b508      	push	{r3, lr}
   d4576:	4b02      	ldr	r3, [pc, #8]	; (d4580 <HAL_USART_Init+0xc>)
   d4578:	681b      	ldr	r3, [r3, #0]
   d457a:	681b      	ldr	r3, [r3, #0]
   d457c:	9301      	str	r3, [sp, #4]
   d457e:	bd08      	pop	{r3, pc}
   d4580:	0003023c 	.word	0x0003023c

000d4584 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4584:	b508      	push	{r3, lr}
   d4586:	4b02      	ldr	r3, [pc, #8]	; (d4590 <HAL_USART_Write_Data+0xc>)
   d4588:	681b      	ldr	r3, [r3, #0]
   d458a:	68db      	ldr	r3, [r3, #12]
   d458c:	9301      	str	r3, [sp, #4]
   d458e:	bd08      	pop	{r3, pc}
   d4590:	0003023c 	.word	0x0003023c

000d4594 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4594:	b508      	push	{r3, lr}
   d4596:	4b02      	ldr	r3, [pc, #8]	; (d45a0 <HAL_USART_Available_Data+0xc>)
   d4598:	681b      	ldr	r3, [r3, #0]
   d459a:	691b      	ldr	r3, [r3, #16]
   d459c:	9301      	str	r3, [sp, #4]
   d459e:	bd08      	pop	{r3, pc}
   d45a0:	0003023c 	.word	0x0003023c

000d45a4 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d45a4:	b508      	push	{r3, lr}
   d45a6:	4b02      	ldr	r3, [pc, #8]	; (d45b0 <HAL_USART_Read_Data+0xc>)
   d45a8:	681b      	ldr	r3, [r3, #0]
   d45aa:	695b      	ldr	r3, [r3, #20]
   d45ac:	9301      	str	r3, [sp, #4]
   d45ae:	bd08      	pop	{r3, pc}
   d45b0:	0003023c 	.word	0x0003023c

000d45b4 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d45b4:	b508      	push	{r3, lr}
   d45b6:	4b02      	ldr	r3, [pc, #8]	; (d45c0 <HAL_USART_Peek_Data+0xc>)
   d45b8:	681b      	ldr	r3, [r3, #0]
   d45ba:	699b      	ldr	r3, [r3, #24]
   d45bc:	9301      	str	r3, [sp, #4]
   d45be:	bd08      	pop	{r3, pc}
   d45c0:	0003023c 	.word	0x0003023c

000d45c4 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d45c4:	b508      	push	{r3, lr}
   d45c6:	4b02      	ldr	r3, [pc, #8]	; (d45d0 <HAL_USART_Flush_Data+0xc>)
   d45c8:	681b      	ldr	r3, [r3, #0]
   d45ca:	69db      	ldr	r3, [r3, #28]
   d45cc:	9301      	str	r3, [sp, #4]
   d45ce:	bd08      	pop	{r3, pc}
   d45d0:	0003023c 	.word	0x0003023c

000d45d4 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d45d4:	b508      	push	{r3, lr}
   d45d6:	4b02      	ldr	r3, [pc, #8]	; (d45e0 <HAL_USART_Available_Data_For_Write+0xc>)
   d45d8:	681b      	ldr	r3, [r3, #0]
   d45da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d45dc:	9301      	str	r3, [sp, #4]
   d45de:	bd08      	pop	{r3, pc}
   d45e0:	0003023c 	.word	0x0003023c

000d45e4 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d45e4:	b508      	push	{r3, lr}
   d45e6:	4b02      	ldr	r3, [pc, #8]	; (d45f0 <HAL_I2C_Begin+0xc>)
   d45e8:	681b      	ldr	r3, [r3, #0]
   d45ea:	68db      	ldr	r3, [r3, #12]
   d45ec:	9301      	str	r3, [sp, #4]
   d45ee:	bd08      	pop	{r3, pc}
   d45f0:	00030228 	.word	0x00030228

000d45f4 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
   d45f4:	b508      	push	{r3, lr}
   d45f6:	4b02      	ldr	r3, [pc, #8]	; (d4600 <HAL_I2C_Request_Data+0xc>)
   d45f8:	681b      	ldr	r3, [r3, #0]
   d45fa:	695b      	ldr	r3, [r3, #20]
   d45fc:	9301      	str	r3, [sp, #4]
   d45fe:	bd08      	pop	{r3, pc}
   d4600:	00030228 	.word	0x00030228

000d4604 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
   d4604:	b508      	push	{r3, lr}
   d4606:	4b02      	ldr	r3, [pc, #8]	; (d4610 <HAL_I2C_Begin_Transmission+0xc>)
   d4608:	681b      	ldr	r3, [r3, #0]
   d460a:	699b      	ldr	r3, [r3, #24]
   d460c:	9301      	str	r3, [sp, #4]
   d460e:	bd08      	pop	{r3, pc}
   d4610:	00030228 	.word	0x00030228

000d4614 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d4614:	b508      	push	{r3, lr}
   d4616:	4b02      	ldr	r3, [pc, #8]	; (d4620 <HAL_I2C_End_Transmission+0xc>)
   d4618:	681b      	ldr	r3, [r3, #0]
   d461a:	69db      	ldr	r3, [r3, #28]
   d461c:	9301      	str	r3, [sp, #4]
   d461e:	bd08      	pop	{r3, pc}
   d4620:	00030228 	.word	0x00030228

000d4624 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4624:	b508      	push	{r3, lr}
   d4626:	4b02      	ldr	r3, [pc, #8]	; (d4630 <HAL_I2C_Write_Data+0xc>)
   d4628:	681b      	ldr	r3, [r3, #0]
   d462a:	6a1b      	ldr	r3, [r3, #32]
   d462c:	9301      	str	r3, [sp, #4]
   d462e:	bd08      	pop	{r3, pc}
   d4630:	00030228 	.word	0x00030228

000d4634 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4634:	b508      	push	{r3, lr}
   d4636:	4b02      	ldr	r3, [pc, #8]	; (d4640 <HAL_I2C_Available_Data+0xc>)
   d4638:	681b      	ldr	r3, [r3, #0]
   d463a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d463c:	9301      	str	r3, [sp, #4]
   d463e:	bd08      	pop	{r3, pc}
   d4640:	00030228 	.word	0x00030228

000d4644 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4644:	b508      	push	{r3, lr}
   d4646:	4b02      	ldr	r3, [pc, #8]	; (d4650 <HAL_I2C_Read_Data+0xc>)
   d4648:	681b      	ldr	r3, [r3, #0]
   d464a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d464c:	9301      	str	r3, [sp, #4]
   d464e:	bd08      	pop	{r3, pc}
   d4650:	00030228 	.word	0x00030228

000d4654 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4654:	b508      	push	{r3, lr}
   d4656:	4b02      	ldr	r3, [pc, #8]	; (d4660 <HAL_I2C_Peek_Data+0xc>)
   d4658:	681b      	ldr	r3, [r3, #0]
   d465a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d465c:	9301      	str	r3, [sp, #4]
   d465e:	bd08      	pop	{r3, pc}
   d4660:	00030228 	.word	0x00030228

000d4664 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4664:	b508      	push	{r3, lr}
   d4666:	4b02      	ldr	r3, [pc, #8]	; (d4670 <HAL_I2C_Flush_Data+0xc>)
   d4668:	681b      	ldr	r3, [r3, #0]
   d466a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d466c:	9301      	str	r3, [sp, #4]
   d466e:	bd08      	pop	{r3, pc}
   d4670:	00030228 	.word	0x00030228

000d4674 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d4674:	b508      	push	{r3, lr}
   d4676:	4b02      	ldr	r3, [pc, #8]	; (d4680 <HAL_I2C_Init+0xc>)
   d4678:	681b      	ldr	r3, [r3, #0]
   d467a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d467c:	9301      	str	r3, [sp, #4]
   d467e:	bd08      	pop	{r3, pc}
   d4680:	00030228 	.word	0x00030228

000d4684 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4684:	b508      	push	{r3, lr}
   d4686:	4b02      	ldr	r3, [pc, #8]	; (d4690 <HAL_USB_USART_Init+0xc>)
   d4688:	681b      	ldr	r3, [r3, #0]
   d468a:	681b      	ldr	r3, [r3, #0]
   d468c:	9301      	str	r3, [sp, #4]
   d468e:	bd08      	pop	{r3, pc}
   d4690:	0003024c 	.word	0x0003024c

000d4694 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4694:	b508      	push	{r3, lr}
   d4696:	4b02      	ldr	r3, [pc, #8]	; (d46a0 <HAL_USB_USART_Available_Data+0xc>)
   d4698:	681b      	ldr	r3, [r3, #0]
   d469a:	691b      	ldr	r3, [r3, #16]
   d469c:	9301      	str	r3, [sp, #4]
   d469e:	bd08      	pop	{r3, pc}
   d46a0:	0003024c 	.word	0x0003024c

000d46a4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d46a4:	b508      	push	{r3, lr}
   d46a6:	4b02      	ldr	r3, [pc, #8]	; (d46b0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d46a8:	681b      	ldr	r3, [r3, #0]
   d46aa:	695b      	ldr	r3, [r3, #20]
   d46ac:	9301      	str	r3, [sp, #4]
   d46ae:	bd08      	pop	{r3, pc}
   d46b0:	0003024c 	.word	0x0003024c

000d46b4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d46b4:	b508      	push	{r3, lr}
   d46b6:	4b02      	ldr	r3, [pc, #8]	; (d46c0 <HAL_USB_USART_Receive_Data+0xc>)
   d46b8:	681b      	ldr	r3, [r3, #0]
   d46ba:	699b      	ldr	r3, [r3, #24]
   d46bc:	9301      	str	r3, [sp, #4]
   d46be:	bd08      	pop	{r3, pc}
   d46c0:	0003024c 	.word	0x0003024c

000d46c4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d46c4:	b508      	push	{r3, lr}
   d46c6:	4b02      	ldr	r3, [pc, #8]	; (d46d0 <HAL_USB_USART_Send_Data+0xc>)
   d46c8:	681b      	ldr	r3, [r3, #0]
   d46ca:	69db      	ldr	r3, [r3, #28]
   d46cc:	9301      	str	r3, [sp, #4]
   d46ce:	bd08      	pop	{r3, pc}
   d46d0:	0003024c 	.word	0x0003024c

000d46d4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d46d4:	b508      	push	{r3, lr}
   d46d6:	4b02      	ldr	r3, [pc, #8]	; (d46e0 <HAL_USB_USART_Flush_Data+0xc>)
   d46d8:	681b      	ldr	r3, [r3, #0]
   d46da:	6a1b      	ldr	r3, [r3, #32]
   d46dc:	9301      	str	r3, [sp, #4]
   d46de:	bd08      	pop	{r3, pc}
   d46e0:	0003024c 	.word	0x0003024c

000d46e4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d46e4:	b508      	push	{r3, lr}
   d46e6:	4b02      	ldr	r3, [pc, #8]	; (d46f0 <set_system_mode+0xc>)
   d46e8:	681b      	ldr	r3, [r3, #0]
   d46ea:	685b      	ldr	r3, [r3, #4]
   d46ec:	9301      	str	r3, [sp, #4]
   d46ee:	bd08      	pop	{r3, pc}
   d46f0:	00030220 	.word	0x00030220

000d46f4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d46f4:	b508      	push	{r3, lr}
   d46f6:	4b02      	ldr	r3, [pc, #8]	; (d4700 <system_delay_ms+0xc>)
   d46f8:	681b      	ldr	r3, [r3, #0]
   d46fa:	695b      	ldr	r3, [r3, #20]
   d46fc:	9301      	str	r3, [sp, #4]
   d46fe:	bd08      	pop	{r3, pc}
   d4700:	00030220 	.word	0x00030220

000d4704 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4704:	b508      	push	{r3, lr}
   d4706:	4b02      	ldr	r3, [pc, #8]	; (d4710 <application_thread_current+0xc>)
   d4708:	681b      	ldr	r3, [r3, #0]
   d470a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d470c:	9301      	str	r3, [sp, #4]
   d470e:	bd08      	pop	{r3, pc}
   d4710:	00030220 	.word	0x00030220

000d4714 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4714:	b508      	push	{r3, lr}
   d4716:	4b02      	ldr	r3, [pc, #8]	; (d4720 <application_thread_invoke+0xc>)
   d4718:	681b      	ldr	r3, [r3, #0]
   d471a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d471c:	9301      	str	r3, [sp, #4]
   d471e:	bd08      	pop	{r3, pc}
   d4720:	00030220 	.word	0x00030220

000d4724 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4724:	b508      	push	{r3, lr}
   d4726:	4b03      	ldr	r3, [pc, #12]	; (d4734 <system_ctrl_set_app_request_handler+0x10>)
   d4728:	681b      	ldr	r3, [r3, #0]
   d472a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d472e:	9301      	str	r3, [sp, #4]
   d4730:	bd08      	pop	{r3, pc}
   d4732:	0000      	.short	0x0000
   d4734:	00030220 	.word	0x00030220

000d4738 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4738:	b508      	push	{r3, lr}
   d473a:	4b03      	ldr	r3, [pc, #12]	; (d4748 <system_ctrl_set_result+0x10>)
   d473c:	681b      	ldr	r3, [r3, #0]
   d473e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4742:	9301      	str	r3, [sp, #4]
   d4744:	bd08      	pop	{r3, pc}
   d4746:	0000      	.short	0x0000
   d4748:	00030220 	.word	0x00030220

000d474c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d474c:	b508      	push	{r3, lr}
   d474e:	4b02      	ldr	r3, [pc, #8]	; (d4758 <network_connect+0xc>)
   d4750:	681b      	ldr	r3, [r3, #0]
   d4752:	685b      	ldr	r3, [r3, #4]
   d4754:	9301      	str	r3, [sp, #4]
   d4756:	bd08      	pop	{r3, pc}
   d4758:	00030240 	.word	0x00030240

000d475c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d475c:	b508      	push	{r3, lr}
   d475e:	4b02      	ldr	r3, [pc, #8]	; (d4768 <network_connecting+0xc>)
   d4760:	681b      	ldr	r3, [r3, #0]
   d4762:	689b      	ldr	r3, [r3, #8]
   d4764:	9301      	str	r3, [sp, #4]
   d4766:	bd08      	pop	{r3, pc}
   d4768:	00030240 	.word	0x00030240

000d476c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d476c:	b508      	push	{r3, lr}
   d476e:	4b02      	ldr	r3, [pc, #8]	; (d4778 <network_disconnect+0xc>)
   d4770:	681b      	ldr	r3, [r3, #0]
   d4772:	68db      	ldr	r3, [r3, #12]
   d4774:	9301      	str	r3, [sp, #4]
   d4776:	bd08      	pop	{r3, pc}
   d4778:	00030240 	.word	0x00030240

000d477c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d477c:	b508      	push	{r3, lr}
   d477e:	4b02      	ldr	r3, [pc, #8]	; (d4788 <network_ready+0xc>)
   d4780:	681b      	ldr	r3, [r3, #0]
   d4782:	691b      	ldr	r3, [r3, #16]
   d4784:	9301      	str	r3, [sp, #4]
   d4786:	bd08      	pop	{r3, pc}
   d4788:	00030240 	.word	0x00030240

000d478c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d478c:	b508      	push	{r3, lr}
   d478e:	4b02      	ldr	r3, [pc, #8]	; (d4798 <network_on+0xc>)
   d4790:	681b      	ldr	r3, [r3, #0]
   d4792:	695b      	ldr	r3, [r3, #20]
   d4794:	9301      	str	r3, [sp, #4]
   d4796:	bd08      	pop	{r3, pc}
   d4798:	00030240 	.word	0x00030240

000d479c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d479c:	b508      	push	{r3, lr}
   d479e:	4b02      	ldr	r3, [pc, #8]	; (d47a8 <network_off+0xc>)
   d47a0:	681b      	ldr	r3, [r3, #0]
   d47a2:	699b      	ldr	r3, [r3, #24]
   d47a4:	9301      	str	r3, [sp, #4]
   d47a6:	bd08      	pop	{r3, pc}
   d47a8:	00030240 	.word	0x00030240

000d47ac <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d47ac:	b508      	push	{r3, lr}
   d47ae:	4b02      	ldr	r3, [pc, #8]	; (d47b8 <network_listen+0xc>)
   d47b0:	681b      	ldr	r3, [r3, #0]
   d47b2:	69db      	ldr	r3, [r3, #28]
   d47b4:	9301      	str	r3, [sp, #4]
   d47b6:	bd08      	pop	{r3, pc}
   d47b8:	00030240 	.word	0x00030240

000d47bc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d47bc:	b508      	push	{r3, lr}
   d47be:	4b02      	ldr	r3, [pc, #8]	; (d47c8 <network_listening+0xc>)
   d47c0:	681b      	ldr	r3, [r3, #0]
   d47c2:	6a1b      	ldr	r3, [r3, #32]
   d47c4:	9301      	str	r3, [sp, #4]
   d47c6:	bd08      	pop	{r3, pc}
   d47c8:	00030240 	.word	0x00030240

000d47cc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d47cc:	b508      	push	{r3, lr}
   d47ce:	4b02      	ldr	r3, [pc, #8]	; (d47d8 <network_set_listen_timeout+0xc>)
   d47d0:	681b      	ldr	r3, [r3, #0]
   d47d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d47d4:	9301      	str	r3, [sp, #4]
   d47d6:	bd08      	pop	{r3, pc}
   d47d8:	00030240 	.word	0x00030240

000d47dc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d47dc:	b508      	push	{r3, lr}
   d47de:	4b02      	ldr	r3, [pc, #8]	; (d47e8 <network_get_listen_timeout+0xc>)
   d47e0:	681b      	ldr	r3, [r3, #0]
   d47e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d47e4:	9301      	str	r3, [sp, #4]
   d47e6:	bd08      	pop	{r3, pc}
   d47e8:	00030240 	.word	0x00030240

000d47ec <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d47ec:	b508      	push	{r3, lr}
   d47ee:	4b02      	ldr	r3, [pc, #8]	; (d47f8 <spark_cloud_flag_connected+0xc>)
   d47f0:	681b      	ldr	r3, [r3, #0]
   d47f2:	695b      	ldr	r3, [r3, #20]
   d47f4:	9301      	str	r3, [sp, #4]
   d47f6:	bd08      	pop	{r3, pc}
   d47f8:	00030244 	.word	0x00030244

000d47fc <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d47fc:	b508      	push	{r3, lr}
   d47fe:	4b02      	ldr	r3, [pc, #8]	; (d4808 <spark_send_event+0xc>)
   d4800:	681b      	ldr	r3, [r3, #0]
   d4802:	6a1b      	ldr	r3, [r3, #32]
   d4804:	9301      	str	r3, [sp, #4]
   d4806:	bd08      	pop	{r3, pc}
   d4808:	00030244 	.word	0x00030244

000d480c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d480c:	b508      	push	{r3, lr}
   d480e:	4b02      	ldr	r3, [pc, #8]	; (d4818 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4810:	681b      	ldr	r3, [r3, #0]
   d4812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4814:	9301      	str	r3, [sp, #4]
   d4816:	bd08      	pop	{r3, pc}
   d4818:	00030244 	.word	0x00030244

000d481c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d481c:	b508      	push	{r3, lr}
   d481e:	4b02      	ldr	r3, [pc, #8]	; (d4828 <malloc+0xc>)
   d4820:	681b      	ldr	r3, [r3, #0]
   d4822:	681b      	ldr	r3, [r3, #0]
   d4824:	9301      	str	r3, [sp, #4]
   d4826:	bd08      	pop	{r3, pc}
   d4828:	0003021c 	.word	0x0003021c

000d482c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d482c:	b508      	push	{r3, lr}
   d482e:	4b02      	ldr	r3, [pc, #8]	; (d4838 <free+0xc>)
   d4830:	681b      	ldr	r3, [r3, #0]
   d4832:	685b      	ldr	r3, [r3, #4]
   d4834:	9301      	str	r3, [sp, #4]
   d4836:	bd08      	pop	{r3, pc}
   d4838:	0003021c 	.word	0x0003021c

000d483c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d483c:	b508      	push	{r3, lr}
   d483e:	4b02      	ldr	r3, [pc, #8]	; (d4848 <realloc+0xc>)
   d4840:	681b      	ldr	r3, [r3, #0]
   d4842:	689b      	ldr	r3, [r3, #8]
   d4844:	9301      	str	r3, [sp, #4]
   d4846:	bd08      	pop	{r3, pc}
   d4848:	0003021c 	.word	0x0003021c

000d484c <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d484c:	b508      	push	{r3, lr}
   d484e:	4b02      	ldr	r3, [pc, #8]	; (d4858 <abort+0xc>)
   d4850:	681b      	ldr	r3, [r3, #0]
   d4852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4854:	9301      	str	r3, [sp, #4]
   d4856:	bd08      	pop	{r3, pc}
   d4858:	0003021c 	.word	0x0003021c

000d485c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d485c:	b508      	push	{r3, lr}
   d485e:	4b02      	ldr	r3, [pc, #8]	; (d4868 <_malloc_r+0xc>)
   d4860:	681b      	ldr	r3, [r3, #0]
   d4862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4864:	9301      	str	r3, [sp, #4]
   d4866:	bd08      	pop	{r3, pc}
   d4868:	0003021c 	.word	0x0003021c

000d486c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d486c:	2200      	movs	r2, #0
   d486e:	4611      	mov	r1, r2
   d4870:	6840      	ldr	r0, [r0, #4]
   d4872:	f7ff bfa3 	b.w	d47bc <network_listening>

000d4876 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4876:	2200      	movs	r2, #0
   d4878:	4611      	mov	r1, r2
   d487a:	6840      	ldr	r0, [r0, #4]
   d487c:	f7ff bfae 	b.w	d47dc <network_get_listen_timeout>

000d4880 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4880:	2200      	movs	r2, #0
   d4882:	6840      	ldr	r0, [r0, #4]
   d4884:	f7ff bfa2 	b.w	d47cc <network_set_listen_timeout>

000d4888 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4888:	2200      	movs	r2, #0
   d488a:	f081 0101 	eor.w	r1, r1, #1
   d488e:	6840      	ldr	r0, [r0, #4]
   d4890:	f7ff bf8c 	b.w	d47ac <network_listen>

000d4894 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4894:	2300      	movs	r3, #0
   d4896:	461a      	mov	r2, r3
   d4898:	4619      	mov	r1, r3
   d489a:	6840      	ldr	r0, [r0, #4]
   d489c:	f7ff bf7e 	b.w	d479c <network_off>

000d48a0 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d48a0:	2300      	movs	r3, #0
   d48a2:	461a      	mov	r2, r3
   d48a4:	4619      	mov	r1, r3
   d48a6:	6840      	ldr	r0, [r0, #4]
   d48a8:	f7ff bf70 	b.w	d478c <network_on>

000d48ac <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d48ac:	2200      	movs	r2, #0
   d48ae:	4611      	mov	r1, r2
   d48b0:	6840      	ldr	r0, [r0, #4]
   d48b2:	f7ff bf63 	b.w	d477c <network_ready>

000d48b6 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d48b6:	2200      	movs	r2, #0
   d48b8:	4611      	mov	r1, r2
   d48ba:	6840      	ldr	r0, [r0, #4]
   d48bc:	f7ff bf4e 	b.w	d475c <network_connecting>

000d48c0 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d48c0:	2200      	movs	r2, #0
   d48c2:	2102      	movs	r1, #2
   d48c4:	6840      	ldr	r0, [r0, #4]
   d48c6:	f7ff bf51 	b.w	d476c <network_disconnect>

000d48ca <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d48ca:	2300      	movs	r3, #0
   d48cc:	461a      	mov	r2, r3
   d48ce:	6840      	ldr	r0, [r0, #4]
   d48d0:	f7ff bf3c 	b.w	d474c <network_connect>

000d48d4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d48d4:	4b02      	ldr	r3, [pc, #8]	; (d48e0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d48d6:	2203      	movs	r2, #3
   d48d8:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d48da:	4a02      	ldr	r2, [pc, #8]	; (d48e4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d48dc:	601a      	str	r2, [r3, #0]
   d48de:	4770      	bx	lr
   d48e0:	2003e3c8 	.word	0x2003e3c8
   d48e4:	000d6b5c 	.word	0x000d6b5c

000d48e8 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d48e8:	4770      	bx	lr

000d48ea <_ZN8SPIClassD0Ev>:
   d48ea:	b510      	push	{r4, lr}
   d48ec:	2110      	movs	r1, #16
   d48ee:	4604      	mov	r4, r0
   d48f0:	f001 f92b 	bl	d5b4a <_ZdlPvj>
   d48f4:	4620      	mov	r0, r4
   d48f6:	bd10      	pop	{r4, pc}

000d48f8 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d48f8:	b570      	push	{r4, r5, r6, lr}
   d48fa:	4b08      	ldr	r3, [pc, #32]	; (d491c <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d48fc:	6003      	str	r3, [r0, #0]
   d48fe:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d4900:	2500      	movs	r5, #0
   d4902:	460e      	mov	r6, r1
   d4904:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d4908:	f7ff fe1c 	bl	d4544 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d490c:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d490e:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d4910:	f7ff fde8 	bl	d44e4 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d4914:	60a5      	str	r5, [r4, #8]
}
   d4916:	4620      	mov	r0, r4
   d4918:	bd70      	pop	{r4, r5, r6, pc}
   d491a:	bf00      	nop
   d491c:	000d6b90 	.word	0x000d6b90

000d4920 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d4920:	4b04      	ldr	r3, [pc, #16]	; (d4934 <_GLOBAL__sub_I_System+0x14>)
   d4922:	2000      	movs	r0, #0
   d4924:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d4928:	7018      	strb	r0, [r3, #0]
   d492a:	8058      	strh	r0, [r3, #2]
   d492c:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d492e:	f7ff bed9 	b.w	d46e4 <set_system_mode>
   d4932:	bf00      	nop
   d4934:	2003e3d0 	.word	0x2003e3d0

000d4938 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d4938:	b510      	push	{r4, lr}
   d493a:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d493c:	f002 f8e1 	bl	d6b02 <strlen>
   d4940:	3801      	subs	r0, #1
   d4942:	1823      	adds	r3, r4, r0
   d4944:	4620      	mov	r0, r4
	while(i<j){
   d4946:	4298      	cmp	r0, r3
   d4948:	d206      	bcs.n	d4958 <_Z11str_reversePc+0x20>
		c = *i;
   d494a:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d494c:	7819      	ldrb	r1, [r3, #0]
   d494e:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d4952:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   d4956:	e7f6      	b.n	d4946 <_Z11str_reversePc+0xe>
   d4958:	bd10      	pop	{r4, pc}

000d495a <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d495a:	b570      	push	{r4, r5, r6, lr}
   d495c:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d495e:	1e91      	subs	r1, r2, #2
   d4960:	2922      	cmp	r1, #34	; 0x22
   d4962:	d820      	bhi.n	d49a6 <ultoa+0x4c>
   d4964:	4625      	mov	r5, r4
   d4966:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d4968:	b910      	cbnz	r0, d4970 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d496a:	4423      	add	r3, r4
            *ptr++ = '0';
   d496c:	2230      	movs	r2, #48	; 0x30
   d496e:	e00e      	b.n	d498e <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d4970:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   d4974:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   d4978:	b2c1      	uxtb	r1, r0
   d497a:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   d497e:	2809      	cmp	r0, #9
                *ptr += '0';
   d4980:	bf94      	ite	ls
   d4982:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d4984:	3157      	addhi	r1, #87	; 0x57
   d4986:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   d498a:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d498c:	e7eb      	b.n	d4966 <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d498e:	4299      	cmp	r1, r3
   d4990:	d202      	bcs.n	d4998 <ultoa+0x3e>
            *ptr++ = '0';
   d4992:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d4996:	e7fa      	b.n	d498e <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   d4998:	2300      	movs	r3, #0
	str_reverse(buffer);
   d499a:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   d499c:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   d499e:	f7ff ffcb 	bl	d4938 <_Z11str_reversePc>
	return buffer;
   d49a2:	4620      	mov	r0, r4
   d49a4:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   d49a6:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   d49a8:	bd70      	pop	{r4, r5, r6, pc}
	...

000d49ac <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   d49ac:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d49b0:	ec59 8b10 	vmov	r8, r9, d0
   d49b4:	4607      	mov	r7, r0
   d49b6:	460e      	mov	r6, r1
    bool negative = val<0;
    if (negative) {
   d49b8:	2200      	movs	r2, #0
   d49ba:	2300      	movs	r3, #0
   d49bc:	ee10 0a10 	vmov	r0, s0
   d49c0:	4649      	mov	r1, r9
   d49c2:	f001 fe39 	bl	d6638 <__aeabi_dcmplt>
   d49c6:	b128      	cbz	r0, d49d4 <_Z4dtoadhPc+0x28>
        val = -val;
   d49c8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   d49cc:	4699      	mov	r9, r3
        *sout++ = '-';
   d49ce:	232d      	movs	r3, #45	; 0x2d
   d49d0:	7033      	strb	r3, [r6, #0]
   d49d2:	3601      	adds	r6, #1
   d49d4:	2300      	movs	r3, #0
    }
    long scale = 1;
   d49d6:	2401      	movs	r4, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   d49d8:	220a      	movs	r2, #10
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
   d49da:	b2d9      	uxtb	r1, r3
   d49dc:	428f      	cmp	r7, r1
   d49de:	d902      	bls.n	d49e6 <_Z4dtoadhPc+0x3a>
        scale *= 10;
   d49e0:	4354      	muls	r4, r2
   d49e2:	3301      	adds	r3, #1
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
   d49e4:	e7f9      	b.n	d49da <_Z4dtoadhPc+0x2e>
        scale *= 10;
    val *= scale;   // capture all the significant digits
   d49e6:	4620      	mov	r0, r4
   d49e8:	f001 fb4e 	bl	d6088 <__aeabi_i2d>
   d49ec:	4642      	mov	r2, r8
   d49ee:	464b      	mov	r3, r9
   d49f0:	f001 fbb0 	bl	d6154 <__aeabi_dmul>
   d49f4:	4682      	mov	sl, r0
   d49f6:	468b      	mov	fp, r1
    uint64_t fixed = uint64_t(val);
   d49f8:	f001 fe7e 	bl	d66f8 <__aeabi_d2ulz>
   d49fc:	4680      	mov	r8, r0
   d49fe:	4689      	mov	r9, r1
    if ((val-fixed)>=0.5)    // round last digit
   d4a00:	f001 fb72 	bl	d60e8 <__aeabi_ul2d>
   d4a04:	4602      	mov	r2, r0
   d4a06:	460b      	mov	r3, r1
   d4a08:	4650      	mov	r0, sl
   d4a0a:	4659      	mov	r1, fp
   d4a0c:	f001 f9ee 	bl	d5dec <__aeabi_dsub>
   d4a10:	2200      	movs	r2, #0
   d4a12:	4b17      	ldr	r3, [pc, #92]	; (d4a70 <_Z4dtoadhPc+0xc4>)
   d4a14:	f001 fe24 	bl	d6660 <__aeabi_dcmpge>
   d4a18:	b118      	cbz	r0, d4a22 <_Z4dtoadhPc+0x76>
        fixed++;
   d4a1a:	f118 0801 	adds.w	r8, r8, #1
   d4a1e:	f149 0900 	adc.w	r9, r9, #0

    unsigned long first = (unsigned long)(fixed / scale);
   d4a22:	17e5      	asrs	r5, r4, #31
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   d4a24:	4622      	mov	r2, r4
   d4a26:	462b      	mov	r3, r5
   d4a28:	4640      	mov	r0, r8
   d4a2a:	4649      	mov	r1, r9
   d4a2c:	f001 fe4c 	bl	d66c8 <__aeabi_uldivmod>
   d4a30:	2301      	movs	r3, #1
   d4a32:	220a      	movs	r2, #10
   d4a34:	4631      	mov	r1, r6
   d4a36:	f7ff ff90 	bl	d495a <ultoa>
    if (prec) {
   d4a3a:	b1af      	cbz	r7, d4a68 <_Z4dtoadhPc+0xbc>
        sout += strlen(sout);
   d4a3c:	4630      	mov	r0, r6
   d4a3e:	f002 f860 	bl	d6b02 <strlen>
        *sout++ = '.';
   d4a42:	232e      	movs	r3, #46	; 0x2e
   d4a44:	5433      	strb	r3, [r6, r0]
        ultoa(second, sout, 10, prec);
   d4a46:	3001      	adds	r0, #1
   d4a48:	4406      	add	r6, r0
   d4a4a:	4622      	mov	r2, r4
   d4a4c:	462b      	mov	r3, r5
   d4a4e:	4640      	mov	r0, r8
   d4a50:	4649      	mov	r1, r9
   d4a52:	f001 fe39 	bl	d66c8 <__aeabi_uldivmod>
   d4a56:	463b      	mov	r3, r7
   d4a58:	4610      	mov	r0, r2
   d4a5a:	4631      	mov	r1, r6
   d4a5c:	220a      	movs	r2, #10
    }
}
   d4a5e:	b001      	add	sp, #4
   d4a60:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    ultoa(first, sout, 10, 1);
    if (prec) {
        sout += strlen(sout);
        *sout++ = '.';
        ultoa(second, sout, 10, prec);
   d4a64:	f7ff bf79 	b.w	d495a <ultoa>
    }
}
   d4a68:	b001      	add	sp, #4
   d4a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4a6e:	bf00      	nop
   d4a70:	3fe00000 	.word	0x3fe00000

000d4a74 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d4a74:	b510      	push	{r4, lr}
   d4a76:	4604      	mov	r4, r0
{
	free(buffer);
   d4a78:	6800      	ldr	r0, [r0, #0]
   d4a7a:	f7ff fed7 	bl	d482c <free>
}
   d4a7e:	4620      	mov	r0, r4
   d4a80:	bd10      	pop	{r4, pc}

000d4a82 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d4a82:	b510      	push	{r4, lr}
   d4a84:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d4a86:	6800      	ldr	r0, [r0, #0]
   d4a88:	b108      	cbz	r0, d4a8e <_ZN6String10invalidateEv+0xc>
   d4a8a:	f7ff fecf 	bl	d482c <free>
	buffer = NULL;
   d4a8e:	2300      	movs	r3, #0
   d4a90:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d4a92:	60a3      	str	r3, [r4, #8]
   d4a94:	6063      	str	r3, [r4, #4]
   d4a96:	bd10      	pop	{r4, pc}

000d4a98 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d4a98:	b538      	push	{r3, r4, r5, lr}
   d4a9a:	4604      	mov	r4, r0
   d4a9c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d4a9e:	6800      	ldr	r0, [r0, #0]
   d4aa0:	3101      	adds	r1, #1
   d4aa2:	f7ff fecb 	bl	d483c <realloc>
	if (newbuffer) {
   d4aa6:	b110      	cbz	r0, d4aae <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d4aa8:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d4aac:	2001      	movs	r0, #1
	}
	return 0;
}
   d4aae:	bd38      	pop	{r3, r4, r5, pc}

000d4ab0 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4ab0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d4ab2:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4ab4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d4ab6:	b113      	cbz	r3, d4abe <_ZN6String7reserveEj+0xe>
   d4ab8:	6843      	ldr	r3, [r0, #4]
   d4aba:	428b      	cmp	r3, r1
   d4abc:	d207      	bcs.n	d4ace <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d4abe:	4620      	mov	r0, r4
   d4ac0:	f7ff ffea 	bl	d4a98 <_ZN6String12changeBufferEj>
   d4ac4:	b120      	cbz	r0, d4ad0 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d4ac6:	68a3      	ldr	r3, [r4, #8]
   d4ac8:	b90b      	cbnz	r3, d4ace <_ZN6String7reserveEj+0x1e>
   d4aca:	6822      	ldr	r2, [r4, #0]
   d4acc:	7013      	strb	r3, [r2, #0]
   d4ace:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d4ad0:	bd10      	pop	{r4, pc}

000d4ad2 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4ad2:	b570      	push	{r4, r5, r6, lr}
   d4ad4:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d4ad6:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4ad8:	4604      	mov	r4, r0
   d4ada:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d4adc:	f7ff ffe8 	bl	d4ab0 <_ZN6String7reserveEj>
   d4ae0:	b918      	cbnz	r0, d4aea <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d4ae2:	4620      	mov	r0, r4
   d4ae4:	f7ff ffcd 	bl	d4a82 <_ZN6String10invalidateEv>
		return *this;
   d4ae8:	e009      	b.n	d4afe <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d4aea:	462a      	mov	r2, r5
   d4aec:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d4aee:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d4af0:	6820      	ldr	r0, [r4, #0]
   d4af2:	f001 ffa7 	bl	d6a44 <memcpy>
	buffer[len] = 0;
   d4af6:	6822      	ldr	r2, [r4, #0]
   d4af8:	68a3      	ldr	r3, [r4, #8]
   d4afa:	2100      	movs	r1, #0
   d4afc:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d4afe:	4620      	mov	r0, r4
   d4b00:	bd70      	pop	{r4, r5, r6, pc}

000d4b02 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d4b02:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4b04:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d4b06:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4b08:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d4b0a:	6043      	str	r3, [r0, #4]
	len = 0;
   d4b0c:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4b0e:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d4b10:	460d      	mov	r5, r1
   d4b12:	b139      	cbz	r1, d4b24 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d4b14:	4608      	mov	r0, r1
   d4b16:	f001 fff4 	bl	d6b02 <strlen>
   d4b1a:	4629      	mov	r1, r5
   d4b1c:	4602      	mov	r2, r0
   d4b1e:	4620      	mov	r0, r4
   d4b20:	f7ff ffd7 	bl	d4ad2 <_ZN6String4copyEPKcj>
}
   d4b24:	4620      	mov	r0, r4
   d4b26:	bd38      	pop	{r3, r4, r5, pc}

000d4b28 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d4b28:	b538      	push	{r3, r4, r5, lr}
   d4b2a:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d4b2c:	460c      	mov	r4, r1
   d4b2e:	b141      	cbz	r1, d4b42 <_ZN6StringaSEPKc+0x1a>
   d4b30:	4608      	mov	r0, r1
   d4b32:	f001 ffe6 	bl	d6b02 <strlen>
   d4b36:	4621      	mov	r1, r4
   d4b38:	4602      	mov	r2, r0
   d4b3a:	4628      	mov	r0, r5
   d4b3c:	f7ff ffc9 	bl	d4ad2 <_ZN6String4copyEPKcj>
   d4b40:	e001      	b.n	d4b46 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d4b42:	f7ff ff9e 	bl	d4a82 <_ZN6String10invalidateEv>

	return *this;
}
   d4b46:	4628      	mov	r0, r5
   d4b48:	bd38      	pop	{r3, r4, r5, pc}

000d4b4a <_ZN6StringC1Efi>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
   d4b4a:	b530      	push	{r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4b4c:	2300      	movs	r3, #0
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
   d4b4e:	b08b      	sub	sp, #44	; 0x2c
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4b50:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d4b52:	6043      	str	r3, [r0, #4]
	len = 0;
   d4b54:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4b56:	7303      	strb	r3, [r0, #12]
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
   d4b58:	4604      	mov	r4, r0
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
   d4b5a:	ee10 0a10 	vmov	r0, s0
   d4b5e:	b2cd      	uxtb	r5, r1
   d4b60:	f001 faa4 	bl	d60ac <__aeabi_f2d>
   d4b64:	ec41 0b10 	vmov	d0, r0, r1
   d4b68:	a901      	add	r1, sp, #4
   d4b6a:	4628      	mov	r0, r5
   d4b6c:	f7ff ff1e 	bl	d49ac <_Z4dtoadhPc>
        *this = buf;
   d4b70:	a901      	add	r1, sp, #4
   d4b72:	4620      	mov	r0, r4
   d4b74:	f7ff ffd8 	bl	d4b28 <_ZN6StringaSEPKc>
}
   d4b78:	4620      	mov	r0, r4
   d4b7a:	b00b      	add	sp, #44	; 0x2c
   d4b7c:	bd30      	pop	{r4, r5, pc}

000d4b7e <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d4b7e:	b570      	push	{r4, r5, r6, lr}
   d4b80:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d4b82:	460e      	mov	r6, r1
   d4b84:	b909      	cbnz	r1, d4b8a <_ZN6String6concatEPKcj+0xc>
   d4b86:	2000      	movs	r0, #0
   d4b88:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d4b8a:	b16a      	cbz	r2, d4ba8 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d4b8c:	6883      	ldr	r3, [r0, #8]
   d4b8e:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d4b90:	4629      	mov	r1, r5
   d4b92:	f7ff ff8d 	bl	d4ab0 <_ZN6String7reserveEj>
   d4b96:	2800      	cmp	r0, #0
   d4b98:	d0f5      	beq.n	d4b86 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d4b9a:	6820      	ldr	r0, [r4, #0]
   d4b9c:	68a3      	ldr	r3, [r4, #8]
   d4b9e:	4631      	mov	r1, r6
   d4ba0:	4418      	add	r0, r3
   d4ba2:	f001 ff8b 	bl	d6abc <strcpy>
	len = newlen;
   d4ba6:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d4ba8:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d4baa:	bd70      	pop	{r4, r5, r6, pc}

000d4bac <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d4bac:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d4bae:	688a      	ldr	r2, [r1, #8]
   d4bb0:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d4bb2:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d4bb4:	f7ff ffe3 	bl	d4b7e <_ZN6String6concatEPKcj>
   d4bb8:	b910      	cbnz	r0, d4bc0 <_ZplRK15StringSumHelperRK6String+0x14>
   d4bba:	4620      	mov	r0, r4
   d4bbc:	f7ff ff61 	bl	d4a82 <_ZN6String10invalidateEv>
	return a;
}
   d4bc0:	4620      	mov	r0, r4
   d4bc2:	bd10      	pop	{r4, pc}

000d4bc4 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d4bc4:	b538      	push	{r3, r4, r5, lr}
   d4bc6:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d4bc8:	460d      	mov	r5, r1
   d4bca:	b141      	cbz	r1, d4bde <_ZplRK15StringSumHelperPKc+0x1a>
   d4bcc:	4608      	mov	r0, r1
   d4bce:	f001 ff98 	bl	d6b02 <strlen>
   d4bd2:	4629      	mov	r1, r5
   d4bd4:	4602      	mov	r2, r0
   d4bd6:	4620      	mov	r0, r4
   d4bd8:	f7ff ffd1 	bl	d4b7e <_ZN6String6concatEPKcj>
   d4bdc:	b910      	cbnz	r0, d4be4 <_ZplRK15StringSumHelperPKc+0x20>
   d4bde:	4620      	mov	r0, r4
   d4be0:	f7ff ff4f 	bl	d4a82 <_ZN6String10invalidateEv>
	return a;
}
   d4be4:	4620      	mov	r0, r4
   d4be6:	bd38      	pop	{r3, r4, r5, pc}

000d4be8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.110>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4be8:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4bea:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4bec:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4bee:	689b      	ldr	r3, [r3, #8]
   d4bf0:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4bf2:	68a3      	ldr	r3, [r4, #8]
   d4bf4:	3b01      	subs	r3, #1
   d4bf6:	60a3      	str	r3, [r4, #8]
   d4bf8:	b92b      	cbnz	r3, d4c06 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.110+0x1e>
            _M_destroy();
   d4bfa:	6823      	ldr	r3, [r4, #0]
   d4bfc:	4620      	mov	r0, r4
   d4bfe:	68db      	ldr	r3, [r3, #12]
        }
    }
   d4c00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d4c04:	4718      	bx	r3
   d4c06:	bd10      	pop	{r4, pc}

000d4c08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d4c08:	680b      	ldr	r3, [r1, #0]
   d4c0a:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d4c0c:	b113      	cbz	r3, d4c14 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d4c0e:	685a      	ldr	r2, [r3, #4]
   d4c10:	3201      	adds	r2, #1
   d4c12:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d4c14:	4770      	bx	lr

000d4c16 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4c16:	b510      	push	{r4, lr}
   d4c18:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d4c1a:	6800      	ldr	r0, [r0, #0]
   d4c1c:	b128      	cbz	r0, d4c2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4c1e:	6843      	ldr	r3, [r0, #4]
   d4c20:	3b01      	subs	r3, #1
   d4c22:	6043      	str	r3, [r0, #4]
   d4c24:	b90b      	cbnz	r3, d4c2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d4c26:	f7ff ffdf 	bl	d4be8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.110>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4c2a:	4620      	mov	r0, r4
   d4c2c:	bd10      	pop	{r4, pc}
	...

000d4c30 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4c30:	4802      	ldr	r0, [pc, #8]	; (d4c3c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d4c32:	2300      	movs	r3, #0
   d4c34:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4c36:	f7ff bc8d 	b.w	d4554 <os_mutex_recursive_create>
   d4c3a:	bf00      	nop
   d4c3c:	2003e3d8 	.word	0x2003e3d8

000d4c40 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4c42:	4606      	mov	r6, r0
   d4c44:	460d      	mov	r5, r1
   d4c46:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d4c48:	2400      	movs	r4, #0
  while (size--) {
   d4c4a:	42bd      	cmp	r5, r7
   d4c4c:	d00c      	beq.n	d4c68 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4c4e:	6833      	ldr	r3, [r6, #0]
   d4c50:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4c54:	689b      	ldr	r3, [r3, #8]
   d4c56:	4630      	mov	r0, r6
   d4c58:	4798      	blx	r3
     if (chunk>=0)
   d4c5a:	2800      	cmp	r0, #0
   d4c5c:	db01      	blt.n	d4c62 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4c5e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d4c60:	e7f3      	b.n	d4c4a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4c62:	2c00      	cmp	r4, #0
   d4c64:	bf08      	it	eq
   d4c66:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d4c68:	4620      	mov	r0, r4
   d4c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4c6c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4c6c:	b570      	push	{r4, r5, r6, lr}
   d4c6e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d4c70:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d4c72:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d4c74:	b149      	cbz	r1, d4c8a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d4c76:	f001 ff44 	bl	d6b02 <strlen>
   d4c7a:	682b      	ldr	r3, [r5, #0]
   d4c7c:	4602      	mov	r2, r0
   d4c7e:	4621      	mov	r1, r4
   d4c80:	4628      	mov	r0, r5
   d4c82:	68db      	ldr	r3, [r3, #12]
    }
   d4c84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4c88:	4718      	bx	r3
    }
   d4c8a:	bd70      	pop	{r4, r5, r6, pc}

000d4c8c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4c8c:	6803      	ldr	r3, [r0, #0]
   d4c8e:	689b      	ldr	r3, [r3, #8]
   d4c90:	4718      	bx	r3

000d4c92 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4c92:	b530      	push	{r4, r5, lr}
   d4c94:	b08b      	sub	sp, #44	; 0x2c
   d4c96:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4c98:	2100      	movs	r1, #0
   d4c9a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4c9e:	2a01      	cmp	r2, #1
   d4ca0:	bf98      	it	ls
   d4ca2:	220a      	movls	r2, #10
   d4ca4:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d4ca8:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d4cac:	fb05 3312 	mls	r3, r5, r2, r3
   d4cb0:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4cb4:	2b09      	cmp	r3, #9
   d4cb6:	bf94      	ite	ls
   d4cb8:	3330      	addls	r3, #48	; 0x30
   d4cba:	3337      	addhi	r3, #55	; 0x37
   d4cbc:	b2db      	uxtb	r3, r3
   d4cbe:	4621      	mov	r1, r4
   d4cc0:	f804 3901 	strb.w	r3, [r4], #-1
   d4cc4:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d4cc6:	2d00      	cmp	r5, #0
   d4cc8:	d1ee      	bne.n	d4ca8 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d4cca:	f7ff ffcf 	bl	d4c6c <_ZN5Print5writeEPKc>
}
   d4cce:	b00b      	add	sp, #44	; 0x2c
   d4cd0:	bd30      	pop	{r4, r5, pc}

000d4cd2 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d4cd2:	b410      	push	{r4}
  if (base == 0) return write(n);
   d4cd4:	b92a      	cbnz	r2, d4ce2 <_ZN5Print5printEmi+0x10>
   d4cd6:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d4cd8:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d4cdc:	689b      	ldr	r3, [r3, #8]
   d4cde:	b2c9      	uxtb	r1, r1
   d4ce0:	4718      	bx	r3
  else return printNumber(n, base);
   d4ce2:	b2d2      	uxtb	r2, r2
}
   d4ce4:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d4ce8:	f7ff bfd3 	b.w	d4c92 <_ZN5Print11printNumberEmh>

000d4cec <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d4cec:	f7ff bff1 	b.w	d4cd2 <_ZN5Print5printEmi>

000d4cf0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4cf0:	4b01      	ldr	r3, [pc, #4]	; (d4cf8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4cf2:	4a02      	ldr	r2, [pc, #8]	; (d4cfc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4cf4:	601a      	str	r2, [r3, #0]
   d4cf6:	4770      	bx	lr
   d4cf8:	2003e3dc 	.word	0x2003e3dc
   d4cfc:	000d6c0b 	.word	0x000d6c0b

000d4d00 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4d00:	4b02      	ldr	r3, [pc, #8]	; (d4d0c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4d02:	681a      	ldr	r2, [r3, #0]
   d4d04:	4b02      	ldr	r3, [pc, #8]	; (d4d10 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4d06:	601a      	str	r2, [r3, #0]
   d4d08:	4770      	bx	lr
   d4d0a:	bf00      	nop
   d4d0c:	2003e34c 	.word	0x2003e34c
   d4d10:	2003e3e0 	.word	0x2003e3e0

000d4d14 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4d14:	2100      	movs	r1, #0
   d4d16:	f7ff bced 	b.w	d46f4 <system_delay_ms>

000d4d1a <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4d1a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4d1c:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4d1e:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4d20:	b113      	cbz	r3, d4d28 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4d22:	2203      	movs	r2, #3
   d4d24:	4601      	mov	r1, r0
   d4d26:	4798      	blx	r3
    }
   d4d28:	4620      	mov	r0, r4
   d4d2a:	bd10      	pop	{r4, pc}

000d4d2c <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4d2c:	b510      	push	{r4, lr}
   d4d2e:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4d30:	f7ff fff3 	bl	d4d1a <_ZNSt14_Function_baseD1Ev>
   d4d34:	4620      	mov	r0, r4
   d4d36:	bd10      	pop	{r4, pc}

000d4d38 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d4d38:	b513      	push	{r0, r1, r4, lr}
   d4d3a:	460b      	mov	r3, r1
   d4d3c:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4d3e:	c803      	ldmia	r0, {r0, r1}
   d4d40:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4d44:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4d48:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4d4c:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d4d50:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d4d54:	b002      	add	sp, #8
   d4d56:	bd10      	pop	{r4, pc}

000d4d58 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4d58:	4803      	ldr	r0, [pc, #12]	; (d4d68 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4d5a:	4a04      	ldr	r2, [pc, #16]	; (d4d6c <_GLOBAL__sub_I_RGB+0x14>)
   d4d5c:	4904      	ldr	r1, [pc, #16]	; (d4d70 <_GLOBAL__sub_I_RGB+0x18>)
   d4d5e:	2300      	movs	r3, #0
   d4d60:	6083      	str	r3, [r0, #8]
   d4d62:	f000 beed 	b.w	d5b40 <__aeabi_atexit>
   d4d66:	bf00      	nop
   d4d68:	2003e3e4 	.word	0x2003e3e4
   d4d6c:	2003e3b4 	.word	0x2003e3b4
   d4d70:	000d4d2d 	.word	0x000d4d2d

000d4d74 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d4d74:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d4d76:	4b0c      	ldr	r3, [pc, #48]	; (d4da8 <serialEventRun+0x34>)
   d4d78:	b133      	cbz	r3, d4d88 <serialEventRun+0x14>
   d4d7a:	f000 fbf9 	bl	d5570 <_Z16_fetch_usbserialv>
   d4d7e:	6803      	ldr	r3, [r0, #0]
   d4d80:	691b      	ldr	r3, [r3, #16]
   d4d82:	4798      	blx	r3
   d4d84:	2800      	cmp	r0, #0
   d4d86:	dc09      	bgt.n	d4d9c <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d4d88:	4b08      	ldr	r3, [pc, #32]	; (d4dac <serialEventRun+0x38>)
   d4d8a:	b163      	cbz	r3, d4da6 <serialEventRun+0x32>
   d4d8c:	f000 fc6e 	bl	d566c <_Z22__fetch_global_Serial1v>
   d4d90:	6803      	ldr	r3, [r0, #0]
   d4d92:	691b      	ldr	r3, [r3, #16]
   d4d94:	4798      	blx	r3
   d4d96:	2800      	cmp	r0, #0
   d4d98:	dc03      	bgt.n	d4da2 <serialEventRun+0x2e>
   d4d9a:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d4d9c:	f3af 8000 	nop.w
   d4da0:	e7f2      	b.n	d4d88 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d4da2:	f3af 8000 	nop.w
   d4da6:	bd08      	pop	{r3, pc}
	...

000d4db0 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d4db0:	b508      	push	{r3, lr}
	serialEventRun();
   d4db2:	f7ff ffdf 	bl	d4d74 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4db6:	f7ff fba5 	bl	d4504 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4dba:	4b01      	ldr	r3, [pc, #4]	; (d4dc0 <_post_loop+0x10>)
   d4dbc:	6018      	str	r0, [r3, #0]
   d4dbe:	bd08      	pop	{r3, pc}
   d4dc0:	2003e734 	.word	0x2003e734

000d4dc4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4dc4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4dc6:	2300      	movs	r3, #0
   d4dc8:	9300      	str	r3, [sp, #0]
   d4dca:	461a      	mov	r2, r3
   d4dcc:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4dd0:	f7ff fcb2 	bl	d4738 <system_ctrl_set_result>
}
   d4dd4:	b003      	add	sp, #12
   d4dd6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4ddc <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d4ddc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d4dde:	8843      	ldrh	r3, [r0, #2]
   d4de0:	2b0a      	cmp	r3, #10
   d4de2:	d008      	beq.n	d4df6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4de4:	2b50      	cmp	r3, #80	; 0x50
   d4de6:	d109      	bne.n	d4dfc <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d4de8:	4b09      	ldr	r3, [pc, #36]	; (d4e10 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d4dea:	681b      	ldr	r3, [r3, #0]
   d4dec:	b13b      	cbz	r3, d4dfe <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d4dee:	b003      	add	sp, #12
   d4df0:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d4df4:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d4df6:	f7ff ffe5 	bl	d4dc4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d4dfa:	e006      	b.n	d4e0a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4dfc:	2300      	movs	r3, #0
   d4dfe:	9300      	str	r3, [sp, #0]
   d4e00:	461a      	mov	r2, r3
   d4e02:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4e06:	f7ff fc97 	bl	d4738 <system_ctrl_set_result>
        break;
    }
}
   d4e0a:	b003      	add	sp, #12
   d4e0c:	f85d fb04 	ldr.w	pc, [sp], #4
   d4e10:	2003e3f4 	.word	0x2003e3f4

000d4e14 <module_user_init_hook>:

void module_user_init_hook()
{
   d4e14:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d4e16:	f7ff fb6d 	bl	d44f4 <HAL_RNG_GetRandomNumber>
   d4e1a:	4604      	mov	r4, r0
    srand(seed);
   d4e1c:	f001 fe26 	bl	d6a6c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d4e20:	4b07      	ldr	r3, [pc, #28]	; (d4e40 <module_user_init_hook+0x2c>)
   d4e22:	b113      	cbz	r3, d4e2a <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d4e24:	4620      	mov	r0, r4
   d4e26:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d4e2a:	2100      	movs	r1, #0
   d4e2c:	4804      	ldr	r0, [pc, #16]	; (d4e40 <module_user_init_hook+0x2c>)
   d4e2e:	f7ff fced 	bl	d480c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4e32:	2100      	movs	r1, #0
   d4e34:	4803      	ldr	r0, [pc, #12]	; (d4e44 <module_user_init_hook+0x30>)
}
   d4e36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4e3a:	f7ff bc73 	b.w	d4724 <system_ctrl_set_app_request_handler>
   d4e3e:	bf00      	nop
   d4e40:	00000000 	.word	0x00000000
   d4e44:	000d4ddd 	.word	0x000d4ddd

000d4e48 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4e48:	4770      	bx	lr

000d4e4a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d4e4a:	2000      	movs	r0, #0
   d4e4c:	4770      	bx	lr

000d4e4e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4e4e:	b510      	push	{r4, lr}
   d4e50:	2110      	movs	r1, #16
   d4e52:	4604      	mov	r4, r0
   d4e54:	f000 fe79 	bl	d5b4a <_ZdlPvj>
   d4e58:	4620      	mov	r0, r4
   d4e5a:	bd10      	pop	{r4, pc}

000d4e5c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d4e5c:	b508      	push	{r3, lr}
      { delete this; }
   d4e5e:	b108      	cbz	r0, d4e64 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d4e60:	f7ff fff5 	bl	d4e4e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d4e64:	bd08      	pop	{r3, pc}

000d4e66 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4e66:	2200      	movs	r2, #0
   d4e68:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d4e6a:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4e6c:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d4e70:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4e72:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d4e76:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d4e78:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4e7a:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4e7c:	680c      	ldr	r4, [r1, #0]
   d4e7e:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d4e80:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d4e82:	bd10      	pop	{r4, pc}

000d4e84 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d4e84:	b510      	push	{r4, lr}
   d4e86:	4604      	mov	r4, r0
    free((void*)msg_);
   d4e88:	6800      	ldr	r0, [r0, #0]
   d4e8a:	f7ff fccf 	bl	d482c <free>
}
   d4e8e:	4620      	mov	r0, r4
   d4e90:	bd10      	pop	{r4, pc}

000d4e92 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d4e92:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d4e94:	68c4      	ldr	r4, [r0, #12]
   d4e96:	b1f4      	cbz	r4, d4ed6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d4e98:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d4e9a:	2b02      	cmp	r3, #2
   d4e9c:	d103      	bne.n	d4ea6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d4e9e:	f104 000c 	add.w	r0, r4, #12
   d4ea2:	f7ff ffef 	bl	d4e84 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d4ea6:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d4ea8:	b135      	cbz	r5, d4eb8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4eaa:	4628      	mov	r0, r5
   d4eac:	f7ff ff35 	bl	d4d1a <_ZNSt14_Function_baseD1Ev>
   d4eb0:	2110      	movs	r1, #16
   d4eb2:	4628      	mov	r0, r5
   d4eb4:	f000 fe49 	bl	d5b4a <_ZdlPvj>
   d4eb8:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d4eba:	b135      	cbz	r5, d4eca <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d4ebc:	4628      	mov	r0, r5
   d4ebe:	f7ff ff2c 	bl	d4d1a <_ZNSt14_Function_baseD1Ev>
   d4ec2:	2110      	movs	r1, #16
   d4ec4:	4628      	mov	r0, r5
   d4ec6:	f000 fe40 	bl	d5b4a <_ZdlPvj>
   d4eca:	4620      	mov	r0, r4
   d4ecc:	2114      	movs	r1, #20
   d4ece:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4ed2:	f000 be3a 	b.w	d5b4a <_ZdlPvj>
   d4ed6:	bd38      	pop	{r3, r4, r5, pc}

000d4ed8 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d4ed8:	b513      	push	{r0, r1, r4, lr}
   d4eda:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d4edc:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d4ee0:	2300      	movs	r3, #0
   d4ee2:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4ee4:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4ee6:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d4ee8:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4eea:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d4eec:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4eee:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4ef0:	f7ff fe91 	bl	d4c16 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4ef4:	4620      	mov	r0, r4
   d4ef6:	b002      	add	sp, #8
   d4ef8:	bd10      	pop	{r4, pc}

000d4efa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d4efa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4efc:	460c      	mov	r4, r1
   d4efe:	ad02      	add	r5, sp, #8
   d4f00:	f854 3b04 	ldr.w	r3, [r4], #4
   d4f04:	f845 3d08 	str.w	r3, [r5, #-8]!
   d4f08:	4606      	mov	r6, r0
   d4f0a:	460f      	mov	r7, r1
   d4f0c:	a801      	add	r0, sp, #4
   d4f0e:	4621      	mov	r1, r4
   d4f10:	f7ff fe7a 	bl	d4c08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d4f14:	4629      	mov	r1, r5
   d4f16:	4630      	mov	r0, r6
   d4f18:	f7ff ffde 	bl	d4ed8 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4f1c:	a801      	add	r0, sp, #4
   d4f1e:	f7ff fe7a 	bl	d4c16 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4f22:	4620      	mov	r0, r4
   d4f24:	f7ff fe77 	bl	d4c16 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d4f28:	4638      	mov	r0, r7
   d4f2a:	2108      	movs	r1, #8
   d4f2c:	f000 fe0d 	bl	d5b4a <_ZdlPvj>
        return p;
    }
   d4f30:	4630      	mov	r0, r6
   d4f32:	b003      	add	sp, #12
   d4f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d4f38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d4f38:	b538      	push	{r3, r4, r5, lr}
   d4f3a:	2300      	movs	r3, #0
   d4f3c:	4604      	mov	r4, r0
   d4f3e:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4f40:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d4f42:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4f44:	f7ff f8a7 	bl	d4096 <_Znwj>
   d4f48:	b128      	cbz	r0, d4f56 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d4f4a:	2301      	movs	r3, #1
   d4f4c:	6043      	str	r3, [r0, #4]
   d4f4e:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d4f50:	4b02      	ldr	r3, [pc, #8]	; (d4f5c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d4f52:	6003      	str	r3, [r0, #0]
   d4f54:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4f56:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d4f58:	4620      	mov	r0, r4
   d4f5a:	bd38      	pop	{r3, r4, r5, pc}
   d4f5c:	000d6cac 	.word	0x000d6cac

000d4f60 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4f60:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d4f62:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4f64:	b90a      	cbnz	r2, d4f6a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d4f66:	f000 fdf2 	bl	d5b4e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4f6a:	68c3      	ldr	r3, [r0, #12]
    }
   d4f6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4f70:	4718      	bx	r3

000d4f72 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4f72:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4f74:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4f76:	f100 0110 	add.w	r1, r0, #16
   d4f7a:	f7ff fff1 	bl	d4f60 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d4f7e:	bd08      	pop	{r3, pc}

000d4f80 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4f80:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d4f82:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4f84:	b90a      	cbnz	r2, d4f8a <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d4f86:	f000 fde2 	bl	d5b4e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4f8a:	68c3      	ldr	r3, [r0, #12]
    }
   d4f8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4f90:	4718      	bx	r3

000d4f92 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4f92:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4f94:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4f96:	f100 0110 	add.w	r1, r0, #16
   d4f9a:	f7ff fff1 	bl	d4f80 <_ZNKSt8functionIFvRKbEEclES1_>
   d4f9e:	bd08      	pop	{r3, pc}

000d4fa0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4fa0:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4fa2:	2300      	movs	r3, #0
   d4fa4:	6083      	str	r3, [r0, #8]
   d4fa6:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4fa8:	4604      	mov	r4, r0
   d4faa:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d4fac:	b12b      	cbz	r3, d4fba <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4fae:	2202      	movs	r2, #2
   d4fb0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4fb2:	68eb      	ldr	r3, [r5, #12]
   d4fb4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4fb6:	68ab      	ldr	r3, [r5, #8]
   d4fb8:	60a3      	str	r3, [r4, #8]
	}
    }
   d4fba:	4620      	mov	r0, r4
   d4fbc:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4fc0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d4fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4fc2:	b089      	sub	sp, #36	; 0x24
   d4fc4:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d4fc6:	4668      	mov	r0, sp
   d4fc8:	f7ff ff4d 	bl	d4e66 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d4fcc:	2300      	movs	r3, #0
   d4fce:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d4fd2:	f04f 0202 	mov.w	r2, #2
   d4fd6:	e8d4 3f4f 	ldrexb	r3, [r4]
   d4fda:	2b00      	cmp	r3, #0
   d4fdc:	d103      	bne.n	d4fe6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d4fde:	e8c4 2f41 	strexb	r1, r2, [r4]
   d4fe2:	2900      	cmp	r1, #0
   d4fe4:	d1f7      	bne.n	d4fd6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d4fe6:	d002      	beq.n	d4fee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d4fe8:	f88d 3008 	strb.w	r3, [sp, #8]
   d4fec:	e063      	b.n	d50b6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d4fee:	f114 050c 	adds.w	r5, r4, #12
   d4ff2:	d003      	beq.n	d4ffc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d4ff4:	4669      	mov	r1, sp
   d4ff6:	4628      	mov	r0, r5
   d4ff8:	f7ff ff35 	bl	d4e66 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d4ffc:	f3bf 8f5f 	dmb	sy
   d5000:	2301      	movs	r3, #1
   d5002:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d5004:	2000      	movs	r0, #0
   d5006:	f104 0308 	add.w	r3, r4, #8
   d500a:	f3bf 8f5f 	dmb	sy
   d500e:	e853 6f00 	ldrex	r6, [r3]
   d5012:	e843 0200 	strex	r2, r0, [r3]
   d5016:	2a00      	cmp	r2, #0
   d5018:	d1f9      	bne.n	d500e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d501a:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d501e:	2e00      	cmp	r6, #0
   d5020:	d049      	beq.n	d50b6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5022:	f7ff fb6f 	bl	d4704 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d5026:	b120      	cbz	r0, d5032 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5028:	4629      	mov	r1, r5
   d502a:	4630      	mov	r0, r6
   d502c:	f7ff ff98 	bl	d4f60 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5030:	e03a      	b.n	d50a8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5032:	4631      	mov	r1, r6
   d5034:	a802      	add	r0, sp, #8
   d5036:	f7ff ffb3 	bl	d4fa0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d503a:	68e0      	ldr	r0, [r4, #12]
   d503c:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5040:	b108      	cbz	r0, d5046 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d5042:	f001 fd43 	bl	d6acc <strdup>
   d5046:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5048:	2010      	movs	r0, #16
   d504a:	f8ad 501c 	strh.w	r5, [sp, #28]
   d504e:	f7ff f822 	bl	d4096 <_Znwj>
   d5052:	4605      	mov	r5, r0
   d5054:	b1e8      	cbz	r0, d5092 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5056:	2700      	movs	r7, #0
   d5058:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d505a:	2018      	movs	r0, #24
   d505c:	f7ff f81b 	bl	d4096 <_Znwj>
   d5060:	4604      	mov	r4, r0
   d5062:	b188      	cbz	r0, d5088 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5064:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5066:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5068:	a802      	add	r0, sp, #8
   d506a:	f7ff fe65 	bl	d4d38 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d506e:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5070:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5072:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5074:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5076:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5078:	a906      	add	r1, sp, #24
   d507a:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d507c:	60e3      	str	r3, [r4, #12]
   d507e:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5082:	9205      	str	r2, [sp, #20]
   d5084:	f7ff feef 	bl	d4e66 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5088:	4b0d      	ldr	r3, [pc, #52]	; (d50c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d508a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d508c:	4b0d      	ldr	r3, [pc, #52]	; (d50c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d508e:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5090:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d5092:	a806      	add	r0, sp, #24
   d5094:	f7ff fef6 	bl	d4e84 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5098:	a802      	add	r0, sp, #8
   d509a:	f7ff fe3e 	bl	d4d1a <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d509e:	2200      	movs	r2, #0
   d50a0:	4629      	mov	r1, r5
   d50a2:	4809      	ldr	r0, [pc, #36]	; (d50c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d50a4:	f7ff fb36 	bl	d4714 <application_thread_invoke>
   d50a8:	4630      	mov	r0, r6
   d50aa:	f7ff fe36 	bl	d4d1a <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d50ae:	2110      	movs	r1, #16
   d50b0:	4630      	mov	r0, r6
   d50b2:	f000 fd4a 	bl	d5b4a <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d50b6:	4668      	mov	r0, sp
   d50b8:	f7ff fee4 	bl	d4e84 <_ZN8particle5ErrorD1Ev>
    }
   d50bc:	b009      	add	sp, #36	; 0x24
   d50be:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d50c0:	000d4f73 	.word	0x000d4f73
   d50c4:	000d51e9 	.word	0x000d51e9
   d50c8:	000d56b9 	.word	0x000d56b9

000d50cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d50cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d50d0:	b08b      	sub	sp, #44	; 0x2c
   d50d2:	4606      	mov	r6, r0
   d50d4:	460f      	mov	r7, r1
   d50d6:	4690      	mov	r8, r2
   d50d8:	4699      	mov	r9, r3
   d50da:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d50de:	f7ff fb85 	bl	d47ec <spark_cloud_flag_connected>
   d50e2:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
   d50e4:	4683      	mov	fp, r0
   d50e6:	bb30      	cbnz	r0, d5136 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d50e8:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d50ec:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d50ee:	a905      	add	r1, sp, #20
   d50f0:	4628      	mov	r0, r5
   d50f2:	f8ad 3018 	strh.w	r3, [sp, #24]
   d50f6:	f7ff feb6 	bl	d4e66 <_ZN8particle5ErrorC1EOS0_>
   d50fa:	2014      	movs	r0, #20
   d50fc:	f7fe ffcb 	bl	d4096 <_Znwj>
   d5100:	4604      	mov	r4, r0
   d5102:	b158      	cbz	r0, d511c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d5104:	2302      	movs	r3, #2
   d5106:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5108:	2301      	movs	r3, #1
   d510a:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d510c:	f8c0 b004 	str.w	fp, [r0, #4]
   d5110:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d5114:	4629      	mov	r1, r5
   d5116:	300c      	adds	r0, #12
   d5118:	f7ff fea5 	bl	d4e66 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d511c:	4630      	mov	r0, r6
   d511e:	4621      	mov	r1, r4
   d5120:	f840 4b04 	str.w	r4, [r0], #4
   d5124:	f7ff ff08 	bl	d4f38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5128:	4628      	mov	r0, r5
   d512a:	f7ff feab 	bl	d4e84 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d512e:	a805      	add	r0, sp, #20
   d5130:	f7ff fea8 	bl	d4e84 <_ZN8particle5ErrorD1Ev>
   d5134:	e052      	b.n	d51dc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d5136:	2400      	movs	r4, #0
   d5138:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d513a:	2014      	movs	r0, #20
   d513c:	606c      	str	r4, [r5, #4]
   d513e:	60ac      	str	r4, [r5, #8]
   d5140:	9307      	str	r3, [sp, #28]
   d5142:	f7fe ffa8 	bl	d4096 <_Znwj>
   d5146:	4601      	mov	r1, r0
   d5148:	b118      	cbz	r0, d5152 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d514a:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d514c:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d514e:	6044      	str	r4, [r0, #4]
   d5150:	6084      	str	r4, [r0, #8]
   d5152:	a804      	add	r0, sp, #16
   d5154:	9103      	str	r1, [sp, #12]
   d5156:	f7ff feef 	bl	d4f38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d515a:	4b22      	ldr	r3, [pc, #136]	; (d51e4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d515c:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d515e:	2008      	movs	r0, #8
   d5160:	f7fe ff99 	bl	d4096 <_Znwj>
   d5164:	4604      	mov	r4, r0
   d5166:	b128      	cbz	r0, d5174 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5168:	9b03      	ldr	r3, [sp, #12]
   d516a:	f840 3b04 	str.w	r3, [r0], #4
   d516e:	a904      	add	r1, sp, #16
   d5170:	f7ff fd4a 	bl	d4c08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5174:	9500      	str	r5, [sp, #0]
   d5176:	fa5f f38a 	uxtb.w	r3, sl
   d517a:	464a      	mov	r2, r9
   d517c:	4641      	mov	r1, r8
   d517e:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d5180:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5182:	f7ff fb3b 	bl	d47fc <spark_send_event>
   d5186:	b920      	cbnz	r0, d5192 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d5188:	9b03      	ldr	r3, [sp, #12]
   d518a:	785b      	ldrb	r3, [r3, #1]
   d518c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d5190:	b183      	cbz	r3, d51b4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d5192:	9b03      	ldr	r3, [sp, #12]
   d5194:	9305      	str	r3, [sp, #20]
   d5196:	a904      	add	r1, sp, #16
   d5198:	a806      	add	r0, sp, #24
   d519a:	f7ff fd35 	bl	d4c08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d519e:	a905      	add	r1, sp, #20
   d51a0:	4630      	mov	r0, r6
   d51a2:	f7ff fe99 	bl	d4ed8 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d51a6:	a806      	add	r0, sp, #24
   d51a8:	f7ff fd35 	bl	d4c16 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d51ac:	a804      	add	r0, sp, #16
   d51ae:	f7ff fd32 	bl	d4c16 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d51b2:	e013      	b.n	d51dc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d51b4:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d51b8:	a905      	add	r1, sp, #20
   d51ba:	a803      	add	r0, sp, #12
   d51bc:	9205      	str	r2, [sp, #20]
   d51be:	f8ad 3018 	strh.w	r3, [sp, #24]
   d51c2:	f7ff fefd 	bl	d4fc0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d51c6:	a805      	add	r0, sp, #20
   d51c8:	f7ff fe5c 	bl	d4e84 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d51cc:	a805      	add	r0, sp, #20
   d51ce:	9909      	ldr	r1, [sp, #36]	; 0x24
   d51d0:	f7ff fe93 	bl	d4efa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d51d4:	a806      	add	r0, sp, #24
   d51d6:	f7ff fd1e 	bl	d4c16 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d51da:	e7da      	b.n	d5192 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d51dc:	4630      	mov	r0, r6
   d51de:	b00b      	add	sp, #44	; 0x2c
   d51e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d51e4:	000d5359 	.word	0x000d5359

000d51e8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d51e8:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d51ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d51ec:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d51ee:	d006      	beq.n	d51fe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d51f0:	2a03      	cmp	r2, #3
   d51f2:	d017      	beq.n	d5224 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d51f4:	2a01      	cmp	r2, #1
   d51f6:	d122      	bne.n	d523e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d51f8:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d51fa:	6003      	str	r3, [r0, #0]
	      break;
   d51fc:	e01f      	b.n	d523e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d51fe:	2018      	movs	r0, #24
   d5200:	680e      	ldr	r6, [r1, #0]
   d5202:	f7fe ff48 	bl	d4096 <_Znwj>
   d5206:	4605      	mov	r5, r0
   d5208:	b150      	cbz	r0, d5220 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d520a:	4631      	mov	r1, r6
   d520c:	f7ff fec8 	bl	d4fa0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d5210:	6930      	ldr	r0, [r6, #16]
   d5212:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5216:	b108      	cbz	r0, d521c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d5218:	f001 fc58 	bl	d6acc <strdup>
   d521c:	6128      	str	r0, [r5, #16]
   d521e:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5220:	6025      	str	r5, [r4, #0]
   d5222:	e00c      	b.n	d523e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5224:	6804      	ldr	r4, [r0, #0]
   d5226:	b154      	cbz	r4, d523e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d5228:	f104 0010 	add.w	r0, r4, #16
   d522c:	f7ff fe2a 	bl	d4e84 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5230:	4620      	mov	r0, r4
   d5232:	f7ff fd72 	bl	d4d1a <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5236:	2118      	movs	r1, #24
   d5238:	4620      	mov	r0, r4
   d523a:	f000 fc86 	bl	d5b4a <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d523e:	2000      	movs	r0, #0
   d5240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5242 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5242:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5244:	2300      	movs	r3, #0
   d5246:	6083      	str	r3, [r0, #8]
   d5248:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d524a:	4604      	mov	r4, r0
   d524c:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d524e:	b12b      	cbz	r3, d525c <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5250:	2202      	movs	r2, #2
   d5252:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5254:	68eb      	ldr	r3, [r5, #12]
   d5256:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5258:	68ab      	ldr	r3, [r5, #8]
   d525a:	60a3      	str	r3, [r4, #8]
	}
    }
   d525c:	4620      	mov	r0, r4
   d525e:	bd38      	pop	{r3, r4, r5, pc}

000d5260 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5260:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5262:	b570      	push	{r4, r5, r6, lr}
   d5264:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d5266:	d006      	beq.n	d5276 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d5268:	2a03      	cmp	r2, #3
   d526a:	d011      	beq.n	d5290 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d526c:	2a01      	cmp	r2, #1
   d526e:	d118      	bne.n	d52a2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5270:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5272:	6003      	str	r3, [r0, #0]
	      break;
   d5274:	e015      	b.n	d52a2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5276:	2014      	movs	r0, #20
   d5278:	680e      	ldr	r6, [r1, #0]
   d527a:	f7fe ff0c 	bl	d4096 <_Znwj>
   d527e:	4605      	mov	r5, r0
   d5280:	b120      	cbz	r0, d528c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5282:	4631      	mov	r1, r6
   d5284:	f7ff ffdd 	bl	d5242 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d5288:	7c33      	ldrb	r3, [r6, #16]
   d528a:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d528c:	6025      	str	r5, [r4, #0]
   d528e:	e008      	b.n	d52a2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5290:	6804      	ldr	r4, [r0, #0]
   d5292:	b134      	cbz	r4, d52a2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5294:	4620      	mov	r0, r4
   d5296:	f7ff fd40 	bl	d4d1a <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d529a:	2114      	movs	r1, #20
   d529c:	4620      	mov	r0, r4
   d529e:	f000 fc54 	bl	d5b4a <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d52a2:	2000      	movs	r0, #0
   d52a4:	bd70      	pop	{r4, r5, r6, pc}
	...

000d52a8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d52a8:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d52aa:	2300      	movs	r3, #0
   d52ac:	b087      	sub	sp, #28
   d52ae:	460c      	mov	r4, r1
   d52b0:	f3bf 8f5f 	dmb	sy
   d52b4:	e850 6f00 	ldrex	r6, [r0]
   d52b8:	e840 3200 	strex	r2, r3, [r0]
   d52bc:	2a00      	cmp	r2, #0
   d52be:	d1f9      	bne.n	d52b4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d52c0:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d52c4:	2e00      	cmp	r6, #0
   d52c6:	d03f      	beq.n	d5348 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d52c8:	4618      	mov	r0, r3
   d52ca:	f7ff fa1b 	bl	d4704 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d52ce:	4607      	mov	r7, r0
   d52d0:	b120      	cbz	r0, d52dc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d52d2:	4621      	mov	r1, r4
   d52d4:	4630      	mov	r0, r6
   d52d6:	f7ff fe53 	bl	d4f80 <_ZNKSt8functionIFvRKbEEclES1_>
   d52da:	e02e      	b.n	d533a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d52dc:	4631      	mov	r1, r6
   d52de:	a801      	add	r0, sp, #4
   d52e0:	f7ff ffaf 	bl	d5242 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d52e4:	7823      	ldrb	r3, [r4, #0]
   d52e6:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d52ea:	2010      	movs	r0, #16
   d52ec:	f7fe fed3 	bl	d4096 <_Znwj>
   d52f0:	4605      	mov	r5, r0
   d52f2:	b1d0      	cbz	r0, d532a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d52f4:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d52f6:	2014      	movs	r0, #20
   d52f8:	f7fe fecd 	bl	d4096 <_Znwj>
   d52fc:	4604      	mov	r4, r0
   d52fe:	b178      	cbz	r0, d5320 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5300:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5302:	4601      	mov	r1, r0
   d5304:	a801      	add	r0, sp, #4
   d5306:	f7ff fd17 	bl	d4d38 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d530a:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d530c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d530e:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5310:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5312:	9203      	str	r2, [sp, #12]
   d5314:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5316:	60e3      	str	r3, [r4, #12]
   d5318:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d531c:	9204      	str	r2, [sp, #16]
   d531e:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5320:	4b0a      	ldr	r3, [pc, #40]	; (d534c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d5322:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5324:	4b0a      	ldr	r3, [pc, #40]	; (d5350 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5326:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5328:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d532a:	a801      	add	r0, sp, #4
   d532c:	f7ff fcf5 	bl	d4d1a <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5330:	2200      	movs	r2, #0
   d5332:	4629      	mov	r1, r5
   d5334:	4807      	ldr	r0, [pc, #28]	; (d5354 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d5336:	f7ff f9ed 	bl	d4714 <application_thread_invoke>
   d533a:	4630      	mov	r0, r6
   d533c:	f7ff fced 	bl	d4d1a <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5340:	2110      	movs	r1, #16
   d5342:	4630      	mov	r0, r6
   d5344:	f000 fc01 	bl	d5b4a <_ZdlPvj>
        }
    }
   d5348:	b007      	add	sp, #28
   d534a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d534c:	000d4f93 	.word	0x000d4f93
   d5350:	000d5261 	.word	0x000d5261
   d5354:	000d56b9 	.word	0x000d56b9

000d5358 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d5358:	b530      	push	{r4, r5, lr}
   d535a:	b085      	sub	sp, #20
   d535c:	4604      	mov	r4, r0
   d535e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d5360:	4668      	mov	r0, sp
   d5362:	4611      	mov	r1, r2
   d5364:	f7ff fdc9 	bl	d4efa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d5368:	b17c      	cbz	r4, d538a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d536a:	b224      	sxth	r4, r4
   d536c:	4628      	mov	r0, r5
   d536e:	b10d      	cbz	r5, d5374 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d5370:	f001 fbac 	bl	d6acc <strdup>
   d5374:	9002      	str	r0, [sp, #8]
   d5376:	a902      	add	r1, sp, #8
   d5378:	4668      	mov	r0, sp
   d537a:	f8ad 400c 	strh.w	r4, [sp, #12]
   d537e:	f7ff fe1f 	bl	d4fc0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5382:	a802      	add	r0, sp, #8
   d5384:	f7ff fd7e 	bl	d4e84 <_ZN8particle5ErrorD1Ev>
   d5388:	e01d      	b.n	d53c6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d538a:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d538c:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5390:	f04f 0201 	mov.w	r2, #1
   d5394:	e8d0 3f4f 	ldrexb	r3, [r0]
   d5398:	42a3      	cmp	r3, r4
   d539a:	d103      	bne.n	d53a4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d539c:	e8c0 2f41 	strexb	r1, r2, [r0]
   d53a0:	2900      	cmp	r1, #0
   d53a2:	d1f7      	bne.n	d5394 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d53a4:	d002      	beq.n	d53ac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d53a6:	f88d 3008 	strb.w	r3, [sp, #8]
   d53aa:	e00c      	b.n	d53c6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d53ac:	f110 010c 	adds.w	r1, r0, #12
   d53b0:	f04f 0301 	mov.w	r3, #1
   d53b4:	bf18      	it	ne
   d53b6:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d53b8:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d53bc:	3004      	adds	r0, #4
   d53be:	f800 3c03 	strb.w	r3, [r0, #-3]
   d53c2:	f7ff ff71 	bl	d52a8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d53c6:	a801      	add	r0, sp, #4
   d53c8:	f7ff fc25 	bl	d4c16 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d53cc:	b005      	add	sp, #20
   d53ce:	bd30      	pop	{r4, r5, pc}

000d53d0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d53d0:	4770      	bx	lr

000d53d2 <_ZN9IPAddressD0Ev>:
   d53d2:	b510      	push	{r4, lr}
   d53d4:	2118      	movs	r1, #24
   d53d6:	4604      	mov	r4, r0
   d53d8:	f000 fbb7 	bl	d5b4a <_ZdlPvj>
   d53dc:	4620      	mov	r0, r4
   d53de:	bd10      	pop	{r4, pc}

000d53e0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d53e0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d53e2:	7d03      	ldrb	r3, [r0, #20]
   d53e4:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d53e6:	b08d      	sub	sp, #52	; 0x34
   d53e8:	460e      	mov	r6, r1
   d53ea:	f100 0704 	add.w	r7, r0, #4
   d53ee:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d53f2:	d002      	beq.n	d53fa <_ZNK9IPAddress7printToER5Print+0x1a>
   d53f4:	f100 0508 	add.w	r5, r0, #8
   d53f8:	e018      	b.n	d542c <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d53fa:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d53fc:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d53fe:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5402:	232f      	movs	r3, #47	; 0x2f
   d5404:	462a      	mov	r2, r5
   d5406:	200a      	movs	r0, #10
   d5408:	f7ff f8ac 	bl	d4564 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d540c:	4628      	mov	r0, r5
   d540e:	f001 fb78 	bl	d6b02 <strlen>
   d5412:	6833      	ldr	r3, [r6, #0]
   d5414:	4602      	mov	r2, r0
   d5416:	68db      	ldr	r3, [r3, #12]
   d5418:	4629      	mov	r1, r5
   d541a:	4630      	mov	r0, r6
   d541c:	4798      	blx	r3
   d541e:	e00f      	b.n	d5440 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5420:	b124      	cbz	r4, d542c <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d5422:	212e      	movs	r1, #46	; 0x2e
   d5424:	4630      	mov	r0, r6
   d5426:	f7ff fc31 	bl	d4c8c <_ZN5Print5printEc>
   d542a:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d542c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5430:	220a      	movs	r2, #10
   d5432:	4630      	mov	r0, r6
   d5434:	f7ff fc5a 	bl	d4cec <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5438:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d543a:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d543c:	d1f0      	bne.n	d5420 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d543e:	4620      	mov	r0, r4
    }
    return n;
}
   d5440:	b00d      	add	sp, #52	; 0x34
   d5442:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5444 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5444:	b510      	push	{r4, lr}
   d5446:	4b05      	ldr	r3, [pc, #20]	; (d545c <_ZN9IPAddressC1Ev+0x18>)
   d5448:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d544a:	2211      	movs	r2, #17
   d544c:	f840 3b04 	str.w	r3, [r0], #4
   d5450:	2100      	movs	r1, #0
   d5452:	f001 fb02 	bl	d6a5a <memset>
{
    clear();
}
   d5456:	4620      	mov	r0, r4
   d5458:	bd10      	pop	{r4, pc}
   d545a:	bf00      	nop
   d545c:	000d6cc8 	.word	0x000d6cc8

000d5460 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5460:	4603      	mov	r3, r0
   d5462:	4a07      	ldr	r2, [pc, #28]	; (d5480 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5464:	b510      	push	{r4, lr}
   d5466:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d546a:	f101 0210 	add.w	r2, r1, #16
   d546e:	f851 4b04 	ldr.w	r4, [r1], #4
   d5472:	f843 4b04 	str.w	r4, [r3], #4
   d5476:	4291      	cmp	r1, r2
   d5478:	d1f9      	bne.n	d546e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d547a:	780a      	ldrb	r2, [r1, #0]
   d547c:	701a      	strb	r2, [r3, #0]
}
   d547e:	bd10      	pop	{r4, pc}
   d5480:	000d6cc8 	.word	0x000d6cc8

000d5484 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5484:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5486:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d548a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d548e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5492:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d5496:	2304      	movs	r3, #4
   d5498:	6041      	str	r1, [r0, #4]
   d549a:	7503      	strb	r3, [r0, #20]
   d549c:	bd10      	pop	{r4, pc}

000d549e <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d549e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d54a0:	780d      	ldrb	r5, [r1, #0]
   d54a2:	788b      	ldrb	r3, [r1, #2]
   d54a4:	784a      	ldrb	r2, [r1, #1]
   d54a6:	78c9      	ldrb	r1, [r1, #3]
   d54a8:	9100      	str	r1, [sp, #0]
   d54aa:	4629      	mov	r1, r5
   d54ac:	f7ff ffea 	bl	d5484 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d54b0:	b003      	add	sp, #12
   d54b2:	bd30      	pop	{r4, r5, pc}

000d54b4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d54b4:	7441      	strb	r1, [r0, #17]
   d54b6:	4770      	bx	lr

000d54b8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d54b8:	4770      	bx	lr

000d54ba <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d54ba:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d54bc:	2100      	movs	r1, #0
   d54be:	7c00      	ldrb	r0, [r0, #16]
   d54c0:	f7ff f8f8 	bl	d46b4 <HAL_USB_USART_Receive_Data>
}
   d54c4:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d54c8:	bf28      	it	cs
   d54ca:	f04f 30ff 	movcs.w	r0, #4294967295
   d54ce:	bd08      	pop	{r3, pc}

000d54d0 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d54d0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d54d2:	2101      	movs	r1, #1
   d54d4:	7c00      	ldrb	r0, [r0, #16]
   d54d6:	f7ff f8ed 	bl	d46b4 <HAL_USB_USART_Receive_Data>
}
   d54da:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d54de:	bf28      	it	cs
   d54e0:	f04f 30ff 	movcs.w	r0, #4294967295
   d54e4:	bd08      	pop	{r3, pc}

000d54e6 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d54e6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d54e8:	7c00      	ldrb	r0, [r0, #16]
   d54ea:	f7ff f8db 	bl	d46a4 <HAL_USB_USART_Available_Data_For_Write>
}
   d54ee:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d54f2:	bd08      	pop	{r3, pc}

000d54f4 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d54f4:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d54f6:	7c00      	ldrb	r0, [r0, #16]
   d54f8:	f7ff f8cc 	bl	d4694 <HAL_USB_USART_Available_Data>
}
   d54fc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5500:	bd08      	pop	{r3, pc}

000d5502 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5502:	7c00      	ldrb	r0, [r0, #16]
   d5504:	f7ff b8e6 	b.w	d46d4 <HAL_USB_USART_Flush_Data>

000d5508 <_ZN9USBSerialD0Ev>:
   d5508:	b510      	push	{r4, lr}
   d550a:	2114      	movs	r1, #20
   d550c:	4604      	mov	r4, r0
   d550e:	f000 fb1c 	bl	d5b4a <_ZdlPvj>
   d5512:	4620      	mov	r0, r4
   d5514:	bd10      	pop	{r4, pc}

000d5516 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5516:	b538      	push	{r3, r4, r5, lr}
   d5518:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d551a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d551c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d551e:	f7ff f8c1 	bl	d46a4 <HAL_USB_USART_Available_Data_For_Write>
   d5522:	2800      	cmp	r0, #0
   d5524:	dc01      	bgt.n	d552a <_ZN9USBSerial5writeEh+0x14>
   d5526:	7c60      	ldrb	r0, [r4, #17]
   d5528:	b128      	cbz	r0, d5536 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d552a:	4629      	mov	r1, r5
   d552c:	7c20      	ldrb	r0, [r4, #16]
   d552e:	f7ff f8c9 	bl	d46c4 <HAL_USB_USART_Send_Data>
   d5532:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d5536:	bd38      	pop	{r3, r4, r5, pc}

000d5538 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5538:	b510      	push	{r4, lr}
   d553a:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d553c:	2300      	movs	r3, #0
   d553e:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5540:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5544:	60a3      	str	r3, [r4, #8]
   d5546:	4b05      	ldr	r3, [pc, #20]	; (d555c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5548:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d554a:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d554c:	4608      	mov	r0, r1
{
  _serial = serial;
   d554e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5550:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d5552:	4611      	mov	r1, r2
   d5554:	f7ff f896 	bl	d4684 <HAL_USB_USART_Init>
}
   d5558:	4620      	mov	r0, r4
   d555a:	bd10      	pop	{r4, pc}
   d555c:	000d6cdc 	.word	0x000d6cdc

000d5560 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5560:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5562:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5564:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5566:	2100      	movs	r1, #0
   d5568:	f001 fa77 	bl	d6a5a <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d556c:	4620      	mov	r0, r4
   d556e:	bd10      	pop	{r4, pc}

000d5570 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5570:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5572:	4d0e      	ldr	r5, [pc, #56]	; (d55ac <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5574:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5576:	a801      	add	r0, sp, #4
   d5578:	f7ff fff2 	bl	d5560 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d557c:	6829      	ldr	r1, [r5, #0]
   d557e:	f011 0401 	ands.w	r4, r1, #1
   d5582:	d110      	bne.n	d55a6 <_Z16_fetch_usbserialv+0x36>
   d5584:	4628      	mov	r0, r5
   d5586:	f7fe fd8c 	bl	d40a2 <__cxa_guard_acquire>
   d558a:	b160      	cbz	r0, d55a6 <_Z16_fetch_usbserialv+0x36>
   d558c:	aa01      	add	r2, sp, #4
   d558e:	4621      	mov	r1, r4
   d5590:	4807      	ldr	r0, [pc, #28]	; (d55b0 <_Z16_fetch_usbserialv+0x40>)
   d5592:	f7ff ffd1 	bl	d5538 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5596:	4628      	mov	r0, r5
   d5598:	f7fe fd88 	bl	d40ac <__cxa_guard_release>
   d559c:	4a05      	ldr	r2, [pc, #20]	; (d55b4 <_Z16_fetch_usbserialv+0x44>)
   d559e:	4906      	ldr	r1, [pc, #24]	; (d55b8 <_Z16_fetch_usbserialv+0x48>)
   d55a0:	4803      	ldr	r0, [pc, #12]	; (d55b0 <_Z16_fetch_usbserialv+0x40>)
   d55a2:	f000 facd 	bl	d5b40 <__aeabi_atexit>
	return _usbserial;
}
   d55a6:	4802      	ldr	r0, [pc, #8]	; (d55b0 <_Z16_fetch_usbserialv+0x40>)
   d55a8:	b007      	add	sp, #28
   d55aa:	bd30      	pop	{r4, r5, pc}
   d55ac:	2003e3f8 	.word	0x2003e3f8
   d55b0:	2003e3fc 	.word	0x2003e3fc
   d55b4:	2003e3b4 	.word	0x2003e3b4
   d55b8:	000d54b9 	.word	0x000d54b9

000d55bc <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d55bc:	4770      	bx	lr

000d55be <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d55be:	7441      	strb	r1, [r0, #17]
   d55c0:	4770      	bx	lr

000d55c2 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d55c2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d55c4:	7c00      	ldrb	r0, [r0, #16]
   d55c6:	f7ff f805 	bl	d45d4 <HAL_USART_Available_Data_For_Write>
}
   d55ca:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d55ce:	bd08      	pop	{r3, pc}

000d55d0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d55d0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d55d2:	7c00      	ldrb	r0, [r0, #16]
   d55d4:	f7fe ffde 	bl	d4594 <HAL_USART_Available_Data>
}
   d55d8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d55dc:	bd08      	pop	{r3, pc}

000d55de <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d55de:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d55e0:	7c00      	ldrb	r0, [r0, #16]
   d55e2:	f7fe ffe7 	bl	d45b4 <HAL_USART_Peek_Data>
}
   d55e6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d55ea:	bf28      	it	cs
   d55ec:	f04f 30ff 	movcs.w	r0, #4294967295
   d55f0:	bd08      	pop	{r3, pc}

000d55f2 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d55f2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d55f4:	7c00      	ldrb	r0, [r0, #16]
   d55f6:	f7fe ffd5 	bl	d45a4 <HAL_USART_Read_Data>
}
   d55fa:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d55fe:	bf28      	it	cs
   d5600:	f04f 30ff 	movcs.w	r0, #4294967295
   d5604:	bd08      	pop	{r3, pc}

000d5606 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d5606:	7c00      	ldrb	r0, [r0, #16]
   d5608:	f7fe bfdc 	b.w	d45c4 <HAL_USART_Flush_Data>

000d560c <_ZN11USARTSerialD0Ev>:
   d560c:	b510      	push	{r4, lr}
   d560e:	2114      	movs	r1, #20
   d5610:	4604      	mov	r4, r0
   d5612:	f000 fa9a 	bl	d5b4a <_ZdlPvj>
   d5616:	4620      	mov	r0, r4
   d5618:	bd10      	pop	{r4, pc}

000d561a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d561a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d561c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d561e:	4604      	mov	r4, r0
   d5620:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5622:	b925      	cbnz	r5, d562e <_ZN11USARTSerial5writeEh+0x14>
   d5624:	7c00      	ldrb	r0, [r0, #16]
   d5626:	f7fe ffd5 	bl	d45d4 <HAL_USART_Available_Data_For_Write>
   d562a:	2800      	cmp	r0, #0
   d562c:	dd05      	ble.n	d563a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d562e:	4631      	mov	r1, r6
   d5630:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5632:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5636:	f7fe bfa5 	b.w	d4584 <HAL_USART_Write_Data>
  }
  return 0;
}
   d563a:	4628      	mov	r0, r5
   d563c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5640 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5640:	b510      	push	{r4, lr}
   d5642:	4604      	mov	r4, r0
   d5644:	4608      	mov	r0, r1
   d5646:	4611      	mov	r1, r2
   d5648:	2200      	movs	r2, #0
   d564a:	6062      	str	r2, [r4, #4]
   d564c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5650:	60a2      	str	r2, [r4, #8]
   d5652:	4a05      	ldr	r2, [pc, #20]	; (d5668 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5654:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d5656:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5658:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d565a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d565c:	461a      	mov	r2, r3
   d565e:	f7fe ff89 	bl	d4574 <HAL_USART_Init>
}
   d5662:	4620      	mov	r0, r4
   d5664:	bd10      	pop	{r4, pc}
   d5666:	bf00      	nop
   d5668:	000d6d0c 	.word	0x000d6d0c

000d566c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d566c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d566e:	4d0c      	ldr	r5, [pc, #48]	; (d56a0 <_Z22__fetch_global_Serial1v+0x34>)
   d5670:	6829      	ldr	r1, [r5, #0]
   d5672:	f011 0401 	ands.w	r4, r1, #1
   d5676:	d111      	bne.n	d569c <_Z22__fetch_global_Serial1v+0x30>
   d5678:	4628      	mov	r0, r5
   d567a:	f7fe fd12 	bl	d40a2 <__cxa_guard_acquire>
   d567e:	b168      	cbz	r0, d569c <_Z22__fetch_global_Serial1v+0x30>
   d5680:	4a08      	ldr	r2, [pc, #32]	; (d56a4 <_Z22__fetch_global_Serial1v+0x38>)
   d5682:	4b09      	ldr	r3, [pc, #36]	; (d56a8 <_Z22__fetch_global_Serial1v+0x3c>)
   d5684:	4809      	ldr	r0, [pc, #36]	; (d56ac <_Z22__fetch_global_Serial1v+0x40>)
   d5686:	4621      	mov	r1, r4
   d5688:	f7ff ffda 	bl	d5640 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d568c:	4628      	mov	r0, r5
   d568e:	f7fe fd0d 	bl	d40ac <__cxa_guard_release>
   d5692:	4a07      	ldr	r2, [pc, #28]	; (d56b0 <_Z22__fetch_global_Serial1v+0x44>)
   d5694:	4907      	ldr	r1, [pc, #28]	; (d56b4 <_Z22__fetch_global_Serial1v+0x48>)
   d5696:	4805      	ldr	r0, [pc, #20]	; (d56ac <_Z22__fetch_global_Serial1v+0x40>)
   d5698:	f000 fa52 	bl	d5b40 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d569c:	4803      	ldr	r0, [pc, #12]	; (d56ac <_Z22__fetch_global_Serial1v+0x40>)
   d569e:	bd38      	pop	{r3, r4, r5, pc}
   d56a0:	2003e4a8 	.word	0x2003e4a8
   d56a4:	2003e4ac 	.word	0x2003e4ac
   d56a8:	2003e424 	.word	0x2003e424
   d56ac:	2003e410 	.word	0x2003e410
   d56b0:	2003e3b4 	.word	0x2003e3b4
   d56b4:	000d55bd 	.word	0x000d55bd

000d56b8 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d56b8:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d56ba:	6883      	ldr	r3, [r0, #8]
   d56bc:	4604      	mov	r4, r0
   d56be:	b90b      	cbnz	r3, d56c4 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d56c0:	f000 fa45 	bl	d5b4e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d56c4:	68c3      	ldr	r3, [r0, #12]
   d56c6:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d56c8:	68a3      	ldr	r3, [r4, #8]
   d56ca:	b11b      	cbz	r3, d56d4 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d56cc:	2203      	movs	r2, #3
   d56ce:	4621      	mov	r1, r4
   d56d0:	4620      	mov	r0, r4
   d56d2:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d56d4:	4620      	mov	r0, r4
   d56d6:	2110      	movs	r1, #16
}
   d56d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d56dc:	f000 ba35 	b.w	d5b4a <_ZdlPvj>

000d56e0 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d56e0:	4770      	bx	lr

000d56e2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d56e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d56e4:	4606      	mov	r6, r0
   d56e6:	4615      	mov	r5, r2
   d56e8:	460c      	mov	r4, r1
   d56ea:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d56ec:	42bc      	cmp	r4, r7
   d56ee:	d006      	beq.n	d56fe <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d56f0:	6833      	ldr	r3, [r6, #0]
   d56f2:	f814 1b01 	ldrb.w	r1, [r4], #1
   d56f6:	689b      	ldr	r3, [r3, #8]
   d56f8:	4630      	mov	r0, r6
   d56fa:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d56fc:	e7f6      	b.n	d56ec <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d56fe:	4628      	mov	r0, r5
   d5700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5702 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d5702:	2200      	movs	r2, #0
   d5704:	7c00      	ldrb	r0, [r0, #16]
   d5706:	f7fe bf8d 	b.w	d4624 <HAL_I2C_Write_Data>

000d570a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d570a:	2100      	movs	r1, #0
   d570c:	7c00      	ldrb	r0, [r0, #16]
   d570e:	f7fe bf91 	b.w	d4634 <HAL_I2C_Available_Data>

000d5712 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d5712:	2100      	movs	r1, #0
   d5714:	7c00      	ldrb	r0, [r0, #16]
   d5716:	f7fe bf95 	b.w	d4644 <HAL_I2C_Read_Data>

000d571a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d571a:	2100      	movs	r1, #0
   d571c:	7c00      	ldrb	r0, [r0, #16]
   d571e:	f7fe bf99 	b.w	d4654 <HAL_I2C_Peek_Data>

000d5722 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d5722:	2100      	movs	r1, #0
   d5724:	7c00      	ldrb	r0, [r0, #16]
   d5726:	f7fe bf9d 	b.w	d4664 <HAL_I2C_Flush_Data>

000d572a <_ZN7TwoWireD0Ev>:
   d572a:	b510      	push	{r4, lr}
   d572c:	2114      	movs	r1, #20
   d572e:	4604      	mov	r4, r0
   d5730:	f000 fa0b 	bl	d5b4a <_ZdlPvj>
   d5734:	4620      	mov	r0, r4
   d5736:	bd10      	pop	{r4, pc}

000d5738 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d5738:	b510      	push	{r4, lr}
   d573a:	4604      	mov	r4, r0
   d573c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5740:	4608      	mov	r0, r1
   d5742:	60a3      	str	r3, [r4, #8]
   d5744:	2100      	movs	r1, #0
   d5746:	4b04      	ldr	r3, [pc, #16]	; (d5758 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d5748:	7420      	strb	r0, [r4, #16]
   d574a:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d574c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d574e:	f7fe ff91 	bl	d4674 <HAL_I2C_Init>

}
   d5752:	4620      	mov	r0, r4
   d5754:	bd10      	pop	{r4, pc}
   d5756:	bf00      	nop
   d5758:	000d6d3c 	.word	0x000d6d3c

000d575c <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d575c:	2300      	movs	r3, #0
   d575e:	461a      	mov	r2, r3
   d5760:	4619      	mov	r1, r3
   d5762:	7c00      	ldrb	r0, [r0, #16]
   d5764:	f7fe bf3e 	b.w	d45e4 <HAL_I2C_Begin>

000d5768 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
   d5768:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
   d576a:	2400      	movs	r4, #0
   d576c:	7c00      	ldrb	r0, [r0, #16]
   d576e:	9400      	str	r4, [sp, #0]
   d5770:	f7fe ff40 	bl	d45f4 <HAL_I2C_Request_Data>
  return result;
}
   d5774:	b2c0      	uxtb	r0, r0
   d5776:	b002      	add	sp, #8
   d5778:	bd10      	pop	{r4, pc}

000d577a <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
   d577a:	2301      	movs	r3, #1
   d577c:	f7ff bff4 	b.w	d5768 <_ZN7TwoWire11requestFromEhhh>

000d5780 <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d5780:	2200      	movs	r2, #0
   d5782:	7c00      	ldrb	r0, [r0, #16]
   d5784:	f7fe bf3e 	b.w	d4604 <HAL_I2C_Begin_Transmission>

000d5788 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d5788:	2200      	movs	r2, #0
   d578a:	7c00      	ldrb	r0, [r0, #16]
   d578c:	f7fe bf42 	b.w	d4614 <HAL_I2C_End_Transmission>

000d5790 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d5790:	2101      	movs	r1, #1
   d5792:	f7ff bff9 	b.w	d5788 <_ZN7TwoWire15endTransmissionEh>

000d5796 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5796:	2200      	movs	r2, #0
   d5798:	4611      	mov	r1, r2
   d579a:	6840      	ldr	r0, [r0, #4]
   d579c:	f7ff b80e 	b.w	d47bc <network_listening>

000d57a0 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d57a0:	2200      	movs	r2, #0
   d57a2:	4611      	mov	r1, r2
   d57a4:	6840      	ldr	r0, [r0, #4]
   d57a6:	f7ff b819 	b.w	d47dc <network_get_listen_timeout>

000d57aa <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d57aa:	2200      	movs	r2, #0
   d57ac:	6840      	ldr	r0, [r0, #4]
   d57ae:	f7ff b80d 	b.w	d47cc <network_set_listen_timeout>

000d57b2 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d57b2:	2200      	movs	r2, #0
   d57b4:	f081 0101 	eor.w	r1, r1, #1
   d57b8:	6840      	ldr	r0, [r0, #4]
   d57ba:	f7fe bff7 	b.w	d47ac <network_listen>

000d57be <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d57be:	2300      	movs	r3, #0
   d57c0:	461a      	mov	r2, r3
   d57c2:	2101      	movs	r1, #1
   d57c4:	6840      	ldr	r0, [r0, #4]
   d57c6:	f7fe bfe9 	b.w	d479c <network_off>

000d57ca <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d57ca:	2300      	movs	r3, #0
   d57cc:	461a      	mov	r2, r3
   d57ce:	4619      	mov	r1, r3
   d57d0:	6840      	ldr	r0, [r0, #4]
   d57d2:	f7fe bfdb 	b.w	d478c <network_on>

000d57d6 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d57d6:	2200      	movs	r2, #0
   d57d8:	4611      	mov	r1, r2
   d57da:	6840      	ldr	r0, [r0, #4]
   d57dc:	f7fe bfce 	b.w	d477c <network_ready>

000d57e0 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d57e0:	2200      	movs	r2, #0
   d57e2:	4611      	mov	r1, r2
   d57e4:	6840      	ldr	r0, [r0, #4]
   d57e6:	f7fe bfb9 	b.w	d475c <network_connecting>

000d57ea <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d57ea:	2200      	movs	r2, #0
   d57ec:	2102      	movs	r1, #2
   d57ee:	6840      	ldr	r0, [r0, #4]
   d57f0:	f7fe bfbc 	b.w	d476c <network_disconnect>

000d57f4 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d57f4:	2300      	movs	r3, #0
   d57f6:	461a      	mov	r2, r3
   d57f8:	6840      	ldr	r0, [r0, #4]
   d57fa:	f7fe bfa7 	b.w	d474c <network_connect>

000d57fe <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d57fe:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5800:	4605      	mov	r5, r0
   d5802:	b188      	cbz	r0, d5828 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5804:	6804      	ldr	r4, [r0, #0]
   d5806:	b14c      	cbz	r4, d581c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5808:	68a3      	ldr	r3, [r4, #8]
   d580a:	b11b      	cbz	r3, d5814 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d580c:	2203      	movs	r2, #3
   d580e:	4621      	mov	r1, r4
   d5810:	4620      	mov	r0, r4
   d5812:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5814:	2110      	movs	r1, #16
   d5816:	4620      	mov	r0, r4
   d5818:	f000 f997 	bl	d5b4a <_ZdlPvj>
   d581c:	4628      	mov	r0, r5
   d581e:	2114      	movs	r1, #20
      }
   d5820:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5824:	f000 b991 	b.w	d5b4a <_ZdlPvj>
   d5828:	bd38      	pop	{r3, r4, r5, pc}

000d582a <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d582a:	b110      	cbz	r0, d5832 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d582c:	6803      	ldr	r3, [r0, #0]
   d582e:	685b      	ldr	r3, [r3, #4]
   d5830:	4718      	bx	r3
   d5832:	4770      	bx	lr

000d5834 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d5834:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5836:	6803      	ldr	r3, [r0, #0]
   d5838:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d583a:	b1bb      	cbz	r3, d586c <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d583c:	6858      	ldr	r0, [r3, #4]
   d583e:	f7fe fe69 	bl	d4514 <os_thread_is_current>
   d5842:	b978      	cbnz	r0, d5864 <_ZN6ThreadD1Ev+0x30>
   d5844:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d5846:	7c5a      	ldrb	r2, [r3, #17]
   d5848:	b912      	cbnz	r2, d5850 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d584a:	6858      	ldr	r0, [r3, #4]
   d584c:	f7fe fe6a 	bl	d4524 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d5850:	6823      	ldr	r3, [r4, #0]
   d5852:	6858      	ldr	r0, [r3, #4]
   d5854:	f7fe fe6e 	bl	d4534 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5858:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d585a:	2300      	movs	r3, #0
   d585c:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d585e:	b128      	cbz	r0, d586c <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d5860:	f7ff ffcd 	bl	d57fe <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5864:	6820      	ldr	r0, [r4, #0]
   d5866:	b108      	cbz	r0, d586c <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d5868:	f7ff ffc9 	bl	d57fe <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d586c:	4620      	mov	r0, r4
   d586e:	bd10      	pop	{r4, pc}

000d5870 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5870:	b538      	push	{r3, r4, r5, lr}
   d5872:	4b0c      	ldr	r3, [pc, #48]	; (d58a4 <_ZN5spark9MeshClassD1Ev+0x34>)
   d5874:	6003      	str	r3, [r0, #0]
   d5876:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5878:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d587c:	b108      	cbz	r0, d5882 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d587e:	f7fe fc0e 	bl	d409e <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5882:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d5886:	b135      	cbz	r5, d5896 <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5888:	4628      	mov	r0, r5
   d588a:	f7ff ffd3 	bl	d5834 <_ZN6ThreadD1Ev>
   d588e:	2104      	movs	r1, #4
   d5890:	4628      	mov	r0, r5
   d5892:	f000 f95a 	bl	d5b4a <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5896:	68a0      	ldr	r0, [r4, #8]
   d5898:	b108      	cbz	r0, d589e <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d589a:	f7ff ffc6 	bl	d582a <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d589e:	4620      	mov	r0, r4
   d58a0:	bd38      	pop	{r3, r4, r5, pc}
   d58a2:	bf00      	nop
   d58a4:	000d6d64 	.word	0x000d6d64

000d58a8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d58a8:	b538      	push	{r3, r4, r5, lr}
   d58aa:	4c0e      	ldr	r4, [pc, #56]	; (d58e4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d58ac:	4b0e      	ldr	r3, [pc, #56]	; (d58e8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d58ae:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d58b0:	2500      	movs	r5, #0
   d58b2:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d58b4:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d58b8:	6063      	str	r3, [r4, #4]
   d58ba:	60a5      	str	r5, [r4, #8]
   d58bc:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d58c0:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d58c4:	f7fe fe46 	bl	d4554 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d58c8:	4b08      	ldr	r3, [pc, #32]	; (d58ec <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d58ca:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d58ce:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d58d2:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d58d4:	4620      	mov	r0, r4
   d58d6:	4a06      	ldr	r2, [pc, #24]	; (d58f0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d58d8:	4906      	ldr	r1, [pc, #24]	; (d58f4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d58da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d58de:	f000 b92f 	b.w	d5b40 <__aeabi_atexit>
   d58e2:	bf00      	nop
   d58e4:	2003e530 	.word	0x2003e530
   d58e8:	000d6dcc 	.word	0x000d6dcc
   d58ec:	000d6d64 	.word	0x000d6d64
   d58f0:	2003e3b4 	.word	0x2003e3b4
   d58f4:	000d5871 	.word	0x000d5871

000d58f8 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d58f8:	2200      	movs	r2, #0
   d58fa:	4611      	mov	r1, r2
   d58fc:	6840      	ldr	r0, [r0, #4]
   d58fe:	f7fe bf3d 	b.w	d477c <network_ready>

000d5902 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5902:	2200      	movs	r2, #0
   d5904:	4611      	mov	r1, r2
   d5906:	6840      	ldr	r0, [r0, #4]
   d5908:	f7fe bf58 	b.w	d47bc <network_listening>

000d590c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d590c:	2200      	movs	r2, #0
   d590e:	4611      	mov	r1, r2
   d5910:	6840      	ldr	r0, [r0, #4]
   d5912:	f7fe bf63 	b.w	d47dc <network_get_listen_timeout>

000d5916 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5916:	2200      	movs	r2, #0
   d5918:	6840      	ldr	r0, [r0, #4]
   d591a:	f7fe bf57 	b.w	d47cc <network_set_listen_timeout>

000d591e <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d591e:	2200      	movs	r2, #0
   d5920:	f081 0101 	eor.w	r1, r1, #1
   d5924:	6840      	ldr	r0, [r0, #4]
   d5926:	f7fe bf41 	b.w	d47ac <network_listen>

000d592a <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d592a:	2300      	movs	r3, #0
   d592c:	461a      	mov	r2, r3
   d592e:	4619      	mov	r1, r3
   d5930:	6840      	ldr	r0, [r0, #4]
   d5932:	f7fe bf33 	b.w	d479c <network_off>

000d5936 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d5936:	2300      	movs	r3, #0
   d5938:	461a      	mov	r2, r3
   d593a:	4619      	mov	r1, r3
   d593c:	6840      	ldr	r0, [r0, #4]
   d593e:	f7fe bf25 	b.w	d478c <network_on>

000d5942 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5942:	2200      	movs	r2, #0
   d5944:	4611      	mov	r1, r2
   d5946:	6840      	ldr	r0, [r0, #4]
   d5948:	f7fe bf08 	b.w	d475c <network_connecting>

000d594c <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d594c:	2200      	movs	r2, #0
   d594e:	2102      	movs	r1, #2
   d5950:	6840      	ldr	r0, [r0, #4]
   d5952:	f7fe bf0b 	b.w	d476c <network_disconnect>

000d5956 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5956:	2300      	movs	r3, #0
   d5958:	461a      	mov	r2, r3
   d595a:	6840      	ldr	r0, [r0, #4]
   d595c:	f7fe bef6 	b.w	d474c <network_connect>

000d5960 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5960:	4b02      	ldr	r3, [pc, #8]	; (d596c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d5962:	2204      	movs	r2, #4
   d5964:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d5966:	4a02      	ldr	r2, [pc, #8]	; (d5970 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5968:	601a      	str	r2, [r3, #0]
   d596a:	4770      	bx	lr
   d596c:	2003e704 	.word	0x2003e704
   d5970:	000d6d98 	.word	0x000d6d98

000d5974 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5974:	2300      	movs	r3, #0
   d5976:	461a      	mov	r2, r3
   d5978:	6840      	ldr	r0, [r0, #4]
   d597a:	f7fe bee7 	b.w	d474c <network_connect>

000d597e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d597e:	2200      	movs	r2, #0
   d5980:	2102      	movs	r1, #2
   d5982:	6840      	ldr	r0, [r0, #4]
   d5984:	f7fe bef2 	b.w	d476c <network_disconnect>

000d5988 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5988:	2200      	movs	r2, #0
   d598a:	4611      	mov	r1, r2
   d598c:	6840      	ldr	r0, [r0, #4]
   d598e:	f7fe bee5 	b.w	d475c <network_connecting>

000d5992 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5992:	2200      	movs	r2, #0
   d5994:	4611      	mov	r1, r2
   d5996:	6840      	ldr	r0, [r0, #4]
   d5998:	f7fe bef0 	b.w	d477c <network_ready>

000d599c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d599c:	2300      	movs	r3, #0
   d599e:	461a      	mov	r2, r3
   d59a0:	4619      	mov	r1, r3
   d59a2:	6840      	ldr	r0, [r0, #4]
   d59a4:	f7fe bef2 	b.w	d478c <network_on>

000d59a8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d59a8:	2300      	movs	r3, #0
   d59aa:	461a      	mov	r2, r3
   d59ac:	4619      	mov	r1, r3
   d59ae:	6840      	ldr	r0, [r0, #4]
   d59b0:	f7fe bef4 	b.w	d479c <network_off>

000d59b4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d59b4:	2200      	movs	r2, #0
   d59b6:	f081 0101 	eor.w	r1, r1, #1
   d59ba:	6840      	ldr	r0, [r0, #4]
   d59bc:	f7fe bef6 	b.w	d47ac <network_listen>

000d59c0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d59c0:	2200      	movs	r2, #0
   d59c2:	6840      	ldr	r0, [r0, #4]
   d59c4:	f7fe bf02 	b.w	d47cc <network_set_listen_timeout>

000d59c8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d59c8:	2200      	movs	r2, #0
   d59ca:	4611      	mov	r1, r2
   d59cc:	6840      	ldr	r0, [r0, #4]
   d59ce:	f7fe bf05 	b.w	d47dc <network_get_listen_timeout>

000d59d2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d59d2:	2200      	movs	r2, #0
   d59d4:	4611      	mov	r1, r2
   d59d6:	6840      	ldr	r0, [r0, #4]
   d59d8:	f7fe bef0 	b.w	d47bc <network_listening>

000d59dc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d59dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d59e0:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d59e2:	b095      	sub	sp, #84	; 0x54
   d59e4:	4616      	mov	r6, r2
   d59e6:	460d      	mov	r5, r1
   d59e8:	4607      	mov	r7, r0
    IPAddress addr;
   d59ea:	f7ff fd2b 	bl	d5444 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d59ee:	4621      	mov	r1, r4
   d59f0:	2220      	movs	r2, #32
   d59f2:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d59f4:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d59f6:	f001 f830 	bl	d6a5a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d59fa:	2340      	movs	r3, #64	; 0x40
   d59fc:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d59fe:	4621      	mov	r1, r4
   d5a00:	466b      	mov	r3, sp
   d5a02:	aa0c      	add	r2, sp, #48	; 0x30
   d5a04:	4630      	mov	r0, r6
   d5a06:	f7fe fd5d 	bl	d44c4 <netdb_getaddrinfo>
    if (!r) {
   d5a0a:	4604      	mov	r4, r0
   d5a0c:	2800      	cmp	r0, #0
   d5a0e:	d144      	bne.n	d5a9a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5a10:	4602      	mov	r2, r0
   d5a12:	2101      	movs	r1, #1
   d5a14:	6868      	ldr	r0, [r5, #4]
   d5a16:	f7fe feb1 	bl	d477c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5a1a:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5a1c:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5a1e:	4622      	mov	r2, r4
   d5a20:	6868      	ldr	r0, [r5, #4]
   d5a22:	f7fe feab 	bl	d477c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5a26:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5a28:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d5a2a:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5a2c:	2e00      	cmp	r6, #0
   d5a2e:	d034      	beq.n	d5a9a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d5a30:	2900      	cmp	r1, #0
   d5a32:	d132      	bne.n	d5a9a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5a34:	6873      	ldr	r3, [r6, #4]
   d5a36:	2b02      	cmp	r3, #2
   d5a38:	d002      	beq.n	d5a40 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d5a3a:	2b0a      	cmp	r3, #10
   d5a3c:	d009      	beq.n	d5a52 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d5a3e:	e02a      	b.n	d5a96 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d5a40:	f1b8 0f00 	cmp.w	r8, #0
   d5a44:	d027      	beq.n	d5a96 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5a46:	6971      	ldr	r1, [r6, #20]
   d5a48:	4638      	mov	r0, r7
   d5a4a:	3104      	adds	r1, #4
   d5a4c:	f7ff fd27 	bl	d549e <_ZN9IPAddressaSEPKh>
   d5a50:	e020      	b.n	d5a94 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5a52:	f1b9 0f00 	cmp.w	r9, #0
   d5a56:	d01e      	beq.n	d5a96 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5a58:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5a5a:	2211      	movs	r2, #17
   d5a5c:	a801      	add	r0, sp, #4
   d5a5e:	f000 fffc 	bl	d6a5a <memset>
                    a.v = 6;
   d5a62:	2306      	movs	r3, #6
   d5a64:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5a68:	ad01      	add	r5, sp, #4
   d5a6a:	f104 0308 	add.w	r3, r4, #8
   d5a6e:	3418      	adds	r4, #24
   d5a70:	6818      	ldr	r0, [r3, #0]
   d5a72:	6859      	ldr	r1, [r3, #4]
   d5a74:	462a      	mov	r2, r5
   d5a76:	c203      	stmia	r2!, {r0, r1}
   d5a78:	3308      	adds	r3, #8
   d5a7a:	42a3      	cmp	r3, r4
   d5a7c:	4615      	mov	r5, r2
   d5a7e:	d1f7      	bne.n	d5a70 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5a80:	a901      	add	r1, sp, #4
   d5a82:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5a84:	ad07      	add	r5, sp, #28
   d5a86:	f7ff fceb 	bl	d5460 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5a8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5a8c:	1d3c      	adds	r4, r7, #4
   d5a8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5a90:	682b      	ldr	r3, [r5, #0]
   d5a92:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d5a94:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5a96:	69f6      	ldr	r6, [r6, #28]
   d5a98:	e7c8      	b.n	d5a2c <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5a9a:	9800      	ldr	r0, [sp, #0]
   d5a9c:	f7fe fd0a 	bl	d44b4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5aa0:	4638      	mov	r0, r7
   d5aa2:	b015      	add	sp, #84	; 0x54
   d5aa4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5aa8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5aa8:	4b02      	ldr	r3, [pc, #8]	; (d5ab4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5aaa:	4a03      	ldr	r2, [pc, #12]	; (d5ab8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5aac:	601a      	str	r2, [r3, #0]
   d5aae:	2200      	movs	r2, #0
   d5ab0:	605a      	str	r2, [r3, #4]
   d5ab2:	4770      	bx	lr
   d5ab4:	2003e70c 	.word	0x2003e70c
   d5ab8:	000d6dcc 	.word	0x000d6dcc

000d5abc <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5abc:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d5abe:	4c0c      	ldr	r4, [pc, #48]	; (d5af0 <_GLOBAL__sub_I_SPI+0x34>)
   d5ac0:	4e0c      	ldr	r6, [pc, #48]	; (d5af4 <_GLOBAL__sub_I_SPI+0x38>)
   d5ac2:	4d0d      	ldr	r5, [pc, #52]	; (d5af8 <_GLOBAL__sub_I_SPI+0x3c>)
   d5ac4:	2100      	movs	r1, #0
   d5ac6:	4620      	mov	r0, r4
   d5ac8:	f7fe ff16 	bl	d48f8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5acc:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5ace:	4c0b      	ldr	r4, [pc, #44]	; (d5afc <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d5ad0:	4632      	mov	r2, r6
   d5ad2:	4629      	mov	r1, r5
   d5ad4:	f000 f834 	bl	d5b40 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5ad8:	2101      	movs	r1, #1
   d5ada:	4620      	mov	r0, r4
   d5adc:	f7fe ff0c 	bl	d48f8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5ae0:	4632      	mov	r2, r6
   d5ae2:	4629      	mov	r1, r5
   d5ae4:	4620      	mov	r0, r4
   d5ae6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d5aea:	f000 b829 	b.w	d5b40 <__aeabi_atexit>
   d5aee:	bf00      	nop
   d5af0:	2003e714 	.word	0x2003e714
   d5af4:	2003e3b4 	.word	0x2003e3b4
   d5af8:	000d48e9 	.word	0x000d48e9
   d5afc:	2003e724 	.word	0x2003e724

000d5b00 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d5b00:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d5b02:	4d0b      	ldr	r5, [pc, #44]	; (d5b30 <_Z19__fetch_global_Wirev+0x30>)
   d5b04:	6829      	ldr	r1, [r5, #0]
   d5b06:	f011 0401 	ands.w	r4, r1, #1
   d5b0a:	d10f      	bne.n	d5b2c <_Z19__fetch_global_Wirev+0x2c>
   d5b0c:	4628      	mov	r0, r5
   d5b0e:	f7fe fac8 	bl	d40a2 <__cxa_guard_acquire>
   d5b12:	b158      	cbz	r0, d5b2c <_Z19__fetch_global_Wirev+0x2c>
   d5b14:	4621      	mov	r1, r4
   d5b16:	4807      	ldr	r0, [pc, #28]	; (d5b34 <_Z19__fetch_global_Wirev+0x34>)
   d5b18:	f7ff fe0e 	bl	d5738 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d5b1c:	4628      	mov	r0, r5
   d5b1e:	f7fe fac5 	bl	d40ac <__cxa_guard_release>
   d5b22:	4a05      	ldr	r2, [pc, #20]	; (d5b38 <_Z19__fetch_global_Wirev+0x38>)
   d5b24:	4905      	ldr	r1, [pc, #20]	; (d5b3c <_Z19__fetch_global_Wirev+0x3c>)
   d5b26:	4803      	ldr	r0, [pc, #12]	; (d5b34 <_Z19__fetch_global_Wirev+0x34>)
   d5b28:	f000 f80a 	bl	d5b40 <__aeabi_atexit>
	return wire;
}
   d5b2c:	4801      	ldr	r0, [pc, #4]	; (d5b34 <_Z19__fetch_global_Wirev+0x34>)
   d5b2e:	bd38      	pop	{r3, r4, r5, pc}
   d5b30:	2003e738 	.word	0x2003e738
   d5b34:	2003e73c 	.word	0x2003e73c
   d5b38:	2003e3b4 	.word	0x2003e3b4
   d5b3c:	000d56e1 	.word	0x000d56e1

000d5b40 <__aeabi_atexit>:
   d5b40:	460b      	mov	r3, r1
   d5b42:	4601      	mov	r1, r0
   d5b44:	4618      	mov	r0, r3
   d5b46:	f000 bf6f 	b.w	d6a28 <__cxa_atexit>

000d5b4a <_ZdlPvj>:
   d5b4a:	f7fe baa6 	b.w	d409a <_ZdlPv>

000d5b4e <_ZSt25__throw_bad_function_callv>:
   d5b4e:	b508      	push	{r3, lr}
   d5b50:	f7fe fe7c 	bl	d484c <abort>

000d5b54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5b54:	4b18      	ldr	r3, [pc, #96]	; (d5bb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5b56:	681a      	ldr	r2, [r3, #0]
   d5b58:	07d1      	lsls	r1, r2, #31
   d5b5a:	bf5c      	itt	pl
   d5b5c:	2201      	movpl	r2, #1
   d5b5e:	601a      	strpl	r2, [r3, #0]
   d5b60:	4b16      	ldr	r3, [pc, #88]	; (d5bbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5b62:	681a      	ldr	r2, [r3, #0]
   d5b64:	07d2      	lsls	r2, r2, #31
   d5b66:	bf5c      	itt	pl
   d5b68:	2201      	movpl	r2, #1
   d5b6a:	601a      	strpl	r2, [r3, #0]
   d5b6c:	4b14      	ldr	r3, [pc, #80]	; (d5bc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5b6e:	681a      	ldr	r2, [r3, #0]
   d5b70:	07d0      	lsls	r0, r2, #31
   d5b72:	bf5c      	itt	pl
   d5b74:	2201      	movpl	r2, #1
   d5b76:	601a      	strpl	r2, [r3, #0]
   d5b78:	4b12      	ldr	r3, [pc, #72]	; (d5bc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5b7a:	681a      	ldr	r2, [r3, #0]
   d5b7c:	07d1      	lsls	r1, r2, #31
   d5b7e:	bf5c      	itt	pl
   d5b80:	2201      	movpl	r2, #1
   d5b82:	601a      	strpl	r2, [r3, #0]
   d5b84:	4b10      	ldr	r3, [pc, #64]	; (d5bc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5b86:	681a      	ldr	r2, [r3, #0]
   d5b88:	07d2      	lsls	r2, r2, #31
   d5b8a:	bf5c      	itt	pl
   d5b8c:	2201      	movpl	r2, #1
   d5b8e:	601a      	strpl	r2, [r3, #0]
   d5b90:	4b0e      	ldr	r3, [pc, #56]	; (d5bcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5b92:	681a      	ldr	r2, [r3, #0]
   d5b94:	07d0      	lsls	r0, r2, #31
   d5b96:	bf5c      	itt	pl
   d5b98:	2201      	movpl	r2, #1
   d5b9a:	601a      	strpl	r2, [r3, #0]
   d5b9c:	4b0c      	ldr	r3, [pc, #48]	; (d5bd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5b9e:	681a      	ldr	r2, [r3, #0]
   d5ba0:	07d1      	lsls	r1, r2, #31
   d5ba2:	bf5c      	itt	pl
   d5ba4:	2201      	movpl	r2, #1
   d5ba6:	601a      	strpl	r2, [r3, #0]
   d5ba8:	4b0a      	ldr	r3, [pc, #40]	; (d5bd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5baa:	681a      	ldr	r2, [r3, #0]
   d5bac:	07d2      	lsls	r2, r2, #31
   d5bae:	bf5c      	itt	pl
   d5bb0:	2201      	movpl	r2, #1
   d5bb2:	601a      	strpl	r2, [r3, #0]
   d5bb4:	4770      	bx	lr
   d5bb6:	bf00      	nop
   d5bb8:	2003e76c 	.word	0x2003e76c
   d5bbc:	2003e768 	.word	0x2003e768
   d5bc0:	2003e764 	.word	0x2003e764
   d5bc4:	2003e760 	.word	0x2003e760
   d5bc8:	2003e75c 	.word	0x2003e75c
   d5bcc:	2003e758 	.word	0x2003e758
   d5bd0:	2003e754 	.word	0x2003e754
   d5bd4:	2003e750 	.word	0x2003e750

000d5bd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5bd8:	4b24      	ldr	r3, [pc, #144]	; (d5c6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d5bda:	681a      	ldr	r2, [r3, #0]
   d5bdc:	07d0      	lsls	r0, r2, #31
   d5bde:	bf5c      	itt	pl
   d5be0:	2201      	movpl	r2, #1
   d5be2:	601a      	strpl	r2, [r3, #0]
   d5be4:	4b22      	ldr	r3, [pc, #136]	; (d5c70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d5be6:	681a      	ldr	r2, [r3, #0]
   d5be8:	07d1      	lsls	r1, r2, #31
   d5bea:	bf5c      	itt	pl
   d5bec:	2201      	movpl	r2, #1
   d5bee:	601a      	strpl	r2, [r3, #0]
   d5bf0:	4b20      	ldr	r3, [pc, #128]	; (d5c74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d5bf2:	681a      	ldr	r2, [r3, #0]
   d5bf4:	07d2      	lsls	r2, r2, #31
   d5bf6:	bf5c      	itt	pl
   d5bf8:	2201      	movpl	r2, #1
   d5bfa:	601a      	strpl	r2, [r3, #0]
   d5bfc:	4b1e      	ldr	r3, [pc, #120]	; (d5c78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d5bfe:	681a      	ldr	r2, [r3, #0]
   d5c00:	07d0      	lsls	r0, r2, #31
   d5c02:	bf5c      	itt	pl
   d5c04:	2201      	movpl	r2, #1
   d5c06:	601a      	strpl	r2, [r3, #0]
   d5c08:	4b1c      	ldr	r3, [pc, #112]	; (d5c7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d5c0a:	681a      	ldr	r2, [r3, #0]
   d5c0c:	07d1      	lsls	r1, r2, #31
   d5c0e:	bf5c      	itt	pl
   d5c10:	2201      	movpl	r2, #1
   d5c12:	601a      	strpl	r2, [r3, #0]
   d5c14:	4b1a      	ldr	r3, [pc, #104]	; (d5c80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d5c16:	681a      	ldr	r2, [r3, #0]
   d5c18:	07d2      	lsls	r2, r2, #31
   d5c1a:	bf5c      	itt	pl
   d5c1c:	2201      	movpl	r2, #1
   d5c1e:	601a      	strpl	r2, [r3, #0]
   d5c20:	4b18      	ldr	r3, [pc, #96]	; (d5c84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d5c22:	681a      	ldr	r2, [r3, #0]
   d5c24:	07d0      	lsls	r0, r2, #31
   d5c26:	bf5c      	itt	pl
   d5c28:	2201      	movpl	r2, #1
   d5c2a:	601a      	strpl	r2, [r3, #0]
   d5c2c:	4b16      	ldr	r3, [pc, #88]	; (d5c88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d5c2e:	681a      	ldr	r2, [r3, #0]
   d5c30:	07d1      	lsls	r1, r2, #31
   d5c32:	bf5c      	itt	pl
   d5c34:	2201      	movpl	r2, #1
   d5c36:	601a      	strpl	r2, [r3, #0]
   d5c38:	4b14      	ldr	r3, [pc, #80]	; (d5c8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d5c3a:	681a      	ldr	r2, [r3, #0]
   d5c3c:	07d2      	lsls	r2, r2, #31
   d5c3e:	bf5c      	itt	pl
   d5c40:	2201      	movpl	r2, #1
   d5c42:	601a      	strpl	r2, [r3, #0]
   d5c44:	4b12      	ldr	r3, [pc, #72]	; (d5c90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d5c46:	681a      	ldr	r2, [r3, #0]
   d5c48:	07d0      	lsls	r0, r2, #31
   d5c4a:	bf5c      	itt	pl
   d5c4c:	2201      	movpl	r2, #1
   d5c4e:	601a      	strpl	r2, [r3, #0]
   d5c50:	4b10      	ldr	r3, [pc, #64]	; (d5c94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d5c52:	681a      	ldr	r2, [r3, #0]
   d5c54:	07d1      	lsls	r1, r2, #31
   d5c56:	bf5c      	itt	pl
   d5c58:	2201      	movpl	r2, #1
   d5c5a:	601a      	strpl	r2, [r3, #0]
   d5c5c:	4b0e      	ldr	r3, [pc, #56]	; (d5c98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d5c5e:	681a      	ldr	r2, [r3, #0]
   d5c60:	07d2      	lsls	r2, r2, #31
   d5c62:	bf5c      	itt	pl
   d5c64:	2201      	movpl	r2, #1
   d5c66:	601a      	strpl	r2, [r3, #0]
   d5c68:	4770      	bx	lr
   d5c6a:	bf00      	nop
   d5c6c:	2003e79c 	.word	0x2003e79c
   d5c70:	2003e798 	.word	0x2003e798
   d5c74:	2003e794 	.word	0x2003e794
   d5c78:	2003e790 	.word	0x2003e790
   d5c7c:	2003e78c 	.word	0x2003e78c
   d5c80:	2003e788 	.word	0x2003e788
   d5c84:	2003e784 	.word	0x2003e784
   d5c88:	2003e780 	.word	0x2003e780
   d5c8c:	2003e77c 	.word	0x2003e77c
   d5c90:	2003e778 	.word	0x2003e778
   d5c94:	2003e774 	.word	0x2003e774
   d5c98:	2003e770 	.word	0x2003e770

000d5c9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d5c9c:	4b24      	ldr	r3, [pc, #144]	; (d5d30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d5c9e:	681a      	ldr	r2, [r3, #0]
   d5ca0:	07d0      	lsls	r0, r2, #31
   d5ca2:	bf5c      	itt	pl
   d5ca4:	2201      	movpl	r2, #1
   d5ca6:	601a      	strpl	r2, [r3, #0]
   d5ca8:	4b22      	ldr	r3, [pc, #136]	; (d5d34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d5caa:	681a      	ldr	r2, [r3, #0]
   d5cac:	07d1      	lsls	r1, r2, #31
   d5cae:	bf5c      	itt	pl
   d5cb0:	2201      	movpl	r2, #1
   d5cb2:	601a      	strpl	r2, [r3, #0]
   d5cb4:	4b20      	ldr	r3, [pc, #128]	; (d5d38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d5cb6:	681a      	ldr	r2, [r3, #0]
   d5cb8:	07d2      	lsls	r2, r2, #31
   d5cba:	bf5c      	itt	pl
   d5cbc:	2201      	movpl	r2, #1
   d5cbe:	601a      	strpl	r2, [r3, #0]
   d5cc0:	4b1e      	ldr	r3, [pc, #120]	; (d5d3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d5cc2:	681a      	ldr	r2, [r3, #0]
   d5cc4:	07d0      	lsls	r0, r2, #31
   d5cc6:	bf5c      	itt	pl
   d5cc8:	2201      	movpl	r2, #1
   d5cca:	601a      	strpl	r2, [r3, #0]
   d5ccc:	4b1c      	ldr	r3, [pc, #112]	; (d5d40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d5cce:	681a      	ldr	r2, [r3, #0]
   d5cd0:	07d1      	lsls	r1, r2, #31
   d5cd2:	bf5c      	itt	pl
   d5cd4:	2201      	movpl	r2, #1
   d5cd6:	601a      	strpl	r2, [r3, #0]
   d5cd8:	4b1a      	ldr	r3, [pc, #104]	; (d5d44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d5cda:	681a      	ldr	r2, [r3, #0]
   d5cdc:	07d2      	lsls	r2, r2, #31
   d5cde:	bf5c      	itt	pl
   d5ce0:	2201      	movpl	r2, #1
   d5ce2:	601a      	strpl	r2, [r3, #0]
   d5ce4:	4b18      	ldr	r3, [pc, #96]	; (d5d48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d5ce6:	681a      	ldr	r2, [r3, #0]
   d5ce8:	07d0      	lsls	r0, r2, #31
   d5cea:	bf5c      	itt	pl
   d5cec:	2201      	movpl	r2, #1
   d5cee:	601a      	strpl	r2, [r3, #0]
   d5cf0:	4b16      	ldr	r3, [pc, #88]	; (d5d4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d5cf2:	681a      	ldr	r2, [r3, #0]
   d5cf4:	07d1      	lsls	r1, r2, #31
   d5cf6:	bf5c      	itt	pl
   d5cf8:	2201      	movpl	r2, #1
   d5cfa:	601a      	strpl	r2, [r3, #0]
   d5cfc:	4b14      	ldr	r3, [pc, #80]	; (d5d50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d5cfe:	681a      	ldr	r2, [r3, #0]
   d5d00:	07d2      	lsls	r2, r2, #31
   d5d02:	bf5c      	itt	pl
   d5d04:	2201      	movpl	r2, #1
   d5d06:	601a      	strpl	r2, [r3, #0]
   d5d08:	4b12      	ldr	r3, [pc, #72]	; (d5d54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d5d0a:	681a      	ldr	r2, [r3, #0]
   d5d0c:	07d0      	lsls	r0, r2, #31
   d5d0e:	bf5c      	itt	pl
   d5d10:	2201      	movpl	r2, #1
   d5d12:	601a      	strpl	r2, [r3, #0]
   d5d14:	4b10      	ldr	r3, [pc, #64]	; (d5d58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d5d16:	681a      	ldr	r2, [r3, #0]
   d5d18:	07d1      	lsls	r1, r2, #31
   d5d1a:	bf5c      	itt	pl
   d5d1c:	2201      	movpl	r2, #1
   d5d1e:	601a      	strpl	r2, [r3, #0]
   d5d20:	4b0e      	ldr	r3, [pc, #56]	; (d5d5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d5d22:	681a      	ldr	r2, [r3, #0]
   d5d24:	07d2      	lsls	r2, r2, #31
   d5d26:	bf5c      	itt	pl
   d5d28:	2201      	movpl	r2, #1
   d5d2a:	601a      	strpl	r2, [r3, #0]
   d5d2c:	4770      	bx	lr
   d5d2e:	bf00      	nop
   d5d30:	2003e7cc 	.word	0x2003e7cc
   d5d34:	2003e7c8 	.word	0x2003e7c8
   d5d38:	2003e7c4 	.word	0x2003e7c4
   d5d3c:	2003e7c0 	.word	0x2003e7c0
   d5d40:	2003e7bc 	.word	0x2003e7bc
   d5d44:	2003e7b8 	.word	0x2003e7b8
   d5d48:	2003e7b4 	.word	0x2003e7b4
   d5d4c:	2003e7b0 	.word	0x2003e7b0
   d5d50:	2003e7ac 	.word	0x2003e7ac
   d5d54:	2003e7a8 	.word	0x2003e7a8
   d5d58:	2003e7a4 	.word	0x2003e7a4
   d5d5c:	2003e7a0 	.word	0x2003e7a0

000d5d60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5d60:	4b18      	ldr	r3, [pc, #96]	; (d5dc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5d62:	681a      	ldr	r2, [r3, #0]
   d5d64:	07d1      	lsls	r1, r2, #31
   d5d66:	bf5c      	itt	pl
   d5d68:	2201      	movpl	r2, #1
   d5d6a:	601a      	strpl	r2, [r3, #0]
   d5d6c:	4b16      	ldr	r3, [pc, #88]	; (d5dc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5d6e:	681a      	ldr	r2, [r3, #0]
   d5d70:	07d2      	lsls	r2, r2, #31
   d5d72:	bf5c      	itt	pl
   d5d74:	2201      	movpl	r2, #1
   d5d76:	601a      	strpl	r2, [r3, #0]
   d5d78:	4b14      	ldr	r3, [pc, #80]	; (d5dcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5d7a:	681a      	ldr	r2, [r3, #0]
   d5d7c:	07d0      	lsls	r0, r2, #31
   d5d7e:	bf5c      	itt	pl
   d5d80:	2201      	movpl	r2, #1
   d5d82:	601a      	strpl	r2, [r3, #0]
   d5d84:	4b12      	ldr	r3, [pc, #72]	; (d5dd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5d86:	681a      	ldr	r2, [r3, #0]
   d5d88:	07d1      	lsls	r1, r2, #31
   d5d8a:	bf5c      	itt	pl
   d5d8c:	2201      	movpl	r2, #1
   d5d8e:	601a      	strpl	r2, [r3, #0]
   d5d90:	4b10      	ldr	r3, [pc, #64]	; (d5dd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5d92:	681a      	ldr	r2, [r3, #0]
   d5d94:	07d2      	lsls	r2, r2, #31
   d5d96:	bf5c      	itt	pl
   d5d98:	2201      	movpl	r2, #1
   d5d9a:	601a      	strpl	r2, [r3, #0]
   d5d9c:	4b0e      	ldr	r3, [pc, #56]	; (d5dd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5d9e:	681a      	ldr	r2, [r3, #0]
   d5da0:	07d0      	lsls	r0, r2, #31
   d5da2:	bf5c      	itt	pl
   d5da4:	2201      	movpl	r2, #1
   d5da6:	601a      	strpl	r2, [r3, #0]
   d5da8:	4b0c      	ldr	r3, [pc, #48]	; (d5ddc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5daa:	681a      	ldr	r2, [r3, #0]
   d5dac:	07d1      	lsls	r1, r2, #31
   d5dae:	bf5c      	itt	pl
   d5db0:	2201      	movpl	r2, #1
   d5db2:	601a      	strpl	r2, [r3, #0]
   d5db4:	4b0a      	ldr	r3, [pc, #40]	; (d5de0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5db6:	681a      	ldr	r2, [r3, #0]
   d5db8:	07d2      	lsls	r2, r2, #31
   d5dba:	bf5c      	itt	pl
   d5dbc:	2201      	movpl	r2, #1
   d5dbe:	601a      	strpl	r2, [r3, #0]
   d5dc0:	4770      	bx	lr
   d5dc2:	bf00      	nop
   d5dc4:	2003e7ec 	.word	0x2003e7ec
   d5dc8:	2003e7e8 	.word	0x2003e7e8
   d5dcc:	2003e7e4 	.word	0x2003e7e4
   d5dd0:	2003e7e0 	.word	0x2003e7e0
   d5dd4:	2003e7dc 	.word	0x2003e7dc
   d5dd8:	2003e7d8 	.word	0x2003e7d8
   d5ddc:	2003e7d4 	.word	0x2003e7d4
   d5de0:	2003e7d0 	.word	0x2003e7d0

000d5de4 <__aeabi_drsub>:
   d5de4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d5de8:	e002      	b.n	d5df0 <__adddf3>
   d5dea:	bf00      	nop

000d5dec <__aeabi_dsub>:
   d5dec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d5df0 <__adddf3>:
   d5df0:	b530      	push	{r4, r5, lr}
   d5df2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d5df6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d5dfa:	ea94 0f05 	teq	r4, r5
   d5dfe:	bf08      	it	eq
   d5e00:	ea90 0f02 	teqeq	r0, r2
   d5e04:	bf1f      	itttt	ne
   d5e06:	ea54 0c00 	orrsne.w	ip, r4, r0
   d5e0a:	ea55 0c02 	orrsne.w	ip, r5, r2
   d5e0e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d5e12:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5e16:	f000 80e2 	beq.w	d5fde <__adddf3+0x1ee>
   d5e1a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d5e1e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d5e22:	bfb8      	it	lt
   d5e24:	426d      	neglt	r5, r5
   d5e26:	dd0c      	ble.n	d5e42 <__adddf3+0x52>
   d5e28:	442c      	add	r4, r5
   d5e2a:	ea80 0202 	eor.w	r2, r0, r2
   d5e2e:	ea81 0303 	eor.w	r3, r1, r3
   d5e32:	ea82 0000 	eor.w	r0, r2, r0
   d5e36:	ea83 0101 	eor.w	r1, r3, r1
   d5e3a:	ea80 0202 	eor.w	r2, r0, r2
   d5e3e:	ea81 0303 	eor.w	r3, r1, r3
   d5e42:	2d36      	cmp	r5, #54	; 0x36
   d5e44:	bf88      	it	hi
   d5e46:	bd30      	pophi	{r4, r5, pc}
   d5e48:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d5e4c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5e50:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d5e54:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d5e58:	d002      	beq.n	d5e60 <__adddf3+0x70>
   d5e5a:	4240      	negs	r0, r0
   d5e5c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5e60:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d5e64:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5e68:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d5e6c:	d002      	beq.n	d5e74 <__adddf3+0x84>
   d5e6e:	4252      	negs	r2, r2
   d5e70:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d5e74:	ea94 0f05 	teq	r4, r5
   d5e78:	f000 80a7 	beq.w	d5fca <__adddf3+0x1da>
   d5e7c:	f1a4 0401 	sub.w	r4, r4, #1
   d5e80:	f1d5 0e20 	rsbs	lr, r5, #32
   d5e84:	db0d      	blt.n	d5ea2 <__adddf3+0xb2>
   d5e86:	fa02 fc0e 	lsl.w	ip, r2, lr
   d5e8a:	fa22 f205 	lsr.w	r2, r2, r5
   d5e8e:	1880      	adds	r0, r0, r2
   d5e90:	f141 0100 	adc.w	r1, r1, #0
   d5e94:	fa03 f20e 	lsl.w	r2, r3, lr
   d5e98:	1880      	adds	r0, r0, r2
   d5e9a:	fa43 f305 	asr.w	r3, r3, r5
   d5e9e:	4159      	adcs	r1, r3
   d5ea0:	e00e      	b.n	d5ec0 <__adddf3+0xd0>
   d5ea2:	f1a5 0520 	sub.w	r5, r5, #32
   d5ea6:	f10e 0e20 	add.w	lr, lr, #32
   d5eaa:	2a01      	cmp	r2, #1
   d5eac:	fa03 fc0e 	lsl.w	ip, r3, lr
   d5eb0:	bf28      	it	cs
   d5eb2:	f04c 0c02 	orrcs.w	ip, ip, #2
   d5eb6:	fa43 f305 	asr.w	r3, r3, r5
   d5eba:	18c0      	adds	r0, r0, r3
   d5ebc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d5ec0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5ec4:	d507      	bpl.n	d5ed6 <__adddf3+0xe6>
   d5ec6:	f04f 0e00 	mov.w	lr, #0
   d5eca:	f1dc 0c00 	rsbs	ip, ip, #0
   d5ece:	eb7e 0000 	sbcs.w	r0, lr, r0
   d5ed2:	eb6e 0101 	sbc.w	r1, lr, r1
   d5ed6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d5eda:	d31b      	bcc.n	d5f14 <__adddf3+0x124>
   d5edc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d5ee0:	d30c      	bcc.n	d5efc <__adddf3+0x10c>
   d5ee2:	0849      	lsrs	r1, r1, #1
   d5ee4:	ea5f 0030 	movs.w	r0, r0, rrx
   d5ee8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d5eec:	f104 0401 	add.w	r4, r4, #1
   d5ef0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d5ef4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d5ef8:	f080 809a 	bcs.w	d6030 <__adddf3+0x240>
   d5efc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d5f00:	bf08      	it	eq
   d5f02:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d5f06:	f150 0000 	adcs.w	r0, r0, #0
   d5f0a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5f0e:	ea41 0105 	orr.w	r1, r1, r5
   d5f12:	bd30      	pop	{r4, r5, pc}
   d5f14:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d5f18:	4140      	adcs	r0, r0
   d5f1a:	eb41 0101 	adc.w	r1, r1, r1
   d5f1e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5f22:	f1a4 0401 	sub.w	r4, r4, #1
   d5f26:	d1e9      	bne.n	d5efc <__adddf3+0x10c>
   d5f28:	f091 0f00 	teq	r1, #0
   d5f2c:	bf04      	itt	eq
   d5f2e:	4601      	moveq	r1, r0
   d5f30:	2000      	moveq	r0, #0
   d5f32:	fab1 f381 	clz	r3, r1
   d5f36:	bf08      	it	eq
   d5f38:	3320      	addeq	r3, #32
   d5f3a:	f1a3 030b 	sub.w	r3, r3, #11
   d5f3e:	f1b3 0220 	subs.w	r2, r3, #32
   d5f42:	da0c      	bge.n	d5f5e <__adddf3+0x16e>
   d5f44:	320c      	adds	r2, #12
   d5f46:	dd08      	ble.n	d5f5a <__adddf3+0x16a>
   d5f48:	f102 0c14 	add.w	ip, r2, #20
   d5f4c:	f1c2 020c 	rsb	r2, r2, #12
   d5f50:	fa01 f00c 	lsl.w	r0, r1, ip
   d5f54:	fa21 f102 	lsr.w	r1, r1, r2
   d5f58:	e00c      	b.n	d5f74 <__adddf3+0x184>
   d5f5a:	f102 0214 	add.w	r2, r2, #20
   d5f5e:	bfd8      	it	le
   d5f60:	f1c2 0c20 	rsble	ip, r2, #32
   d5f64:	fa01 f102 	lsl.w	r1, r1, r2
   d5f68:	fa20 fc0c 	lsr.w	ip, r0, ip
   d5f6c:	bfdc      	itt	le
   d5f6e:	ea41 010c 	orrle.w	r1, r1, ip
   d5f72:	4090      	lslle	r0, r2
   d5f74:	1ae4      	subs	r4, r4, r3
   d5f76:	bfa2      	ittt	ge
   d5f78:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d5f7c:	4329      	orrge	r1, r5
   d5f7e:	bd30      	popge	{r4, r5, pc}
   d5f80:	ea6f 0404 	mvn.w	r4, r4
   d5f84:	3c1f      	subs	r4, #31
   d5f86:	da1c      	bge.n	d5fc2 <__adddf3+0x1d2>
   d5f88:	340c      	adds	r4, #12
   d5f8a:	dc0e      	bgt.n	d5faa <__adddf3+0x1ba>
   d5f8c:	f104 0414 	add.w	r4, r4, #20
   d5f90:	f1c4 0220 	rsb	r2, r4, #32
   d5f94:	fa20 f004 	lsr.w	r0, r0, r4
   d5f98:	fa01 f302 	lsl.w	r3, r1, r2
   d5f9c:	ea40 0003 	orr.w	r0, r0, r3
   d5fa0:	fa21 f304 	lsr.w	r3, r1, r4
   d5fa4:	ea45 0103 	orr.w	r1, r5, r3
   d5fa8:	bd30      	pop	{r4, r5, pc}
   d5faa:	f1c4 040c 	rsb	r4, r4, #12
   d5fae:	f1c4 0220 	rsb	r2, r4, #32
   d5fb2:	fa20 f002 	lsr.w	r0, r0, r2
   d5fb6:	fa01 f304 	lsl.w	r3, r1, r4
   d5fba:	ea40 0003 	orr.w	r0, r0, r3
   d5fbe:	4629      	mov	r1, r5
   d5fc0:	bd30      	pop	{r4, r5, pc}
   d5fc2:	fa21 f004 	lsr.w	r0, r1, r4
   d5fc6:	4629      	mov	r1, r5
   d5fc8:	bd30      	pop	{r4, r5, pc}
   d5fca:	f094 0f00 	teq	r4, #0
   d5fce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d5fd2:	bf06      	itte	eq
   d5fd4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d5fd8:	3401      	addeq	r4, #1
   d5fda:	3d01      	subne	r5, #1
   d5fdc:	e74e      	b.n	d5e7c <__adddf3+0x8c>
   d5fde:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5fe2:	bf18      	it	ne
   d5fe4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5fe8:	d029      	beq.n	d603e <__adddf3+0x24e>
   d5fea:	ea94 0f05 	teq	r4, r5
   d5fee:	bf08      	it	eq
   d5ff0:	ea90 0f02 	teqeq	r0, r2
   d5ff4:	d005      	beq.n	d6002 <__adddf3+0x212>
   d5ff6:	ea54 0c00 	orrs.w	ip, r4, r0
   d5ffa:	bf04      	itt	eq
   d5ffc:	4619      	moveq	r1, r3
   d5ffe:	4610      	moveq	r0, r2
   d6000:	bd30      	pop	{r4, r5, pc}
   d6002:	ea91 0f03 	teq	r1, r3
   d6006:	bf1e      	ittt	ne
   d6008:	2100      	movne	r1, #0
   d600a:	2000      	movne	r0, #0
   d600c:	bd30      	popne	{r4, r5, pc}
   d600e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d6012:	d105      	bne.n	d6020 <__adddf3+0x230>
   d6014:	0040      	lsls	r0, r0, #1
   d6016:	4149      	adcs	r1, r1
   d6018:	bf28      	it	cs
   d601a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d601e:	bd30      	pop	{r4, r5, pc}
   d6020:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d6024:	bf3c      	itt	cc
   d6026:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d602a:	bd30      	popcc	{r4, r5, pc}
   d602c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6030:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d6034:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6038:	f04f 0000 	mov.w	r0, #0
   d603c:	bd30      	pop	{r4, r5, pc}
   d603e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6042:	bf1a      	itte	ne
   d6044:	4619      	movne	r1, r3
   d6046:	4610      	movne	r0, r2
   d6048:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d604c:	bf1c      	itt	ne
   d604e:	460b      	movne	r3, r1
   d6050:	4602      	movne	r2, r0
   d6052:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6056:	bf06      	itte	eq
   d6058:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d605c:	ea91 0f03 	teqeq	r1, r3
   d6060:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d6064:	bd30      	pop	{r4, r5, pc}
   d6066:	bf00      	nop

000d6068 <__aeabi_ui2d>:
   d6068:	f090 0f00 	teq	r0, #0
   d606c:	bf04      	itt	eq
   d606e:	2100      	moveq	r1, #0
   d6070:	4770      	bxeq	lr
   d6072:	b530      	push	{r4, r5, lr}
   d6074:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6078:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d607c:	f04f 0500 	mov.w	r5, #0
   d6080:	f04f 0100 	mov.w	r1, #0
   d6084:	e750      	b.n	d5f28 <__adddf3+0x138>
   d6086:	bf00      	nop

000d6088 <__aeabi_i2d>:
   d6088:	f090 0f00 	teq	r0, #0
   d608c:	bf04      	itt	eq
   d608e:	2100      	moveq	r1, #0
   d6090:	4770      	bxeq	lr
   d6092:	b530      	push	{r4, r5, lr}
   d6094:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6098:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d609c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d60a0:	bf48      	it	mi
   d60a2:	4240      	negmi	r0, r0
   d60a4:	f04f 0100 	mov.w	r1, #0
   d60a8:	e73e      	b.n	d5f28 <__adddf3+0x138>
   d60aa:	bf00      	nop

000d60ac <__aeabi_f2d>:
   d60ac:	0042      	lsls	r2, r0, #1
   d60ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d60b2:	ea4f 0131 	mov.w	r1, r1, rrx
   d60b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d60ba:	bf1f      	itttt	ne
   d60bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d60c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d60c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d60c8:	4770      	bxne	lr
   d60ca:	f092 0f00 	teq	r2, #0
   d60ce:	bf14      	ite	ne
   d60d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d60d4:	4770      	bxeq	lr
   d60d6:	b530      	push	{r4, r5, lr}
   d60d8:	f44f 7460 	mov.w	r4, #896	; 0x380
   d60dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d60e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d60e4:	e720      	b.n	d5f28 <__adddf3+0x138>
   d60e6:	bf00      	nop

000d60e8 <__aeabi_ul2d>:
   d60e8:	ea50 0201 	orrs.w	r2, r0, r1
   d60ec:	bf08      	it	eq
   d60ee:	4770      	bxeq	lr
   d60f0:	b530      	push	{r4, r5, lr}
   d60f2:	f04f 0500 	mov.w	r5, #0
   d60f6:	e00a      	b.n	d610e <__aeabi_l2d+0x16>

000d60f8 <__aeabi_l2d>:
   d60f8:	ea50 0201 	orrs.w	r2, r0, r1
   d60fc:	bf08      	it	eq
   d60fe:	4770      	bxeq	lr
   d6100:	b530      	push	{r4, r5, lr}
   d6102:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d6106:	d502      	bpl.n	d610e <__aeabi_l2d+0x16>
   d6108:	4240      	negs	r0, r0
   d610a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d610e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6112:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6116:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d611a:	f43f aedc 	beq.w	d5ed6 <__adddf3+0xe6>
   d611e:	f04f 0203 	mov.w	r2, #3
   d6122:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6126:	bf18      	it	ne
   d6128:	3203      	addne	r2, #3
   d612a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d612e:	bf18      	it	ne
   d6130:	3203      	addne	r2, #3
   d6132:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d6136:	f1c2 0320 	rsb	r3, r2, #32
   d613a:	fa00 fc03 	lsl.w	ip, r0, r3
   d613e:	fa20 f002 	lsr.w	r0, r0, r2
   d6142:	fa01 fe03 	lsl.w	lr, r1, r3
   d6146:	ea40 000e 	orr.w	r0, r0, lr
   d614a:	fa21 f102 	lsr.w	r1, r1, r2
   d614e:	4414      	add	r4, r2
   d6150:	e6c1      	b.n	d5ed6 <__adddf3+0xe6>
   d6152:	bf00      	nop

000d6154 <__aeabi_dmul>:
   d6154:	b570      	push	{r4, r5, r6, lr}
   d6156:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d615a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d615e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6162:	bf1d      	ittte	ne
   d6164:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6168:	ea94 0f0c 	teqne	r4, ip
   d616c:	ea95 0f0c 	teqne	r5, ip
   d6170:	f000 f8de 	bleq	d6330 <__aeabi_dmul+0x1dc>
   d6174:	442c      	add	r4, r5
   d6176:	ea81 0603 	eor.w	r6, r1, r3
   d617a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d617e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d6182:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d6186:	bf18      	it	ne
   d6188:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d618c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6190:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6194:	d038      	beq.n	d6208 <__aeabi_dmul+0xb4>
   d6196:	fba0 ce02 	umull	ip, lr, r0, r2
   d619a:	f04f 0500 	mov.w	r5, #0
   d619e:	fbe1 e502 	umlal	lr, r5, r1, r2
   d61a2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d61a6:	fbe0 e503 	umlal	lr, r5, r0, r3
   d61aa:	f04f 0600 	mov.w	r6, #0
   d61ae:	fbe1 5603 	umlal	r5, r6, r1, r3
   d61b2:	f09c 0f00 	teq	ip, #0
   d61b6:	bf18      	it	ne
   d61b8:	f04e 0e01 	orrne.w	lr, lr, #1
   d61bc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d61c0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d61c4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d61c8:	d204      	bcs.n	d61d4 <__aeabi_dmul+0x80>
   d61ca:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d61ce:	416d      	adcs	r5, r5
   d61d0:	eb46 0606 	adc.w	r6, r6, r6
   d61d4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d61d8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d61dc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d61e0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d61e4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d61e8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d61ec:	bf88      	it	hi
   d61ee:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d61f2:	d81e      	bhi.n	d6232 <__aeabi_dmul+0xde>
   d61f4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d61f8:	bf08      	it	eq
   d61fa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d61fe:	f150 0000 	adcs.w	r0, r0, #0
   d6202:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6206:	bd70      	pop	{r4, r5, r6, pc}
   d6208:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d620c:	ea46 0101 	orr.w	r1, r6, r1
   d6210:	ea40 0002 	orr.w	r0, r0, r2
   d6214:	ea81 0103 	eor.w	r1, r1, r3
   d6218:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d621c:	bfc2      	ittt	gt
   d621e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6222:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6226:	bd70      	popgt	{r4, r5, r6, pc}
   d6228:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d622c:	f04f 0e00 	mov.w	lr, #0
   d6230:	3c01      	subs	r4, #1
   d6232:	f300 80ab 	bgt.w	d638c <__aeabi_dmul+0x238>
   d6236:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d623a:	bfde      	ittt	le
   d623c:	2000      	movle	r0, #0
   d623e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d6242:	bd70      	pople	{r4, r5, r6, pc}
   d6244:	f1c4 0400 	rsb	r4, r4, #0
   d6248:	3c20      	subs	r4, #32
   d624a:	da35      	bge.n	d62b8 <__aeabi_dmul+0x164>
   d624c:	340c      	adds	r4, #12
   d624e:	dc1b      	bgt.n	d6288 <__aeabi_dmul+0x134>
   d6250:	f104 0414 	add.w	r4, r4, #20
   d6254:	f1c4 0520 	rsb	r5, r4, #32
   d6258:	fa00 f305 	lsl.w	r3, r0, r5
   d625c:	fa20 f004 	lsr.w	r0, r0, r4
   d6260:	fa01 f205 	lsl.w	r2, r1, r5
   d6264:	ea40 0002 	orr.w	r0, r0, r2
   d6268:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d626c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6270:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6274:	fa21 f604 	lsr.w	r6, r1, r4
   d6278:	eb42 0106 	adc.w	r1, r2, r6
   d627c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6280:	bf08      	it	eq
   d6282:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6286:	bd70      	pop	{r4, r5, r6, pc}
   d6288:	f1c4 040c 	rsb	r4, r4, #12
   d628c:	f1c4 0520 	rsb	r5, r4, #32
   d6290:	fa00 f304 	lsl.w	r3, r0, r4
   d6294:	fa20 f005 	lsr.w	r0, r0, r5
   d6298:	fa01 f204 	lsl.w	r2, r1, r4
   d629c:	ea40 0002 	orr.w	r0, r0, r2
   d62a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d62a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d62a8:	f141 0100 	adc.w	r1, r1, #0
   d62ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d62b0:	bf08      	it	eq
   d62b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d62b6:	bd70      	pop	{r4, r5, r6, pc}
   d62b8:	f1c4 0520 	rsb	r5, r4, #32
   d62bc:	fa00 f205 	lsl.w	r2, r0, r5
   d62c0:	ea4e 0e02 	orr.w	lr, lr, r2
   d62c4:	fa20 f304 	lsr.w	r3, r0, r4
   d62c8:	fa01 f205 	lsl.w	r2, r1, r5
   d62cc:	ea43 0302 	orr.w	r3, r3, r2
   d62d0:	fa21 f004 	lsr.w	r0, r1, r4
   d62d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d62d8:	fa21 f204 	lsr.w	r2, r1, r4
   d62dc:	ea20 0002 	bic.w	r0, r0, r2
   d62e0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d62e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d62e8:	bf08      	it	eq
   d62ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d62ee:	bd70      	pop	{r4, r5, r6, pc}
   d62f0:	f094 0f00 	teq	r4, #0
   d62f4:	d10f      	bne.n	d6316 <__aeabi_dmul+0x1c2>
   d62f6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d62fa:	0040      	lsls	r0, r0, #1
   d62fc:	eb41 0101 	adc.w	r1, r1, r1
   d6300:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6304:	bf08      	it	eq
   d6306:	3c01      	subeq	r4, #1
   d6308:	d0f7      	beq.n	d62fa <__aeabi_dmul+0x1a6>
   d630a:	ea41 0106 	orr.w	r1, r1, r6
   d630e:	f095 0f00 	teq	r5, #0
   d6312:	bf18      	it	ne
   d6314:	4770      	bxne	lr
   d6316:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d631a:	0052      	lsls	r2, r2, #1
   d631c:	eb43 0303 	adc.w	r3, r3, r3
   d6320:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d6324:	bf08      	it	eq
   d6326:	3d01      	subeq	r5, #1
   d6328:	d0f7      	beq.n	d631a <__aeabi_dmul+0x1c6>
   d632a:	ea43 0306 	orr.w	r3, r3, r6
   d632e:	4770      	bx	lr
   d6330:	ea94 0f0c 	teq	r4, ip
   d6334:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6338:	bf18      	it	ne
   d633a:	ea95 0f0c 	teqne	r5, ip
   d633e:	d00c      	beq.n	d635a <__aeabi_dmul+0x206>
   d6340:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6344:	bf18      	it	ne
   d6346:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d634a:	d1d1      	bne.n	d62f0 <__aeabi_dmul+0x19c>
   d634c:	ea81 0103 	eor.w	r1, r1, r3
   d6350:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6354:	f04f 0000 	mov.w	r0, #0
   d6358:	bd70      	pop	{r4, r5, r6, pc}
   d635a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d635e:	bf06      	itte	eq
   d6360:	4610      	moveq	r0, r2
   d6362:	4619      	moveq	r1, r3
   d6364:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6368:	d019      	beq.n	d639e <__aeabi_dmul+0x24a>
   d636a:	ea94 0f0c 	teq	r4, ip
   d636e:	d102      	bne.n	d6376 <__aeabi_dmul+0x222>
   d6370:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d6374:	d113      	bne.n	d639e <__aeabi_dmul+0x24a>
   d6376:	ea95 0f0c 	teq	r5, ip
   d637a:	d105      	bne.n	d6388 <__aeabi_dmul+0x234>
   d637c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d6380:	bf1c      	itt	ne
   d6382:	4610      	movne	r0, r2
   d6384:	4619      	movne	r1, r3
   d6386:	d10a      	bne.n	d639e <__aeabi_dmul+0x24a>
   d6388:	ea81 0103 	eor.w	r1, r1, r3
   d638c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6390:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6394:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6398:	f04f 0000 	mov.w	r0, #0
   d639c:	bd70      	pop	{r4, r5, r6, pc}
   d639e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d63a2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d63a6:	bd70      	pop	{r4, r5, r6, pc}

000d63a8 <__aeabi_ddiv>:
   d63a8:	b570      	push	{r4, r5, r6, lr}
   d63aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d63ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d63b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d63b6:	bf1d      	ittte	ne
   d63b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d63bc:	ea94 0f0c 	teqne	r4, ip
   d63c0:	ea95 0f0c 	teqne	r5, ip
   d63c4:	f000 f8a7 	bleq	d6516 <__aeabi_ddiv+0x16e>
   d63c8:	eba4 0405 	sub.w	r4, r4, r5
   d63cc:	ea81 0e03 	eor.w	lr, r1, r3
   d63d0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d63d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d63d8:	f000 8088 	beq.w	d64ec <__aeabi_ddiv+0x144>
   d63dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d63e0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d63e4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d63e8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d63ec:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d63f0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d63f4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d63f8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d63fc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d6400:	429d      	cmp	r5, r3
   d6402:	bf08      	it	eq
   d6404:	4296      	cmpeq	r6, r2
   d6406:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d640a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d640e:	d202      	bcs.n	d6416 <__aeabi_ddiv+0x6e>
   d6410:	085b      	lsrs	r3, r3, #1
   d6412:	ea4f 0232 	mov.w	r2, r2, rrx
   d6416:	1ab6      	subs	r6, r6, r2
   d6418:	eb65 0503 	sbc.w	r5, r5, r3
   d641c:	085b      	lsrs	r3, r3, #1
   d641e:	ea4f 0232 	mov.w	r2, r2, rrx
   d6422:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d6426:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d642a:	ebb6 0e02 	subs.w	lr, r6, r2
   d642e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6432:	bf22      	ittt	cs
   d6434:	1ab6      	subcs	r6, r6, r2
   d6436:	4675      	movcs	r5, lr
   d6438:	ea40 000c 	orrcs.w	r0, r0, ip
   d643c:	085b      	lsrs	r3, r3, #1
   d643e:	ea4f 0232 	mov.w	r2, r2, rrx
   d6442:	ebb6 0e02 	subs.w	lr, r6, r2
   d6446:	eb75 0e03 	sbcs.w	lr, r5, r3
   d644a:	bf22      	ittt	cs
   d644c:	1ab6      	subcs	r6, r6, r2
   d644e:	4675      	movcs	r5, lr
   d6450:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d6454:	085b      	lsrs	r3, r3, #1
   d6456:	ea4f 0232 	mov.w	r2, r2, rrx
   d645a:	ebb6 0e02 	subs.w	lr, r6, r2
   d645e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6462:	bf22      	ittt	cs
   d6464:	1ab6      	subcs	r6, r6, r2
   d6466:	4675      	movcs	r5, lr
   d6468:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d646c:	085b      	lsrs	r3, r3, #1
   d646e:	ea4f 0232 	mov.w	r2, r2, rrx
   d6472:	ebb6 0e02 	subs.w	lr, r6, r2
   d6476:	eb75 0e03 	sbcs.w	lr, r5, r3
   d647a:	bf22      	ittt	cs
   d647c:	1ab6      	subcs	r6, r6, r2
   d647e:	4675      	movcs	r5, lr
   d6480:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d6484:	ea55 0e06 	orrs.w	lr, r5, r6
   d6488:	d018      	beq.n	d64bc <__aeabi_ddiv+0x114>
   d648a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d648e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d6492:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d6496:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d649a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d649e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d64a2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d64a6:	d1c0      	bne.n	d642a <__aeabi_ddiv+0x82>
   d64a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d64ac:	d10b      	bne.n	d64c6 <__aeabi_ddiv+0x11e>
   d64ae:	ea41 0100 	orr.w	r1, r1, r0
   d64b2:	f04f 0000 	mov.w	r0, #0
   d64b6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d64ba:	e7b6      	b.n	d642a <__aeabi_ddiv+0x82>
   d64bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d64c0:	bf04      	itt	eq
   d64c2:	4301      	orreq	r1, r0
   d64c4:	2000      	moveq	r0, #0
   d64c6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d64ca:	bf88      	it	hi
   d64cc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d64d0:	f63f aeaf 	bhi.w	d6232 <__aeabi_dmul+0xde>
   d64d4:	ebb5 0c03 	subs.w	ip, r5, r3
   d64d8:	bf04      	itt	eq
   d64da:	ebb6 0c02 	subseq.w	ip, r6, r2
   d64de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d64e2:	f150 0000 	adcs.w	r0, r0, #0
   d64e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d64ea:	bd70      	pop	{r4, r5, r6, pc}
   d64ec:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d64f0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d64f4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d64f8:	bfc2      	ittt	gt
   d64fa:	ebd4 050c 	rsbsgt	r5, r4, ip
   d64fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6502:	bd70      	popgt	{r4, r5, r6, pc}
   d6504:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6508:	f04f 0e00 	mov.w	lr, #0
   d650c:	3c01      	subs	r4, #1
   d650e:	e690      	b.n	d6232 <__aeabi_dmul+0xde>
   d6510:	ea45 0e06 	orr.w	lr, r5, r6
   d6514:	e68d      	b.n	d6232 <__aeabi_dmul+0xde>
   d6516:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d651a:	ea94 0f0c 	teq	r4, ip
   d651e:	bf08      	it	eq
   d6520:	ea95 0f0c 	teqeq	r5, ip
   d6524:	f43f af3b 	beq.w	d639e <__aeabi_dmul+0x24a>
   d6528:	ea94 0f0c 	teq	r4, ip
   d652c:	d10a      	bne.n	d6544 <__aeabi_ddiv+0x19c>
   d652e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6532:	f47f af34 	bne.w	d639e <__aeabi_dmul+0x24a>
   d6536:	ea95 0f0c 	teq	r5, ip
   d653a:	f47f af25 	bne.w	d6388 <__aeabi_dmul+0x234>
   d653e:	4610      	mov	r0, r2
   d6540:	4619      	mov	r1, r3
   d6542:	e72c      	b.n	d639e <__aeabi_dmul+0x24a>
   d6544:	ea95 0f0c 	teq	r5, ip
   d6548:	d106      	bne.n	d6558 <__aeabi_ddiv+0x1b0>
   d654a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d654e:	f43f aefd 	beq.w	d634c <__aeabi_dmul+0x1f8>
   d6552:	4610      	mov	r0, r2
   d6554:	4619      	mov	r1, r3
   d6556:	e722      	b.n	d639e <__aeabi_dmul+0x24a>
   d6558:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d655c:	bf18      	it	ne
   d655e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6562:	f47f aec5 	bne.w	d62f0 <__aeabi_dmul+0x19c>
   d6566:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d656a:	f47f af0d 	bne.w	d6388 <__aeabi_dmul+0x234>
   d656e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d6572:	f47f aeeb 	bne.w	d634c <__aeabi_dmul+0x1f8>
   d6576:	e712      	b.n	d639e <__aeabi_dmul+0x24a>

000d6578 <__gedf2>:
   d6578:	f04f 3cff 	mov.w	ip, #4294967295
   d657c:	e006      	b.n	d658c <__cmpdf2+0x4>
   d657e:	bf00      	nop

000d6580 <__ledf2>:
   d6580:	f04f 0c01 	mov.w	ip, #1
   d6584:	e002      	b.n	d658c <__cmpdf2+0x4>
   d6586:	bf00      	nop

000d6588 <__cmpdf2>:
   d6588:	f04f 0c01 	mov.w	ip, #1
   d658c:	f84d cd04 	str.w	ip, [sp, #-4]!
   d6590:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6594:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6598:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d659c:	bf18      	it	ne
   d659e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d65a2:	d01b      	beq.n	d65dc <__cmpdf2+0x54>
   d65a4:	b001      	add	sp, #4
   d65a6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d65aa:	bf0c      	ite	eq
   d65ac:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d65b0:	ea91 0f03 	teqne	r1, r3
   d65b4:	bf02      	ittt	eq
   d65b6:	ea90 0f02 	teqeq	r0, r2
   d65ba:	2000      	moveq	r0, #0
   d65bc:	4770      	bxeq	lr
   d65be:	f110 0f00 	cmn.w	r0, #0
   d65c2:	ea91 0f03 	teq	r1, r3
   d65c6:	bf58      	it	pl
   d65c8:	4299      	cmppl	r1, r3
   d65ca:	bf08      	it	eq
   d65cc:	4290      	cmpeq	r0, r2
   d65ce:	bf2c      	ite	cs
   d65d0:	17d8      	asrcs	r0, r3, #31
   d65d2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d65d6:	f040 0001 	orr.w	r0, r0, #1
   d65da:	4770      	bx	lr
   d65dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d65e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d65e4:	d102      	bne.n	d65ec <__cmpdf2+0x64>
   d65e6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d65ea:	d107      	bne.n	d65fc <__cmpdf2+0x74>
   d65ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d65f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d65f4:	d1d6      	bne.n	d65a4 <__cmpdf2+0x1c>
   d65f6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d65fa:	d0d3      	beq.n	d65a4 <__cmpdf2+0x1c>
   d65fc:	f85d 0b04 	ldr.w	r0, [sp], #4
   d6600:	4770      	bx	lr
   d6602:	bf00      	nop

000d6604 <__aeabi_cdrcmple>:
   d6604:	4684      	mov	ip, r0
   d6606:	4610      	mov	r0, r2
   d6608:	4662      	mov	r2, ip
   d660a:	468c      	mov	ip, r1
   d660c:	4619      	mov	r1, r3
   d660e:	4663      	mov	r3, ip
   d6610:	e000      	b.n	d6614 <__aeabi_cdcmpeq>
   d6612:	bf00      	nop

000d6614 <__aeabi_cdcmpeq>:
   d6614:	b501      	push	{r0, lr}
   d6616:	f7ff ffb7 	bl	d6588 <__cmpdf2>
   d661a:	2800      	cmp	r0, #0
   d661c:	bf48      	it	mi
   d661e:	f110 0f00 	cmnmi.w	r0, #0
   d6622:	bd01      	pop	{r0, pc}

000d6624 <__aeabi_dcmpeq>:
   d6624:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6628:	f7ff fff4 	bl	d6614 <__aeabi_cdcmpeq>
   d662c:	bf0c      	ite	eq
   d662e:	2001      	moveq	r0, #1
   d6630:	2000      	movne	r0, #0
   d6632:	f85d fb08 	ldr.w	pc, [sp], #8
   d6636:	bf00      	nop

000d6638 <__aeabi_dcmplt>:
   d6638:	f84d ed08 	str.w	lr, [sp, #-8]!
   d663c:	f7ff ffea 	bl	d6614 <__aeabi_cdcmpeq>
   d6640:	bf34      	ite	cc
   d6642:	2001      	movcc	r0, #1
   d6644:	2000      	movcs	r0, #0
   d6646:	f85d fb08 	ldr.w	pc, [sp], #8
   d664a:	bf00      	nop

000d664c <__aeabi_dcmple>:
   d664c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6650:	f7ff ffe0 	bl	d6614 <__aeabi_cdcmpeq>
   d6654:	bf94      	ite	ls
   d6656:	2001      	movls	r0, #1
   d6658:	2000      	movhi	r0, #0
   d665a:	f85d fb08 	ldr.w	pc, [sp], #8
   d665e:	bf00      	nop

000d6660 <__aeabi_dcmpge>:
   d6660:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6664:	f7ff ffce 	bl	d6604 <__aeabi_cdrcmple>
   d6668:	bf94      	ite	ls
   d666a:	2001      	movls	r0, #1
   d666c:	2000      	movhi	r0, #0
   d666e:	f85d fb08 	ldr.w	pc, [sp], #8
   d6672:	bf00      	nop

000d6674 <__aeabi_dcmpgt>:
   d6674:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6678:	f7ff ffc4 	bl	d6604 <__aeabi_cdrcmple>
   d667c:	bf34      	ite	cc
   d667e:	2001      	movcc	r0, #1
   d6680:	2000      	movcs	r0, #0
   d6682:	f85d fb08 	ldr.w	pc, [sp], #8
   d6686:	bf00      	nop

000d6688 <__aeabi_d2uiz>:
   d6688:	004a      	lsls	r2, r1, #1
   d668a:	d211      	bcs.n	d66b0 <__aeabi_d2uiz+0x28>
   d668c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6690:	d211      	bcs.n	d66b6 <__aeabi_d2uiz+0x2e>
   d6692:	d50d      	bpl.n	d66b0 <__aeabi_d2uiz+0x28>
   d6694:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6698:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d669c:	d40e      	bmi.n	d66bc <__aeabi_d2uiz+0x34>
   d669e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d66a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d66a6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d66aa:	fa23 f002 	lsr.w	r0, r3, r2
   d66ae:	4770      	bx	lr
   d66b0:	f04f 0000 	mov.w	r0, #0
   d66b4:	4770      	bx	lr
   d66b6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d66ba:	d102      	bne.n	d66c2 <__aeabi_d2uiz+0x3a>
   d66bc:	f04f 30ff 	mov.w	r0, #4294967295
   d66c0:	4770      	bx	lr
   d66c2:	f04f 0000 	mov.w	r0, #0
   d66c6:	4770      	bx	lr

000d66c8 <__aeabi_uldivmod>:
   d66c8:	b953      	cbnz	r3, d66e0 <__aeabi_uldivmod+0x18>
   d66ca:	b94a      	cbnz	r2, d66e0 <__aeabi_uldivmod+0x18>
   d66cc:	2900      	cmp	r1, #0
   d66ce:	bf08      	it	eq
   d66d0:	2800      	cmpeq	r0, #0
   d66d2:	bf1c      	itt	ne
   d66d4:	f04f 31ff 	movne.w	r1, #4294967295
   d66d8:	f04f 30ff 	movne.w	r0, #4294967295
   d66dc:	f000 b9a2 	b.w	d6a24 <__aeabi_idiv0>
   d66e0:	f1ad 0c08 	sub.w	ip, sp, #8
   d66e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d66e8:	f000 f82a 	bl	d6740 <__udivmoddi4>
   d66ec:	f8dd e004 	ldr.w	lr, [sp, #4]
   d66f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d66f4:	b004      	add	sp, #16
   d66f6:	4770      	bx	lr

000d66f8 <__aeabi_d2ulz>:
   d66f8:	b5d0      	push	{r4, r6, r7, lr}
   d66fa:	2200      	movs	r2, #0
   d66fc:	4b0e      	ldr	r3, [pc, #56]	; (d6738 <__aeabi_d2ulz+0x40>)
   d66fe:	4606      	mov	r6, r0
   d6700:	460f      	mov	r7, r1
   d6702:	f7ff fd27 	bl	d6154 <__aeabi_dmul>
   d6706:	f7ff ffbf 	bl	d6688 <__aeabi_d2uiz>
   d670a:	4604      	mov	r4, r0
   d670c:	f7ff fcac 	bl	d6068 <__aeabi_ui2d>
   d6710:	2200      	movs	r2, #0
   d6712:	4b0a      	ldr	r3, [pc, #40]	; (d673c <__aeabi_d2ulz+0x44>)
   d6714:	f7ff fd1e 	bl	d6154 <__aeabi_dmul>
   d6718:	4602      	mov	r2, r0
   d671a:	460b      	mov	r3, r1
   d671c:	4630      	mov	r0, r6
   d671e:	4639      	mov	r1, r7
   d6720:	f7ff fb64 	bl	d5dec <__aeabi_dsub>
   d6724:	f7ff ffb0 	bl	d6688 <__aeabi_d2uiz>
   d6728:	4623      	mov	r3, r4
   d672a:	2200      	movs	r2, #0
   d672c:	ea42 0200 	orr.w	r2, r2, r0
   d6730:	4610      	mov	r0, r2
   d6732:	4619      	mov	r1, r3
   d6734:	bdd0      	pop	{r4, r6, r7, pc}
   d6736:	bf00      	nop
   d6738:	3df00000 	.word	0x3df00000
   d673c:	41f00000 	.word	0x41f00000

000d6740 <__udivmoddi4>:
   d6740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6744:	468c      	mov	ip, r1
   d6746:	460e      	mov	r6, r1
   d6748:	4604      	mov	r4, r0
   d674a:	9d08      	ldr	r5, [sp, #32]
   d674c:	2b00      	cmp	r3, #0
   d674e:	d150      	bne.n	d67f2 <__udivmoddi4+0xb2>
   d6750:	428a      	cmp	r2, r1
   d6752:	4617      	mov	r7, r2
   d6754:	d96c      	bls.n	d6830 <__udivmoddi4+0xf0>
   d6756:	fab2 fe82 	clz	lr, r2
   d675a:	f1be 0f00 	cmp.w	lr, #0
   d675e:	d00b      	beq.n	d6778 <__udivmoddi4+0x38>
   d6760:	f1ce 0420 	rsb	r4, lr, #32
   d6764:	fa20 f404 	lsr.w	r4, r0, r4
   d6768:	fa01 f60e 	lsl.w	r6, r1, lr
   d676c:	ea44 0c06 	orr.w	ip, r4, r6
   d6770:	fa02 f70e 	lsl.w	r7, r2, lr
   d6774:	fa00 f40e 	lsl.w	r4, r0, lr
   d6778:	ea4f 4917 	mov.w	r9, r7, lsr #16
   d677c:	0c22      	lsrs	r2, r4, #16
   d677e:	fbbc f0f9 	udiv	r0, ip, r9
   d6782:	fa1f f887 	uxth.w	r8, r7
   d6786:	fb09 c610 	mls	r6, r9, r0, ip
   d678a:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d678e:	fb00 f308 	mul.w	r3, r0, r8
   d6792:	42b3      	cmp	r3, r6
   d6794:	d909      	bls.n	d67aa <__udivmoddi4+0x6a>
   d6796:	19f6      	adds	r6, r6, r7
   d6798:	f100 32ff 	add.w	r2, r0, #4294967295
   d679c:	f080 8122 	bcs.w	d69e4 <__udivmoddi4+0x2a4>
   d67a0:	42b3      	cmp	r3, r6
   d67a2:	f240 811f 	bls.w	d69e4 <__udivmoddi4+0x2a4>
   d67a6:	3802      	subs	r0, #2
   d67a8:	443e      	add	r6, r7
   d67aa:	1af6      	subs	r6, r6, r3
   d67ac:	b2a2      	uxth	r2, r4
   d67ae:	fbb6 f3f9 	udiv	r3, r6, r9
   d67b2:	fb09 6613 	mls	r6, r9, r3, r6
   d67b6:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d67ba:	fb03 f808 	mul.w	r8, r3, r8
   d67be:	45a0      	cmp	r8, r4
   d67c0:	d909      	bls.n	d67d6 <__udivmoddi4+0x96>
   d67c2:	19e4      	adds	r4, r4, r7
   d67c4:	f103 32ff 	add.w	r2, r3, #4294967295
   d67c8:	f080 810a 	bcs.w	d69e0 <__udivmoddi4+0x2a0>
   d67cc:	45a0      	cmp	r8, r4
   d67ce:	f240 8107 	bls.w	d69e0 <__udivmoddi4+0x2a0>
   d67d2:	3b02      	subs	r3, #2
   d67d4:	443c      	add	r4, r7
   d67d6:	ebc8 0404 	rsb	r4, r8, r4
   d67da:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d67de:	2100      	movs	r1, #0
   d67e0:	2d00      	cmp	r5, #0
   d67e2:	d062      	beq.n	d68aa <__udivmoddi4+0x16a>
   d67e4:	fa24 f40e 	lsr.w	r4, r4, lr
   d67e8:	2300      	movs	r3, #0
   d67ea:	602c      	str	r4, [r5, #0]
   d67ec:	606b      	str	r3, [r5, #4]
   d67ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d67f2:	428b      	cmp	r3, r1
   d67f4:	d907      	bls.n	d6806 <__udivmoddi4+0xc6>
   d67f6:	2d00      	cmp	r5, #0
   d67f8:	d055      	beq.n	d68a6 <__udivmoddi4+0x166>
   d67fa:	2100      	movs	r1, #0
   d67fc:	e885 0041 	stmia.w	r5, {r0, r6}
   d6800:	4608      	mov	r0, r1
   d6802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6806:	fab3 f183 	clz	r1, r3
   d680a:	2900      	cmp	r1, #0
   d680c:	f040 8090 	bne.w	d6930 <__udivmoddi4+0x1f0>
   d6810:	42b3      	cmp	r3, r6
   d6812:	d302      	bcc.n	d681a <__udivmoddi4+0xda>
   d6814:	4282      	cmp	r2, r0
   d6816:	f200 80f8 	bhi.w	d6a0a <__udivmoddi4+0x2ca>
   d681a:	1a84      	subs	r4, r0, r2
   d681c:	eb66 0603 	sbc.w	r6, r6, r3
   d6820:	2001      	movs	r0, #1
   d6822:	46b4      	mov	ip, r6
   d6824:	2d00      	cmp	r5, #0
   d6826:	d040      	beq.n	d68aa <__udivmoddi4+0x16a>
   d6828:	e885 1010 	stmia.w	r5, {r4, ip}
   d682c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6830:	b912      	cbnz	r2, d6838 <__udivmoddi4+0xf8>
   d6832:	2701      	movs	r7, #1
   d6834:	fbb7 f7f2 	udiv	r7, r7, r2
   d6838:	fab7 fe87 	clz	lr, r7
   d683c:	f1be 0f00 	cmp.w	lr, #0
   d6840:	d135      	bne.n	d68ae <__udivmoddi4+0x16e>
   d6842:	1bf3      	subs	r3, r6, r7
   d6844:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d6848:	fa1f fc87 	uxth.w	ip, r7
   d684c:	2101      	movs	r1, #1
   d684e:	fbb3 f0f8 	udiv	r0, r3, r8
   d6852:	0c22      	lsrs	r2, r4, #16
   d6854:	fb08 3610 	mls	r6, r8, r0, r3
   d6858:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d685c:	fb0c f300 	mul.w	r3, ip, r0
   d6860:	42b3      	cmp	r3, r6
   d6862:	d907      	bls.n	d6874 <__udivmoddi4+0x134>
   d6864:	19f6      	adds	r6, r6, r7
   d6866:	f100 32ff 	add.w	r2, r0, #4294967295
   d686a:	d202      	bcs.n	d6872 <__udivmoddi4+0x132>
   d686c:	42b3      	cmp	r3, r6
   d686e:	f200 80ce 	bhi.w	d6a0e <__udivmoddi4+0x2ce>
   d6872:	4610      	mov	r0, r2
   d6874:	1af6      	subs	r6, r6, r3
   d6876:	b2a2      	uxth	r2, r4
   d6878:	fbb6 f3f8 	udiv	r3, r6, r8
   d687c:	fb08 6613 	mls	r6, r8, r3, r6
   d6880:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d6884:	fb0c fc03 	mul.w	ip, ip, r3
   d6888:	45a4      	cmp	ip, r4
   d688a:	d907      	bls.n	d689c <__udivmoddi4+0x15c>
   d688c:	19e4      	adds	r4, r4, r7
   d688e:	f103 32ff 	add.w	r2, r3, #4294967295
   d6892:	d202      	bcs.n	d689a <__udivmoddi4+0x15a>
   d6894:	45a4      	cmp	ip, r4
   d6896:	f200 80b5 	bhi.w	d6a04 <__udivmoddi4+0x2c4>
   d689a:	4613      	mov	r3, r2
   d689c:	ebcc 0404 	rsb	r4, ip, r4
   d68a0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d68a4:	e79c      	b.n	d67e0 <__udivmoddi4+0xa0>
   d68a6:	4629      	mov	r1, r5
   d68a8:	4628      	mov	r0, r5
   d68aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d68ae:	f1ce 0120 	rsb	r1, lr, #32
   d68b2:	fa06 f30e 	lsl.w	r3, r6, lr
   d68b6:	fa07 f70e 	lsl.w	r7, r7, lr
   d68ba:	fa20 f901 	lsr.w	r9, r0, r1
   d68be:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d68c2:	40ce      	lsrs	r6, r1
   d68c4:	ea49 0903 	orr.w	r9, r9, r3
   d68c8:	fbb6 faf8 	udiv	sl, r6, r8
   d68cc:	ea4f 4419 	mov.w	r4, r9, lsr #16
   d68d0:	fb08 661a 	mls	r6, r8, sl, r6
   d68d4:	fa1f fc87 	uxth.w	ip, r7
   d68d8:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
   d68dc:	fb0a f20c 	mul.w	r2, sl, ip
   d68e0:	429a      	cmp	r2, r3
   d68e2:	fa00 f40e 	lsl.w	r4, r0, lr
   d68e6:	d90a      	bls.n	d68fe <__udivmoddi4+0x1be>
   d68e8:	19db      	adds	r3, r3, r7
   d68ea:	f10a 31ff 	add.w	r1, sl, #4294967295
   d68ee:	f080 8087 	bcs.w	d6a00 <__udivmoddi4+0x2c0>
   d68f2:	429a      	cmp	r2, r3
   d68f4:	f240 8084 	bls.w	d6a00 <__udivmoddi4+0x2c0>
   d68f8:	f1aa 0a02 	sub.w	sl, sl, #2
   d68fc:	443b      	add	r3, r7
   d68fe:	1a9b      	subs	r3, r3, r2
   d6900:	fa1f f989 	uxth.w	r9, r9
   d6904:	fbb3 f1f8 	udiv	r1, r3, r8
   d6908:	fb08 3311 	mls	r3, r8, r1, r3
   d690c:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
   d6910:	fb01 f60c 	mul.w	r6, r1, ip
   d6914:	429e      	cmp	r6, r3
   d6916:	d907      	bls.n	d6928 <__udivmoddi4+0x1e8>
   d6918:	19db      	adds	r3, r3, r7
   d691a:	f101 32ff 	add.w	r2, r1, #4294967295
   d691e:	d26b      	bcs.n	d69f8 <__udivmoddi4+0x2b8>
   d6920:	429e      	cmp	r6, r3
   d6922:	d969      	bls.n	d69f8 <__udivmoddi4+0x2b8>
   d6924:	3902      	subs	r1, #2
   d6926:	443b      	add	r3, r7
   d6928:	1b9b      	subs	r3, r3, r6
   d692a:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   d692e:	e78e      	b.n	d684e <__udivmoddi4+0x10e>
   d6930:	f1c1 0e20 	rsb	lr, r1, #32
   d6934:	fa22 f40e 	lsr.w	r4, r2, lr
   d6938:	408b      	lsls	r3, r1
   d693a:	4323      	orrs	r3, r4
   d693c:	fa20 f70e 	lsr.w	r7, r0, lr
   d6940:	fa06 f401 	lsl.w	r4, r6, r1
   d6944:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   d6948:	fa26 f60e 	lsr.w	r6, r6, lr
   d694c:	433c      	orrs	r4, r7
   d694e:	fbb6 f9fc 	udiv	r9, r6, ip
   d6952:	0c27      	lsrs	r7, r4, #16
   d6954:	fb0c 6619 	mls	r6, ip, r9, r6
   d6958:	fa1f f883 	uxth.w	r8, r3
   d695c:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   d6960:	fb09 f708 	mul.w	r7, r9, r8
   d6964:	42b7      	cmp	r7, r6
   d6966:	fa02 f201 	lsl.w	r2, r2, r1
   d696a:	fa00 fa01 	lsl.w	sl, r0, r1
   d696e:	d908      	bls.n	d6982 <__udivmoddi4+0x242>
   d6970:	18f6      	adds	r6, r6, r3
   d6972:	f109 30ff 	add.w	r0, r9, #4294967295
   d6976:	d241      	bcs.n	d69fc <__udivmoddi4+0x2bc>
   d6978:	42b7      	cmp	r7, r6
   d697a:	d93f      	bls.n	d69fc <__udivmoddi4+0x2bc>
   d697c:	f1a9 0902 	sub.w	r9, r9, #2
   d6980:	441e      	add	r6, r3
   d6982:	1bf6      	subs	r6, r6, r7
   d6984:	b2a0      	uxth	r0, r4
   d6986:	fbb6 f4fc 	udiv	r4, r6, ip
   d698a:	fb0c 6614 	mls	r6, ip, r4, r6
   d698e:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
   d6992:	fb04 f808 	mul.w	r8, r4, r8
   d6996:	45b8      	cmp	r8, r7
   d6998:	d907      	bls.n	d69aa <__udivmoddi4+0x26a>
   d699a:	18ff      	adds	r7, r7, r3
   d699c:	f104 30ff 	add.w	r0, r4, #4294967295
   d69a0:	d228      	bcs.n	d69f4 <__udivmoddi4+0x2b4>
   d69a2:	45b8      	cmp	r8, r7
   d69a4:	d926      	bls.n	d69f4 <__udivmoddi4+0x2b4>
   d69a6:	3c02      	subs	r4, #2
   d69a8:	441f      	add	r7, r3
   d69aa:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
   d69ae:	ebc8 0707 	rsb	r7, r8, r7
   d69b2:	fba0 8902 	umull	r8, r9, r0, r2
   d69b6:	454f      	cmp	r7, r9
   d69b8:	4644      	mov	r4, r8
   d69ba:	464e      	mov	r6, r9
   d69bc:	d314      	bcc.n	d69e8 <__udivmoddi4+0x2a8>
   d69be:	d029      	beq.n	d6a14 <__udivmoddi4+0x2d4>
   d69c0:	b365      	cbz	r5, d6a1c <__udivmoddi4+0x2dc>
   d69c2:	ebba 0304 	subs.w	r3, sl, r4
   d69c6:	eb67 0706 	sbc.w	r7, r7, r6
   d69ca:	fa07 fe0e 	lsl.w	lr, r7, lr
   d69ce:	40cb      	lsrs	r3, r1
   d69d0:	40cf      	lsrs	r7, r1
   d69d2:	ea4e 0303 	orr.w	r3, lr, r3
   d69d6:	e885 0088 	stmia.w	r5, {r3, r7}
   d69da:	2100      	movs	r1, #0
   d69dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d69e0:	4613      	mov	r3, r2
   d69e2:	e6f8      	b.n	d67d6 <__udivmoddi4+0x96>
   d69e4:	4610      	mov	r0, r2
   d69e6:	e6e0      	b.n	d67aa <__udivmoddi4+0x6a>
   d69e8:	ebb8 0402 	subs.w	r4, r8, r2
   d69ec:	eb69 0603 	sbc.w	r6, r9, r3
   d69f0:	3801      	subs	r0, #1
   d69f2:	e7e5      	b.n	d69c0 <__udivmoddi4+0x280>
   d69f4:	4604      	mov	r4, r0
   d69f6:	e7d8      	b.n	d69aa <__udivmoddi4+0x26a>
   d69f8:	4611      	mov	r1, r2
   d69fa:	e795      	b.n	d6928 <__udivmoddi4+0x1e8>
   d69fc:	4681      	mov	r9, r0
   d69fe:	e7c0      	b.n	d6982 <__udivmoddi4+0x242>
   d6a00:	468a      	mov	sl, r1
   d6a02:	e77c      	b.n	d68fe <__udivmoddi4+0x1be>
   d6a04:	3b02      	subs	r3, #2
   d6a06:	443c      	add	r4, r7
   d6a08:	e748      	b.n	d689c <__udivmoddi4+0x15c>
   d6a0a:	4608      	mov	r0, r1
   d6a0c:	e70a      	b.n	d6824 <__udivmoddi4+0xe4>
   d6a0e:	3802      	subs	r0, #2
   d6a10:	443e      	add	r6, r7
   d6a12:	e72f      	b.n	d6874 <__udivmoddi4+0x134>
   d6a14:	45c2      	cmp	sl, r8
   d6a16:	d3e7      	bcc.n	d69e8 <__udivmoddi4+0x2a8>
   d6a18:	463e      	mov	r6, r7
   d6a1a:	e7d1      	b.n	d69c0 <__udivmoddi4+0x280>
   d6a1c:	4629      	mov	r1, r5
   d6a1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6a22:	bf00      	nop

000d6a24 <__aeabi_idiv0>:
   d6a24:	4770      	bx	lr
   d6a26:	bf00      	nop

000d6a28 <__cxa_atexit>:
   d6a28:	b510      	push	{r4, lr}
   d6a2a:	4c05      	ldr	r4, [pc, #20]	; (d6a40 <__cxa_atexit+0x18>)
   d6a2c:	4613      	mov	r3, r2
   d6a2e:	b12c      	cbz	r4, d6a3c <__cxa_atexit+0x14>
   d6a30:	460a      	mov	r2, r1
   d6a32:	4601      	mov	r1, r0
   d6a34:	2002      	movs	r0, #2
   d6a36:	f3af 8000 	nop.w
   d6a3a:	bd10      	pop	{r4, pc}
   d6a3c:	4620      	mov	r0, r4
   d6a3e:	bd10      	pop	{r4, pc}
   d6a40:	00000000 	.word	0x00000000

000d6a44 <memcpy>:
   d6a44:	b510      	push	{r4, lr}
   d6a46:	1e43      	subs	r3, r0, #1
   d6a48:	440a      	add	r2, r1
   d6a4a:	4291      	cmp	r1, r2
   d6a4c:	d004      	beq.n	d6a58 <memcpy+0x14>
   d6a4e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6a52:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6a56:	e7f8      	b.n	d6a4a <memcpy+0x6>
   d6a58:	bd10      	pop	{r4, pc}

000d6a5a <memset>:
   d6a5a:	4402      	add	r2, r0
   d6a5c:	4603      	mov	r3, r0
   d6a5e:	4293      	cmp	r3, r2
   d6a60:	d002      	beq.n	d6a68 <memset+0xe>
   d6a62:	f803 1b01 	strb.w	r1, [r3], #1
   d6a66:	e7fa      	b.n	d6a5e <memset+0x4>
   d6a68:	4770      	bx	lr
	...

000d6a6c <srand>:
   d6a6c:	b538      	push	{r3, r4, r5, lr}
   d6a6e:	4b12      	ldr	r3, [pc, #72]	; (d6ab8 <srand+0x4c>)
   d6a70:	681c      	ldr	r4, [r3, #0]
   d6a72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6a74:	4605      	mov	r5, r0
   d6a76:	b9d3      	cbnz	r3, d6aae <srand+0x42>
   d6a78:	2018      	movs	r0, #24
   d6a7a:	f7fd fecf 	bl	d481c <malloc>
   d6a7e:	f243 330e 	movw	r3, #13070	; 0x330e
   d6a82:	63a0      	str	r0, [r4, #56]	; 0x38
   d6a84:	8003      	strh	r3, [r0, #0]
   d6a86:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d6a8a:	8043      	strh	r3, [r0, #2]
   d6a8c:	f241 2334 	movw	r3, #4660	; 0x1234
   d6a90:	8083      	strh	r3, [r0, #4]
   d6a92:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d6a96:	80c3      	strh	r3, [r0, #6]
   d6a98:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d6a9c:	8103      	strh	r3, [r0, #8]
   d6a9e:	2305      	movs	r3, #5
   d6aa0:	8143      	strh	r3, [r0, #10]
   d6aa2:	230b      	movs	r3, #11
   d6aa4:	8183      	strh	r3, [r0, #12]
   d6aa6:	2201      	movs	r2, #1
   d6aa8:	2300      	movs	r3, #0
   d6aaa:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6aae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6ab0:	2200      	movs	r2, #0
   d6ab2:	611d      	str	r5, [r3, #16]
   d6ab4:	615a      	str	r2, [r3, #20]
   d6ab6:	bd38      	pop	{r3, r4, r5, pc}
   d6ab8:	2003e3b0 	.word	0x2003e3b0

000d6abc <strcpy>:
   d6abc:	4603      	mov	r3, r0
   d6abe:	f811 2b01 	ldrb.w	r2, [r1], #1
   d6ac2:	f803 2b01 	strb.w	r2, [r3], #1
   d6ac6:	2a00      	cmp	r2, #0
   d6ac8:	d1f9      	bne.n	d6abe <strcpy+0x2>
   d6aca:	4770      	bx	lr

000d6acc <strdup>:
   d6acc:	4b02      	ldr	r3, [pc, #8]	; (d6ad8 <strdup+0xc>)
   d6ace:	4601      	mov	r1, r0
   d6ad0:	6818      	ldr	r0, [r3, #0]
   d6ad2:	f000 b803 	b.w	d6adc <_strdup_r>
   d6ad6:	bf00      	nop
   d6ad8:	2003e3b0 	.word	0x2003e3b0

000d6adc <_strdup_r>:
   d6adc:	b570      	push	{r4, r5, r6, lr}
   d6ade:	4606      	mov	r6, r0
   d6ae0:	4608      	mov	r0, r1
   d6ae2:	460c      	mov	r4, r1
   d6ae4:	f000 f80d 	bl	d6b02 <strlen>
   d6ae8:	1c45      	adds	r5, r0, #1
   d6aea:	4629      	mov	r1, r5
   d6aec:	4630      	mov	r0, r6
   d6aee:	f7fd feb5 	bl	d485c <_malloc_r>
   d6af2:	4606      	mov	r6, r0
   d6af4:	b118      	cbz	r0, d6afe <_strdup_r+0x22>
   d6af6:	462a      	mov	r2, r5
   d6af8:	4621      	mov	r1, r4
   d6afa:	f7ff ffa3 	bl	d6a44 <memcpy>
   d6afe:	4630      	mov	r0, r6
   d6b00:	bd70      	pop	{r4, r5, r6, pc}

000d6b02 <strlen>:
   d6b02:	4603      	mov	r3, r0
   d6b04:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6b08:	2a00      	cmp	r2, #0
   d6b0a:	d1fb      	bne.n	d6b04 <strlen+0x2>
   d6b0c:	1a18      	subs	r0, r3, r0
   d6b0e:	3801      	subs	r0, #1
   d6b10:	4770      	bx	lr

000d6b12 <link_code_end>:
	...

000d6b14 <dynalib_user>:
   d6b14:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d6b24:	0000 0000 207b 5522 5656 7369 3a22 2220     ....{ "UVVis": "
   d6b34:	2200 002c 5522 4956 2252 203a 0022 5522     .",."UVIR": "."U
   d6b44:	4956 7864 3a22 2220 2200 007d 5655 0000     VIdx": "."}.UV..

000d6b54 <_ZTVN5spark13EthernetClassE>:
	...
   d6b5c:	48cb 000d 48c1 000d 48b7 000d 48ad 000d     .H...H...H...H..
   d6b6c:	48a1 000d 4895 000d 4889 000d 4881 000d     .H...H...H...H..
   d6b7c:	4877 000d 486d 000d 59dd 000d               wH..mH...Y..

000d6b88 <_ZTV8SPIClass>:
	...
   d6b90:	48e9 000d 48eb 000d 6162 6475 5300 7265     .H...H..baud.Ser
   d6ba0:	6169 006c 6553 6972 6c61 0031 7974 6570     ial.Serial1.type
   d6bb0:	7000 7261 6d61 6300 646d 6900 0064 6e68     .param.cmd.id.hn
   d6bc0:	0064 7473 6d72 6600 6c69 0074 766c 006c     d.strm.filt.lvl.
   d6bd0:	6461 4864 6e61 6c64 7265 7200 6d65 766f     addHandler.remov
   d6be0:	4865 6e61 6c64 7265 6500 756e 486d 6e61     eHandler.enumHan
   d6bf0:	6c64 7265 0073 534a 4e4f 7453 6572 6d61     dlers.JSONStream
   d6c00:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   d6c10:	3130 7530 0020 205d 2500 0064 202c 2800     010u .] .%d., .(
   d6c20:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
   d6c30:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
   d6c40:	0066 6e6c 6600 006e 6f63 6564 6400 7465     f.ln.fn.code.det
   d6c50:	6961 006c 6f6e 656e 7400 6172 6563 6900     ail.none.trace.i
   d6c60:	666e 006f 6177 6e72 6500 7272 726f 7000     nfo.warn.error.p
   d6c70:	6e61 6369 6100 6c6c 5a00 2500 302b 6433     anic.all.Z.%+03d
   d6c80:	253a 3230 0075 5925 252d 2d6d 6425 2554     :%02u.%Y-%m-%dT%
   d6c90:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
   d6ca0:	0065 0000                                   e...

000d6ca4 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d6cac:	4e49 000d 4e4f 000d 4e93 000d 4e5d 000d     IN..ON...N..]N..
   d6cbc:	4e4b 000d                                   KN..

000d6cc0 <_ZTV9IPAddress>:
	...
   d6cc8:	53e1 000d 53d1 000d 53d3 000d               .S...S...S..

000d6cd4 <_ZTV9USBSerial>:
	...
   d6cdc:	54b9 000d 5509 000d 5517 000d 4c41 000d     .T...U...U..AL..
   d6cec:	54f5 000d 54bb 000d 54d1 000d 5503 000d     .T...T...T...U..
   d6cfc:	54e7 000d 54b5 000d                         .T...T..

000d6d04 <_ZTV11USARTSerial>:
	...
   d6d0c:	55bd 000d 560d 000d 561b 000d 4c41 000d     .U...V...V..AL..
   d6d1c:	55d1 000d 55f3 000d 55df 000d 5607 000d     .U...U...U...V..
   d6d2c:	55bf 000d 55c3 000d                         .U...U..

000d6d34 <_ZTV7TwoWire>:
	...
   d6d3c:	56e1 000d 572b 000d 5703 000d 56e3 000d     .V..+W...W...V..
   d6d4c:	570b 000d 5713 000d 571b 000d 5723 000d     .W...W...W..#W..

000d6d5c <_ZTVN5spark9MeshClassE>:
	...
   d6d64:	57f5 000d 57eb 000d 57e1 000d 57d7 000d     .W...W...W...W..
   d6d74:	57cb 000d 57bf 000d 57b3 000d 57ab 000d     .W...W...W...W..
   d6d84:	57a1 000d 5797 000d 59dd 000d               .W...W...Y..

000d6d90 <_ZTVN5spark9WiFiClassE>:
	...
   d6d98:	5957 000d 594d 000d 5943 000d 58f9 000d     WY..MY..CY...X..
   d6da8:	5937 000d 592b 000d 591f 000d 5917 000d     7Y..+Y...Y...Y..
   d6db8:	590d 000d 5903 000d 59dd 000d               .Y...Y...Y..

000d6dc4 <_ZTVN5spark12NetworkClassE>:
	...
   d6dcc:	5975 000d 597f 000d 5989 000d 5993 000d     uY...Y...Y...Y..
   d6ddc:	599d 000d 59a9 000d 59b5 000d 59c1 000d     .Y...Y...Y...Y..
   d6dec:	59c9 000d 59d3 000d 59dd 000d               .Y...Y...Y..

000d6df8 <__sf_fake_stdin>:
	...

000d6e18 <__sf_fake_stdout>:
	...

000d6e38 <__sf_fake_stderr>:
	...
   d6e58:	0043                                        C.

000d6e5a <link_const_variable_data_end>:
	...

000d6e5c <link_constructors_location>:
   d6e5c:	000d4225 	.word	0x000d4225
   d6e60:	000d44b1 	.word	0x000d44b1
   d6e64:	000d48d5 	.word	0x000d48d5
   d6e68:	000d4921 	.word	0x000d4921
   d6e6c:	000d4c31 	.word	0x000d4c31
   d6e70:	000d4cf1 	.word	0x000d4cf1
   d6e74:	000d4d01 	.word	0x000d4d01
   d6e78:	000d4d59 	.word	0x000d4d59
   d6e7c:	000d58a9 	.word	0x000d58a9
   d6e80:	000d5961 	.word	0x000d5961
   d6e84:	000d5aa9 	.word	0x000d5aa9
   d6e88:	000d5abd 	.word	0x000d5abd
   d6e8c:	000d5b55 	.word	0x000d5b55
   d6e90:	000d5bd9 	.word	0x000d5bd9
   d6e94:	000d5c9d 	.word	0x000d5c9d
   d6e98:	000d5d61 	.word	0x000d5d61

000d6e9c <link_constructors_end>:
   d6e9c:	00000000 	.word	0x00000000
