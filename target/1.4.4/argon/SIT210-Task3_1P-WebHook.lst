
d:/GDRIVE/School/DEVIT_UNI/2020_T1/SIT210/OnTrack/SIT210-03.1P/SIT210-Task3_1P-WebHook/target/1.4.4/argon/SIT210-Task3_1P-WebHook.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002f54  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000d6f70  000d6f70  00006f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000000  2003f400  2003f400  0001700c  2**0
                  CONTENTS
  5 .data         00000068  2003e33c  000d6f78  0000e33c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000044c  2003e3a4  2003e3a4  0001e3a4  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000d6fe0  000d6fe0  00016fe0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000d7008  000d7008  00017008  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000de308  00000000  00000000  0001700c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000112f2  00000000  00000000  000f5314  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001e72c  00000000  00000000  00106606  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002538  00000000  00000000  00124d32  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000045e8  00000000  00000000  0012726a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00034eb4  00000000  00000000  0012b852  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00029355  00000000  00000000  00160706  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00102216  00000000  00000000  00189a5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000ce70  00000000  00000000  0028bc74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fd55 	bl	d6adc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fd5a 	bl	d6af2 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e33c 	.word	0x2003e33c
   d4048:	000d6f78 	.word	0x000d6f78
   d404c:	2003e3a4 	.word	0x2003e3a4
   d4050:	2003e3a4 	.word	0x2003e3a4
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f000 ff27 	bl	d4eac <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d6f68 	.word	0x000d6f68
   d4080:	000d6f28 	.word	0x000d6f28

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b816 	b.w	d40b4 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f8e7 	bl	d425c <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f000 bed9 	b.w	d4e48 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 bbf7 	b.w	d4888 <malloc>

000d409a <_ZdlPv>:
   d409a:	f000 bbfd 	b.w	d4898 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 bbfb 	b.w	d4898 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr
	...

000d40b4 <setup>:
float UVVis;
float UVIR;
float UVIdx;
String thingSpeakAPIKey = "S27LXW5LQALI7PO4";

void setup() {
   d40b4:	b508      	push	{r3, lr}
  while(! uv.begin()) {
   d40b6:	480a      	ldr	r0, [pc, #40]	; (d40e0 <setup+0x2c>)
   d40b8:	f000 f9af 	bl	d441a <_ZN15Adafruit_SI11455beginEv>
   d40bc:	b948      	cbnz	r0, d40d2 <setup+0x1e>
    Serial.println("Didn't find Si1145");
   d40be:	f001 faa3 	bl	d5608 <_Z16_fetch_usbserialv>
   d40c2:	4908      	ldr	r1, [pc, #32]	; (d40e4 <setup+0x30>)
   d40c4:	f000 fe27 	bl	d4d16 <_ZN5Print7printlnEPKc>
    delay(1000);
   d40c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d40cc:	f000 fe6e 	bl	d4dac <delay>
float UVIR;
float UVIdx;
String thingSpeakAPIKey = "S27LXW5LQALI7PO4";

void setup() {
  while(! uv.begin()) {
   d40d0:	e7f1      	b.n	d40b6 <setup+0x2>
    Serial.println("Didn't find Si1145");
    delay(1000);
  }

  Serial.println("OK!");
   d40d2:	f001 fa99 	bl	d5608 <_Z16_fetch_usbserialv>
   d40d6:	4904      	ldr	r1, [pc, #16]	; (d40e8 <setup+0x34>)
}
   d40d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  while(! uv.begin()) {
    Serial.println("Didn't find Si1145");
    delay(1000);
  }

  Serial.println("OK!");
   d40dc:	f000 be1b 	b.w	d4d16 <_ZN5Print7printlnEPKc>
   d40e0:	2003e3c1 	.word	0x2003e3c1
   d40e4:	000d6bc0 	.word	0x000d6bc0
   d40e8:	000d6bd3 	.word	0x000d6bd3

000d40ec <_Z5getUVv>:
    publishData();
        
}


void getUV(){
   d40ec:	b510      	push	{r4, lr}
    UVVis = uv.readVisible();
   d40ee:	4c12      	ldr	r4, [pc, #72]	; (d4138 <_Z5getUVv+0x4c>)
   d40f0:	4620      	mov	r0, r4
   d40f2:	f000 f929 	bl	d4348 <_ZN15Adafruit_SI114511readVisibleEv>
   d40f6:	ee07 0a90 	vmov	s15, r0
   d40fa:	4b10      	ldr	r3, [pc, #64]	; (d413c <_Z5getUVv+0x50>)
   d40fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
    UVIR = uv.readIR();
   d4100:	4620      	mov	r0, r4
        
}


void getUV(){
    UVVis = uv.readVisible();
   d4102:	edc3 7a00 	vstr	s15, [r3]
    UVIR = uv.readIR();
   d4106:	f000 f922 	bl	d434e <_ZN15Adafruit_SI11456readIREv>
   d410a:	ee07 0a90 	vmov	s15, r0
   d410e:	4b0c      	ldr	r3, [pc, #48]	; (d4140 <_Z5getUVv+0x54>)
   d4110:	eef8 7a67 	vcvt.f32.u32	s15, s15
    UVIdx = uv.readUV();
   d4114:	4620      	mov	r0, r4
}


void getUV(){
    UVVis = uv.readVisible();
    UVIR = uv.readIR();
   d4116:	edc3 7a00 	vstr	s15, [r3]
    UVIdx = uv.readUV();
   d411a:	f000 f912 	bl	d4342 <_ZN15Adafruit_SI11456readUVEv>
    UVIdx /= 100.0;
   d411e:	ee07 0a90 	vmov	s15, r0
   d4122:	ed9f 7a08 	vldr	s14, [pc, #32]	; d4144 <_Z5getUVv+0x58>
   d4126:	4b08      	ldr	r3, [pc, #32]	; (d4148 <_Z5getUVv+0x5c>)
   d4128:	eef8 6a67 	vcvt.f32.u32	s13, s15
   d412c:	eec6 7a87 	vdiv.f32	s15, s13, s14
   d4130:	edc3 7a00 	vstr	s15, [r3]
   d4134:	bd10      	pop	{r4, pc}
   d4136:	bf00      	nop
   d4138:	2003e3c1 	.word	0x2003e3c1
   d413c:	2003e3bc 	.word	0x2003e3bc
   d4140:	2003e3c4 	.word	0x2003e3c4
   d4144:	42c80000 	.word	0x42c80000
   d4148:	2003e3a8 	.word	0x2003e3a8

000d414c <_Z11publishDatav>:
}



void publishData(){
   d414c:	b510      	push	{r4, lr}
   d414e:	b094      	sub	sp, #80	; 0x50

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d4150:	4936      	ldr	r1, [pc, #216]	; (d422c <_Z11publishDatav+0xe0>)
   d4152:	a808      	add	r0, sp, #32
   d4154:	f000 fd0b 	bl	d4b6e <_ZN6StringC1EPK19__FlashStringHelper>
  //Particle.publish( "UV", String(UVVis), 60, PRIVATE);
  Particle.publish("UV", "{ \"UVVis\": \"" + String(UVVis) + "\"," +
   d4158:	4b35      	ldr	r3, [pc, #212]	; (d4230 <_Z11publishDatav+0xe4>)
   d415a:	2106      	movs	r1, #6
   d415c:	ed93 0a00 	vldr	s0, [r3]
   d4160:	a804      	add	r0, sp, #16
   d4162:	f000 fd28 	bl	d4bb6 <_ZN6StringC1Efi>
   d4166:	a904      	add	r1, sp, #16
   d4168:	a808      	add	r0, sp, #32
   d416a:	f000 fd55 	bl	d4c18 <_ZplRK15StringSumHelperRK6String>
   d416e:	4931      	ldr	r1, [pc, #196]	; (d4234 <_Z11publishDatav+0xe8>)
   d4170:	f000 fd5e 	bl	d4c30 <_ZplRK15StringSumHelperPKc>
   "\"UVIR\": \"" + String(UVIR) + "\"," +
   d4174:	4930      	ldr	r1, [pc, #192]	; (d4238 <_Z11publishDatav+0xec>)
   d4176:	f000 fd5b 	bl	d4c30 <_ZplRK15StringSumHelperPKc>
   d417a:	4b30      	ldr	r3, [pc, #192]	; (d423c <_Z11publishDatav+0xf0>)
   d417c:	4604      	mov	r4, r0
   d417e:	ed93 0a00 	vldr	s0, [r3]
   d4182:	2106      	movs	r1, #6
   d4184:	a80c      	add	r0, sp, #48	; 0x30
   d4186:	f000 fd16 	bl	d4bb6 <_ZN6StringC1Efi>
   d418a:	a90c      	add	r1, sp, #48	; 0x30
   d418c:	4620      	mov	r0, r4
   d418e:	f000 fd43 	bl	d4c18 <_ZplRK15StringSumHelperRK6String>
   d4192:	4928      	ldr	r1, [pc, #160]	; (d4234 <_Z11publishDatav+0xe8>)
   d4194:	f000 fd4c 	bl	d4c30 <_ZplRK15StringSumHelperPKc>
    "\"UVIdx\": \"" + String(UVIdx) + "\"," + 
   d4198:	4929      	ldr	r1, [pc, #164]	; (d4240 <_Z11publishDatav+0xf4>)
   d419a:	f000 fd49 	bl	d4c30 <_ZplRK15StringSumHelperPKc>
   d419e:	4b29      	ldr	r3, [pc, #164]	; (d4244 <_Z11publishDatav+0xf8>)
   d41a0:	4604      	mov	r4, r0
   d41a2:	ed93 0a00 	vldr	s0, [r3]
   d41a6:	2106      	movs	r1, #6
   d41a8:	a810      	add	r0, sp, #64	; 0x40
   d41aa:	f000 fd04 	bl	d4bb6 <_ZN6StringC1Efi>
   d41ae:	a910      	add	r1, sp, #64	; 0x40
   d41b0:	4620      	mov	r0, r4
   d41b2:	f000 fd31 	bl	d4c18 <_ZplRK15StringSumHelperRK6String>
   d41b6:	491f      	ldr	r1, [pc, #124]	; (d4234 <_Z11publishDatav+0xe8>)
   d41b8:	f000 fd3a 	bl	d4c30 <_ZplRK15StringSumHelperPKc>
     "\"key\": \"" + thingSpeakAPIKey + "\" }", PRIVATE);  
   d41bc:	4922      	ldr	r1, [pc, #136]	; (d4248 <_Z11publishDatav+0xfc>)
   d41be:	f000 fd37 	bl	d4c30 <_ZplRK15StringSumHelperPKc>
   d41c2:	4922      	ldr	r1, [pc, #136]	; (d424c <_Z11publishDatav+0x100>)
   d41c4:	f000 fd28 	bl	d4c18 <_ZplRK15StringSumHelperRK6String>
   d41c8:	4921      	ldr	r1, [pc, #132]	; (d4250 <_Z11publishDatav+0x104>)
   d41ca:	f000 fd31 	bl	d4c30 <_ZplRK15StringSumHelperPKc>
   d41ce:	4b21      	ldr	r3, [pc, #132]	; (d4254 <_Z11publishDatav+0x108>)
   d41d0:	6802      	ldr	r2, [r0, #0]
   d41d2:	781b      	ldrb	r3, [r3, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d41d4:	f88d 3000 	strb.w	r3, [sp]
   d41d8:	491f      	ldr	r1, [pc, #124]	; (d4258 <_Z11publishDatav+0x10c>)
   d41da:	233c      	movs	r3, #60	; 0x3c
   d41dc:	a802      	add	r0, sp, #8
   d41de:	f000 ffc1 	bl	d5164 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d41e2:	9c03      	ldr	r4, [sp, #12]
   d41e4:	b17c      	cbz	r4, d4206 <_Z11publishDatav+0xba>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d41e6:	6863      	ldr	r3, [r4, #4]
   d41e8:	3b01      	subs	r3, #1
   d41ea:	6063      	str	r3, [r4, #4]
   d41ec:	b95b      	cbnz	r3, d4206 <_Z11publishDatav+0xba>
        {
          _M_dispose();
   d41ee:	6823      	ldr	r3, [r4, #0]
   d41f0:	4620      	mov	r0, r4
   d41f2:	689b      	ldr	r3, [r3, #8]
   d41f4:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d41f6:	68a3      	ldr	r3, [r4, #8]
   d41f8:	3b01      	subs	r3, #1
   d41fa:	60a3      	str	r3, [r4, #8]
   d41fc:	b91b      	cbnz	r3, d4206 <_Z11publishDatav+0xba>
            _M_destroy();
   d41fe:	6823      	ldr	r3, [r4, #0]
   d4200:	4620      	mov	r0, r4
   d4202:	68db      	ldr	r3, [r3, #12]
   d4204:	4798      	blx	r3

void publishData(){
  //Particle.publish( "UV", String(UVVis), 60, PRIVATE);
  Particle.publish("UV", "{ \"UVVis\": \"" + String(UVVis) + "\"," +
   "\"UVIR\": \"" + String(UVIR) + "\"," +
    "\"UVIdx\": \"" + String(UVIdx) + "\"," + 
   d4206:	a810      	add	r0, sp, #64	; 0x40
   d4208:	f000 fc6a 	bl	d4ae0 <_ZN6StringD1Ev>


void publishData(){
  //Particle.publish( "UV", String(UVVis), 60, PRIVATE);
  Particle.publish("UV", "{ \"UVVis\": \"" + String(UVVis) + "\"," +
   "\"UVIR\": \"" + String(UVIR) + "\"," +
   d420c:	a80c      	add	r0, sp, #48	; 0x30
   d420e:	f000 fc67 	bl	d4ae0 <_ZN6StringD1Ev>



void publishData(){
  //Particle.publish( "UV", String(UVVis), 60, PRIVATE);
  Particle.publish("UV", "{ \"UVVis\": \"" + String(UVVis) + "\"," +
   d4212:	a804      	add	r0, sp, #16
   d4214:	f000 fc64 	bl	d4ae0 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4218:	a808      	add	r0, sp, #32
   d421a:	f000 fc61 	bl	d4ae0 <_ZN6StringD1Ev>
   "\"UVIR\": \"" + String(UVIR) + "\"," +
    "\"UVIdx\": \"" + String(UVIdx) + "\"," + 
     "\"key\": \"" + thingSpeakAPIKey + "\" }", PRIVATE);  
  delay(30000);
   d421e:	f247 5030 	movw	r0, #30000	; 0x7530
   d4222:	f000 fdc3 	bl	d4dac <delay>
} 
   d4226:	b014      	add	sp, #80	; 0x50
   d4228:	bd10      	pop	{r4, pc}
   d422a:	bf00      	nop
   d422c:	000d6bd7 	.word	0x000d6bd7
   d4230:	2003e3bc 	.word	0x2003e3bc
   d4234:	000d6be4 	.word	0x000d6be4
   d4238:	000d6be7 	.word	0x000d6be7
   d423c:	2003e3c4 	.word	0x2003e3c4
   d4240:	000d6bf1 	.word	0x000d6bf1
   d4244:	2003e3a8 	.word	0x2003e3a8
   d4248:	000d6bfc 	.word	0x000d6bfc
   d424c:	2003e3ac 	.word	0x2003e3ac
   d4250:	000d6c05 	.word	0x000d6c05
   d4254:	2003e3c0 	.word	0x2003e3c0
   d4258:	000d6c09 	.word	0x000d6c09

000d425c <loop>:
  }

  Serial.println("OK!");
}

void loop() {
   d425c:	b508      	push	{r3, lr}
    getUV();
   d425e:	f7ff ff45 	bl	d40ec <_Z5getUVv>
    publishData();
        
}
   d4262:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Serial.println("OK!");
}

void loop() {
    getUV();
    publishData();
   d4266:	f7ff bf71 	b.w	d414c <_Z11publishDatav>
	...

000d426c <_GLOBAL__sub_I_uv>:
  Particle.publish("UV", "{ \"UVVis\": \"" + String(UVVis) + "\"," +
   "\"UVIR\": \"" + String(UVIR) + "\"," +
    "\"UVIdx\": \"" + String(UVIdx) + "\"," + 
     "\"key\": \"" + thingSpeakAPIKey + "\" }", PRIVATE);  
  delay(30000);
} 
   d426c:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d426e:	4b0a      	ldr	r3, [pc, #40]	; (d4298 <_GLOBAL__sub_I_uv+0x2c>)
Adafruit_SI1145 uv = Adafruit_SI1145();

float UVVis;
float UVIR;
float UVIdx;
String thingSpeakAPIKey = "S27LXW5LQALI7PO4";
   d4270:	4c0a      	ldr	r4, [pc, #40]	; (d429c <_GLOBAL__sub_I_uv+0x30>)
   d4272:	2201      	movs	r2, #1
   d4274:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4276:	f000 f963 	bl	d4540 <HAL_Pin_Map>
const int TEMPPIN = D2;
const int FLOWPIN = A0;
const int MOIST1PIN = A1;

//UV: 
Adafruit_SI1145 uv = Adafruit_SI1145();
   d427a:	4809      	ldr	r0, [pc, #36]	; (d42a0 <_GLOBAL__sub_I_uv+0x34>)
   d427c:	f000 f818 	bl	d42b0 <_ZN15Adafruit_SI1145C1Ev>

float UVVis;
float UVIR;
float UVIdx;
String thingSpeakAPIKey = "S27LXW5LQALI7PO4";
   d4280:	4908      	ldr	r1, [pc, #32]	; (d42a4 <_GLOBAL__sub_I_uv+0x38>)
   d4282:	4620      	mov	r0, r4
   d4284:	f000 fc73 	bl	d4b6e <_ZN6StringC1EPK19__FlashStringHelper>
   d4288:	4620      	mov	r0, r4
   d428a:	4a07      	ldr	r2, [pc, #28]	; (d42a8 <_GLOBAL__sub_I_uv+0x3c>)
   d428c:	4907      	ldr	r1, [pc, #28]	; (d42ac <_GLOBAL__sub_I_uv+0x40>)
  Particle.publish("UV", "{ \"UVVis\": \"" + String(UVVis) + "\"," +
   "\"UVIR\": \"" + String(UVIR) + "\"," +
    "\"UVIdx\": \"" + String(UVIdx) + "\"," + 
     "\"key\": \"" + thingSpeakAPIKey + "\" }", PRIVATE);  
  delay(30000);
} 
   d428e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
Adafruit_SI1145 uv = Adafruit_SI1145();

float UVVis;
float UVIR;
float UVIdx;
String thingSpeakAPIKey = "S27LXW5LQALI7PO4";
   d4292:	f001 bca1 	b.w	d5bd8 <__aeabi_atexit>
   d4296:	bf00      	nop
   d4298:	2003e3c0 	.word	0x2003e3c0
   d429c:	2003e3ac 	.word	0x2003e3ac
   d42a0:	2003e3c1 	.word	0x2003e3c1
   d42a4:	000d6c0c 	.word	0x000d6c0c
   d42a8:	2003e3a4 	.word	0x2003e3a4
   d42ac:	000d4ae1 	.word	0x000d4ae1

000d42b0 <_ZN15Adafruit_SI1145C1Ev>:

#include "application.h"
#include "Adafruit_SI1145.h"

Adafruit_SI1145::Adafruit_SI1145() {
  _addr = SI1145_ADDR;
   d42b0:	2360      	movs	r3, #96	; 0x60
   d42b2:	7003      	strb	r3, [r0, #0]
}
   d42b4:	4770      	bx	lr

000d42b6 <_ZN15Adafruit_SI11455read8Eh>:
  return read8(SI1145_REG_PARAMRD);
}

/*********************************************************************/

uint8_t  Adafruit_SI1145::read8(uint8_t reg) {
   d42b6:	b538      	push	{r3, r4, r5, lr}
   d42b8:	4604      	mov	r4, r0
   d42ba:	460d      	mov	r5, r1
  uint16_t val;
    Wire.beginTransmission(_addr);
   d42bc:	f001 fc6c 	bl	d5b98 <_Z19__fetch_global_Wirev>
   d42c0:	7821      	ldrb	r1, [r4, #0]
   d42c2:	f001 faa9 	bl	d5818 <_ZN7TwoWire17beginTransmissionEh>
    Wire.write((uint8_t)reg);
   d42c6:	f001 fc67 	bl	d5b98 <_Z19__fetch_global_Wirev>
   d42ca:	6803      	ldr	r3, [r0, #0]
   d42cc:	4629      	mov	r1, r5
   d42ce:	689b      	ldr	r3, [r3, #8]
   d42d0:	4798      	blx	r3
    Wire.endTransmission();
   d42d2:	f001 fc61 	bl	d5b98 <_Z19__fetch_global_Wirev>
   d42d6:	f001 faa7 	bl	d5828 <_ZN7TwoWire15endTransmissionEv>

    Wire.requestFrom((uint8_t)_addr, (uint8_t)1);  
   d42da:	f001 fc5d 	bl	d5b98 <_Z19__fetch_global_Wirev>
   d42de:	2201      	movs	r2, #1
   d42e0:	7821      	ldrb	r1, [r4, #0]
   d42e2:	f001 fa96 	bl	d5812 <_ZN7TwoWire11requestFromEhh>
    return Wire.read();
   d42e6:	f001 fc57 	bl	d5b98 <_Z19__fetch_global_Wirev>
   d42ea:	6803      	ldr	r3, [r0, #0]
   d42ec:	695b      	ldr	r3, [r3, #20]
   d42ee:	4798      	blx	r3
}
   d42f0:	b2c0      	uxtb	r0, r0
   d42f2:	bd38      	pop	{r3, r4, r5, pc}

000d42f4 <_ZN15Adafruit_SI11456read16Eh>:

uint16_t Adafruit_SI1145::read16(uint8_t a) {
   d42f4:	b538      	push	{r3, r4, r5, lr}
   d42f6:	4604      	mov	r4, r0
   d42f8:	460d      	mov	r5, r1
  uint16_t ret;

  Wire.beginTransmission(_addr); // start transmission to device 
   d42fa:	f001 fc4d 	bl	d5b98 <_Z19__fetch_global_Wirev>
   d42fe:	7821      	ldrb	r1, [r4, #0]
   d4300:	f001 fa8a 	bl	d5818 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(a); // sends register address to read from
   d4304:	f001 fc48 	bl	d5b98 <_Z19__fetch_global_Wirev>
   d4308:	6803      	ldr	r3, [r0, #0]
   d430a:	4629      	mov	r1, r5
   d430c:	689b      	ldr	r3, [r3, #8]
   d430e:	4798      	blx	r3
  Wire.endTransmission(); // end transmission
   d4310:	f001 fc42 	bl	d5b98 <_Z19__fetch_global_Wirev>
   d4314:	f001 fa88 	bl	d5828 <_ZN7TwoWire15endTransmissionEv>
  
  Wire.requestFrom(_addr, (uint8_t)2);// send data n-bytes read
   d4318:	f001 fc3e 	bl	d5b98 <_Z19__fetch_global_Wirev>
   d431c:	7821      	ldrb	r1, [r4, #0]
   d431e:	2202      	movs	r2, #2
   d4320:	f001 fa77 	bl	d5812 <_ZN7TwoWire11requestFromEhh>
  ret = Wire.read(); // receive DATA
   d4324:	f001 fc38 	bl	d5b98 <_Z19__fetch_global_Wirev>
   d4328:	6803      	ldr	r3, [r0, #0]
   d432a:	695b      	ldr	r3, [r3, #20]
   d432c:	4798      	blx	r3
   d432e:	4604      	mov	r4, r0
  ret |= (uint16_t)Wire.read() << 8; // receive DATA
   d4330:	f001 fc32 	bl	d5b98 <_Z19__fetch_global_Wirev>
   d4334:	6803      	ldr	r3, [r0, #0]
   d4336:	695b      	ldr	r3, [r3, #20]
   d4338:	4798      	blx	r3

  return ret;
   d433a:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
}
   d433e:	b280      	uxth	r0, r0
   d4340:	bd38      	pop	{r3, r4, r5, pc}

000d4342 <_ZN15Adafruit_SI11456readUVEv>:

//////////////////////////////////////////////////////

// returns the UV index * 100 (divide by 100 to get the index)
uint16_t Adafruit_SI1145::readUV(void) {
 return read16(0x2C); 
   d4342:	212c      	movs	r1, #44	; 0x2c
   d4344:	f7ff bfd6 	b.w	d42f4 <_ZN15Adafruit_SI11456read16Eh>

000d4348 <_ZN15Adafruit_SI114511readVisibleEv>:
}

// returns visible+IR light levels
uint16_t Adafruit_SI1145::readVisible(void) {
 return read16(0x22); 
   d4348:	2122      	movs	r1, #34	; 0x22
   d434a:	f7ff bfd3 	b.w	d42f4 <_ZN15Adafruit_SI11456read16Eh>

000d434e <_ZN15Adafruit_SI11456readIREv>:
}

// returns IR light levels
uint16_t Adafruit_SI1145::readIR(void) {
 return read16(0x24); 
   d434e:	2124      	movs	r1, #36	; 0x24
   d4350:	f7ff bfd0 	b.w	d42f4 <_ZN15Adafruit_SI11456read16Eh>

000d4354 <_ZN15Adafruit_SI11456write8Ehh>:
  ret |= (uint16_t)Wire.read() << 8; // receive DATA

  return ret;
}

void Adafruit_SI1145::write8(uint8_t reg, uint8_t val) {
   d4354:	b570      	push	{r4, r5, r6, lr}
   d4356:	4606      	mov	r6, r0
   d4358:	4614      	mov	r4, r2
   d435a:	460d      	mov	r5, r1

  Wire.beginTransmission(_addr); // start transmission to device 
   d435c:	f001 fc1c 	bl	d5b98 <_Z19__fetch_global_Wirev>
   d4360:	7831      	ldrb	r1, [r6, #0]
   d4362:	f001 fa59 	bl	d5818 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg); // sends register address to write
   d4366:	f001 fc17 	bl	d5b98 <_Z19__fetch_global_Wirev>
   d436a:	6803      	ldr	r3, [r0, #0]
   d436c:	4629      	mov	r1, r5
   d436e:	689b      	ldr	r3, [r3, #8]
   d4370:	4798      	blx	r3
  Wire.write(val); // sends value
   d4372:	f001 fc11 	bl	d5b98 <_Z19__fetch_global_Wirev>
   d4376:	6803      	ldr	r3, [r0, #0]
   d4378:	4621      	mov	r1, r4
   d437a:	689b      	ldr	r3, [r3, #8]
   d437c:	4798      	blx	r3
  Wire.endTransmission(); // end transmission
   d437e:	f001 fc0b 	bl	d5b98 <_Z19__fetch_global_Wirev>
}
   d4382:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void Adafruit_SI1145::write8(uint8_t reg, uint8_t val) {

  Wire.beginTransmission(_addr); // start transmission to device 
  Wire.write(reg); // sends register address to write
  Wire.write(val); // sends value
  Wire.endTransmission(); // end transmission
   d4386:	f001 ba4f 	b.w	d5828 <_ZN7TwoWire15endTransmissionEv>

000d438a <_ZN15Adafruit_SI11455resetEv>:
  write8(SI1145_REG_COMMAND, SI1145_PSALS_AUTO);

  return true;
}

void Adafruit_SI1145::reset() {
   d438a:	b510      	push	{r4, lr}
  write8(SI1145_REG_MEASRATE0, 0);
   d438c:	2200      	movs	r2, #0
  write8(SI1145_REG_COMMAND, SI1145_PSALS_AUTO);

  return true;
}

void Adafruit_SI1145::reset() {
   d438e:	4604      	mov	r4, r0
  write8(SI1145_REG_MEASRATE0, 0);
   d4390:	2108      	movs	r1, #8
   d4392:	f7ff ffdf 	bl	d4354 <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_MEASRATE1, 0);
   d4396:	4620      	mov	r0, r4
   d4398:	2200      	movs	r2, #0
   d439a:	2109      	movs	r1, #9
   d439c:	f7ff ffda 	bl	d4354 <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_IRQEN, 0);
   d43a0:	4620      	mov	r0, r4
   d43a2:	2200      	movs	r2, #0
   d43a4:	2104      	movs	r1, #4
   d43a6:	f7ff ffd5 	bl	d4354 <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_IRQMODE1, 0);
   d43aa:	4620      	mov	r0, r4
   d43ac:	2200      	movs	r2, #0
   d43ae:	2105      	movs	r1, #5
   d43b0:	f7ff ffd0 	bl	d4354 <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_IRQMODE2, 0);
   d43b4:	4620      	mov	r0, r4
   d43b6:	2200      	movs	r2, #0
   d43b8:	2106      	movs	r1, #6
   d43ba:	f7ff ffcb 	bl	d4354 <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_INTCFG, 0);
   d43be:	4620      	mov	r0, r4
   d43c0:	2200      	movs	r2, #0
   d43c2:	2103      	movs	r1, #3
   d43c4:	f7ff ffc6 	bl	d4354 <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_IRQSTAT, 0xFF);
   d43c8:	4620      	mov	r0, r4
   d43ca:	22ff      	movs	r2, #255	; 0xff
   d43cc:	2121      	movs	r1, #33	; 0x21
   d43ce:	f7ff ffc1 	bl	d4354 <_ZN15Adafruit_SI11456write8Ehh>

  write8(SI1145_REG_COMMAND, SI1145_RESET);
   d43d2:	2201      	movs	r2, #1
   d43d4:	2118      	movs	r1, #24
   d43d6:	4620      	mov	r0, r4
   d43d8:	f7ff ffbc 	bl	d4354 <_ZN15Adafruit_SI11456write8Ehh>
  delay(10);
   d43dc:	200a      	movs	r0, #10
   d43de:	f000 fce5 	bl	d4dac <delay>
  write8(SI1145_REG_HWKEY, 0x17);
   d43e2:	4620      	mov	r0, r4
   d43e4:	2217      	movs	r2, #23
   d43e6:	2107      	movs	r1, #7
   d43e8:	f7ff ffb4 	bl	d4354 <_ZN15Adafruit_SI11456write8Ehh>
  
  delay(10);
   d43ec:	200a      	movs	r0, #10
}
   d43ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  write8(SI1145_REG_COMMAND, SI1145_RESET);
  delay(10);
  write8(SI1145_REG_HWKEY, 0x17);
  
  delay(10);
   d43f2:	f000 bcdb 	b.w	d4dac <delay>

000d43f6 <_ZN15Adafruit_SI114510writeParamEhh>:
 return read16(0x26); 
}

/*********************************************************************/

uint8_t Adafruit_SI1145::writeParam(uint8_t p, uint8_t v) {
   d43f6:	b538      	push	{r3, r4, r5, lr}
   d43f8:	4604      	mov	r4, r0
   d43fa:	460d      	mov	r5, r1
  //Serial.print("Param 0x"); Serial.print(p, HEX);
  //Serial.print(" = 0x"); Serial.println(v, HEX);
  
  write8(SI1145_REG_PARAMWR, v);
   d43fc:	2117      	movs	r1, #23
   d43fe:	f7ff ffa9 	bl	d4354 <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_COMMAND, p | SI1145_PARAM_SET);
   d4402:	4620      	mov	r0, r4
   d4404:	f045 02a0 	orr.w	r2, r5, #160	; 0xa0
   d4408:	2118      	movs	r1, #24
   d440a:	f7ff ffa3 	bl	d4354 <_ZN15Adafruit_SI11456write8Ehh>
  return read8(SI1145_REG_PARAMRD);
   d440e:	4620      	mov	r0, r4
   d4410:	212e      	movs	r1, #46	; 0x2e
}
   d4412:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  //Serial.print("Param 0x"); Serial.print(p, HEX);
  //Serial.print(" = 0x"); Serial.println(v, HEX);
  
  write8(SI1145_REG_PARAMWR, v);
  write8(SI1145_REG_COMMAND, p | SI1145_PARAM_SET);
  return read8(SI1145_REG_PARAMRD);
   d4416:	f7ff bf4e 	b.w	d42b6 <_ZN15Adafruit_SI11455read8Eh>

000d441a <_ZN15Adafruit_SI11455beginEv>:
Adafruit_SI1145::Adafruit_SI1145() {
  _addr = SI1145_ADDR;
}


boolean Adafruit_SI1145::begin(void) {
   d441a:	b510      	push	{r4, lr}
   d441c:	4604      	mov	r4, r0
  Wire.begin();
   d441e:	f001 fbbb 	bl	d5b98 <_Z19__fetch_global_Wirev>
   d4422:	f001 f9e7 	bl	d57f4 <_ZN7TwoWire5beginEv>
 
  uint8_t id = read8(SI1145_REG_PARTID);
   d4426:	2100      	movs	r1, #0
   d4428:	4620      	mov	r0, r4
   d442a:	f7ff ff44 	bl	d42b6 <_ZN15Adafruit_SI11455read8Eh>
  if (id != 0x45) return false; // look for SI1145
   d442e:	2845      	cmp	r0, #69	; 0x45
   d4430:	d172      	bne.n	d4518 <_ZN15Adafruit_SI11455beginEv+0xfe>
  
  reset();
   d4432:	4620      	mov	r0, r4
   d4434:	f7ff ffa9 	bl	d438a <_ZN15Adafruit_SI11455resetEv>
  

    /***********************************/
  // enable UVindex measurement coefficients!
  write8(SI1145_REG_UCOEFF0, 0x29);
   d4438:	4620      	mov	r0, r4
   d443a:	2229      	movs	r2, #41	; 0x29
   d443c:	2113      	movs	r1, #19
   d443e:	f7ff ff89 	bl	d4354 <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_UCOEFF1, 0x89);
   d4442:	4620      	mov	r0, r4
   d4444:	2289      	movs	r2, #137	; 0x89
   d4446:	2114      	movs	r1, #20
   d4448:	f7ff ff84 	bl	d4354 <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_UCOEFF2, 0x02);
   d444c:	4620      	mov	r0, r4
   d444e:	2202      	movs	r2, #2
   d4450:	2115      	movs	r1, #21
   d4452:	f7ff ff7f 	bl	d4354 <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_UCOEFF3, 0x00);
   d4456:	4620      	mov	r0, r4
   d4458:	2200      	movs	r2, #0
   d445a:	2116      	movs	r1, #22
   d445c:	f7ff ff7a 	bl	d4354 <_ZN15Adafruit_SI11456write8Ehh>

  // enable UV sensor
  writeParam(SI1145_PARAM_CHLIST, SI1145_PARAM_CHLIST_ENUV |
  SI1145_PARAM_CHLIST_ENALSIR | SI1145_PARAM_CHLIST_ENALSVIS |
  SI1145_PARAM_CHLIST_ENPS1);
   d4460:	22b1      	movs	r2, #177	; 0xb1
   d4462:	2101      	movs	r1, #1
   d4464:	4620      	mov	r0, r4
   d4466:	f7ff ffc6 	bl	d43f6 <_ZN15Adafruit_SI114510writeParamEhh>
  // enable interrupt on every sample
  write8(SI1145_REG_INTCFG, SI1145_REG_INTCFG_INTOE);  
   d446a:	4620      	mov	r0, r4
   d446c:	2201      	movs	r2, #1
   d446e:	2103      	movs	r1, #3
   d4470:	f7ff ff70 	bl	d4354 <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_IRQEN, SI1145_REG_IRQEN_ALSEVERYSAMPLE);  
   d4474:	4620      	mov	r0, r4
   d4476:	2201      	movs	r2, #1
   d4478:	2104      	movs	r1, #4
   d447a:	f7ff ff6b 	bl	d4354 <_ZN15Adafruit_SI11456write8Ehh>

/****************************** Prox Sense 1 */

  // program LED current
  write8(SI1145_REG_PSLED21, 0x03); // 20mA for LED 1 only
   d447e:	4620      	mov	r0, r4
   d4480:	2203      	movs	r2, #3
   d4482:	210f      	movs	r1, #15
   d4484:	f7ff ff66 	bl	d4354 <_ZN15Adafruit_SI11456write8Ehh>
  writeParam(SI1145_PARAM_PS1ADCMUX, SI1145_PARAM_ADCMUX_LARGEIR);
   d4488:	2203      	movs	r2, #3
   d448a:	2107      	movs	r1, #7
   d448c:	4620      	mov	r0, r4
   d448e:	f7ff ffb2 	bl	d43f6 <_ZN15Adafruit_SI114510writeParamEhh>
  // prox sensor #1 uses LED #1
  writeParam(SI1145_PARAM_PSLED12SEL, SI1145_PARAM_PSLED12SEL_PS1LED1);
   d4492:	2201      	movs	r2, #1
   d4494:	2102      	movs	r1, #2
   d4496:	4620      	mov	r0, r4
   d4498:	f7ff ffad 	bl	d43f6 <_ZN15Adafruit_SI114510writeParamEhh>
  // fastest clocks, clock div 1
  writeParam(SI1145_PARAM_PSADCGAIN, 0);
   d449c:	2200      	movs	r2, #0
   d449e:	210b      	movs	r1, #11
   d44a0:	4620      	mov	r0, r4
   d44a2:	f7ff ffa8 	bl	d43f6 <_ZN15Adafruit_SI114510writeParamEhh>
  // take 511 clocks to measure
  writeParam(SI1145_PARAM_PSADCOUNTER, SI1145_PARAM_ADCCOUNTER_511CLK);
   d44a6:	2270      	movs	r2, #112	; 0x70
   d44a8:	210a      	movs	r1, #10
   d44aa:	4620      	mov	r0, r4
   d44ac:	f7ff ffa3 	bl	d43f6 <_ZN15Adafruit_SI114510writeParamEhh>
  // in prox mode, high range
  writeParam(SI1145_PARAM_PSADCMISC, SI1145_PARAM_PSADCMISC_RANGE|
    SI1145_PARAM_PSADCMISC_PSMODE);
   d44b0:	2224      	movs	r2, #36	; 0x24
   d44b2:	210c      	movs	r1, #12
   d44b4:	4620      	mov	r0, r4
   d44b6:	f7ff ff9e 	bl	d43f6 <_ZN15Adafruit_SI114510writeParamEhh>

  writeParam(SI1145_PARAM_ALSIRADCMUX, SI1145_PARAM_ADCMUX_SMALLIR);  
   d44ba:	2200      	movs	r2, #0
   d44bc:	210e      	movs	r1, #14
   d44be:	4620      	mov	r0, r4
   d44c0:	f7ff ff99 	bl	d43f6 <_ZN15Adafruit_SI114510writeParamEhh>
  // fastest clocks, clock div 1
  writeParam(SI1145_PARAM_ALSIRADCGAIN, 0);
   d44c4:	2200      	movs	r2, #0
   d44c6:	211e      	movs	r1, #30
   d44c8:	4620      	mov	r0, r4
   d44ca:	f7ff ff94 	bl	d43f6 <_ZN15Adafruit_SI114510writeParamEhh>
  // take 511 clocks to measure
  writeParam(SI1145_PARAM_ALSIRADCOUNTER, SI1145_PARAM_ADCCOUNTER_511CLK);
   d44ce:	2270      	movs	r2, #112	; 0x70
   d44d0:	211d      	movs	r1, #29
   d44d2:	4620      	mov	r0, r4
   d44d4:	f7ff ff8f 	bl	d43f6 <_ZN15Adafruit_SI114510writeParamEhh>
  // in high range mode
  writeParam(SI1145_PARAM_ALSIRADCMISC, SI1145_PARAM_ALSIRADCMISC_RANGE);
   d44d8:	2220      	movs	r2, #32
   d44da:	211f      	movs	r1, #31
   d44dc:	4620      	mov	r0, r4
   d44de:	f7ff ff8a 	bl	d43f6 <_ZN15Adafruit_SI114510writeParamEhh>



  // fastest clocks, clock div 1
  writeParam(SI1145_PARAM_ALSVISADCGAIN, 0);
   d44e2:	2200      	movs	r2, #0
   d44e4:	2111      	movs	r1, #17
   d44e6:	4620      	mov	r0, r4
   d44e8:	f7ff ff85 	bl	d43f6 <_ZN15Adafruit_SI114510writeParamEhh>
  // take 511 clocks to measure
  writeParam(SI1145_PARAM_ALSVISADCOUNTER, SI1145_PARAM_ADCCOUNTER_511CLK);
   d44ec:	2270      	movs	r2, #112	; 0x70
   d44ee:	2110      	movs	r1, #16
   d44f0:	4620      	mov	r0, r4
   d44f2:	f7ff ff80 	bl	d43f6 <_ZN15Adafruit_SI114510writeParamEhh>
  // in high range mode (not normal signal)
  writeParam(SI1145_PARAM_ALSVISADCMISC, SI1145_PARAM_ALSVISADCMISC_VISRANGE);
   d44f6:	2220      	movs	r2, #32
   d44f8:	2112      	movs	r1, #18
   d44fa:	4620      	mov	r0, r4
   d44fc:	f7ff ff7b 	bl	d43f6 <_ZN15Adafruit_SI114510writeParamEhh>


/************************/

  // measurement rate for auto
  write8(SI1145_REG_MEASRATE0, 0xFF); // 255 * 31.25uS = 8ms
   d4500:	4620      	mov	r0, r4
   d4502:	22ff      	movs	r2, #255	; 0xff
   d4504:	2108      	movs	r1, #8
   d4506:	f7ff ff25 	bl	d4354 <_ZN15Adafruit_SI11456write8Ehh>
  
  // auto run
  write8(SI1145_REG_COMMAND, SI1145_PSALS_AUTO);
   d450a:	4620      	mov	r0, r4
   d450c:	220f      	movs	r2, #15
   d450e:	2118      	movs	r1, #24
   d4510:	f7ff ff20 	bl	d4354 <_ZN15Adafruit_SI11456write8Ehh>

  return true;
   d4514:	2001      	movs	r0, #1
   d4516:	bd10      	pop	{r4, pc}

boolean Adafruit_SI1145::begin(void) {
  Wire.begin();
 
  uint8_t id = read8(SI1145_REG_PARTID);
  if (id != 0x45) return false; // look for SI1145
   d4518:	2000      	movs	r0, #0
  
  // auto run
  write8(SI1145_REG_COMMAND, SI1145_PSALS_AUTO);

  return true;
}
   d451a:	bd10      	pop	{r4, pc}

000d451c <_GLOBAL__sub_I__ZN15Adafruit_SI1145C2Ev>:
   d451c:	f000 b810 	b.w	d4540 <HAL_Pin_Map>

000d4520 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4520:	b508      	push	{r3, lr}
   d4522:	4b02      	ldr	r3, [pc, #8]	; (d452c <netdb_freeaddrinfo+0xc>)
   d4524:	681b      	ldr	r3, [r3, #0]
   d4526:	689b      	ldr	r3, [r3, #8]
   d4528:	9301      	str	r3, [sp, #4]
   d452a:	bd08      	pop	{r3, pc}
   d452c:	00030268 	.word	0x00030268

000d4530 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4530:	b508      	push	{r3, lr}
   d4532:	4b02      	ldr	r3, [pc, #8]	; (d453c <netdb_getaddrinfo+0xc>)
   d4534:	681b      	ldr	r3, [r3, #0]
   d4536:	68db      	ldr	r3, [r3, #12]
   d4538:	9301      	str	r3, [sp, #4]
   d453a:	bd08      	pop	{r3, pc}
   d453c:	00030268 	.word	0x00030268

000d4540 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4540:	b508      	push	{r3, lr}
   d4542:	4b02      	ldr	r3, [pc, #8]	; (d454c <HAL_Pin_Map+0xc>)
   d4544:	681b      	ldr	r3, [r3, #0]
   d4546:	681b      	ldr	r3, [r3, #0]
   d4548:	9301      	str	r3, [sp, #4]
   d454a:	bd08      	pop	{r3, pc}
   d454c:	0003022c 	.word	0x0003022c

000d4550 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4550:	b508      	push	{r3, lr}
   d4552:	4b02      	ldr	r3, [pc, #8]	; (d455c <HAL_SPI_Init+0xc>)
   d4554:	681b      	ldr	r3, [r3, #0]
   d4556:	69db      	ldr	r3, [r3, #28]
   d4558:	9301      	str	r3, [sp, #4]
   d455a:	bd08      	pop	{r3, pc}
   d455c:	00030230 	.word	0x00030230

000d4560 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4560:	b508      	push	{r3, lr}
   d4562:	4b02      	ldr	r3, [pc, #8]	; (d456c <HAL_RNG_GetRandomNumber+0xc>)
   d4564:	681b      	ldr	r3, [r3, #0]
   d4566:	685b      	ldr	r3, [r3, #4]
   d4568:	9301      	str	r3, [sp, #4]
   d456a:	bd08      	pop	{r3, pc}
   d456c:	00030218 	.word	0x00030218

000d4570 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4570:	b508      	push	{r3, lr}
   d4572:	4b02      	ldr	r3, [pc, #8]	; (d457c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4574:	681b      	ldr	r3, [r3, #0]
   d4576:	695b      	ldr	r3, [r3, #20]
   d4578:	9301      	str	r3, [sp, #4]
   d457a:	bd08      	pop	{r3, pc}
   d457c:	00030218 	.word	0x00030218

000d4580 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4580:	b508      	push	{r3, lr}
   d4582:	4b02      	ldr	r3, [pc, #8]	; (d458c <os_thread_is_current+0xc>)
   d4584:	681b      	ldr	r3, [r3, #0]
   d4586:	689b      	ldr	r3, [r3, #8]
   d4588:	9301      	str	r3, [sp, #4]
   d458a:	bd08      	pop	{r3, pc}
   d458c:	00030248 	.word	0x00030248

000d4590 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4590:	b508      	push	{r3, lr}
   d4592:	4b02      	ldr	r3, [pc, #8]	; (d459c <os_thread_join+0xc>)
   d4594:	681b      	ldr	r3, [r3, #0]
   d4596:	691b      	ldr	r3, [r3, #16]
   d4598:	9301      	str	r3, [sp, #4]
   d459a:	bd08      	pop	{r3, pc}
   d459c:	00030248 	.word	0x00030248

000d45a0 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d45a0:	b508      	push	{r3, lr}
   d45a2:	4b02      	ldr	r3, [pc, #8]	; (d45ac <os_thread_cleanup+0xc>)
   d45a4:	681b      	ldr	r3, [r3, #0]
   d45a6:	695b      	ldr	r3, [r3, #20]
   d45a8:	9301      	str	r3, [sp, #4]
   d45aa:	bd08      	pop	{r3, pc}
   d45ac:	00030248 	.word	0x00030248

000d45b0 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d45b0:	b508      	push	{r3, lr}
   d45b2:	4b02      	ldr	r3, [pc, #8]	; (d45bc <os_mutex_create+0xc>)
   d45b4:	681b      	ldr	r3, [r3, #0]
   d45b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d45b8:	9301      	str	r3, [sp, #4]
   d45ba:	bd08      	pop	{r3, pc}
   d45bc:	00030248 	.word	0x00030248

000d45c0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d45c0:	b508      	push	{r3, lr}
   d45c2:	4b02      	ldr	r3, [pc, #8]	; (d45cc <os_mutex_recursive_create+0xc>)
   d45c4:	681b      	ldr	r3, [r3, #0]
   d45c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d45c8:	9301      	str	r3, [sp, #4]
   d45ca:	bd08      	pop	{r3, pc}
   d45cc:	00030248 	.word	0x00030248

000d45d0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d45d0:	b508      	push	{r3, lr}
   d45d2:	4b02      	ldr	r3, [pc, #8]	; (d45dc <inet_inet_ntop+0xc>)
   d45d4:	681b      	ldr	r3, [r3, #0]
   d45d6:	695b      	ldr	r3, [r3, #20]
   d45d8:	9301      	str	r3, [sp, #4]
   d45da:	bd08      	pop	{r3, pc}
   d45dc:	00030264 	.word	0x00030264

000d45e0 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d45e0:	b508      	push	{r3, lr}
   d45e2:	4b02      	ldr	r3, [pc, #8]	; (d45ec <HAL_USART_Init+0xc>)
   d45e4:	681b      	ldr	r3, [r3, #0]
   d45e6:	681b      	ldr	r3, [r3, #0]
   d45e8:	9301      	str	r3, [sp, #4]
   d45ea:	bd08      	pop	{r3, pc}
   d45ec:	0003023c 	.word	0x0003023c

000d45f0 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d45f0:	b508      	push	{r3, lr}
   d45f2:	4b02      	ldr	r3, [pc, #8]	; (d45fc <HAL_USART_Write_Data+0xc>)
   d45f4:	681b      	ldr	r3, [r3, #0]
   d45f6:	68db      	ldr	r3, [r3, #12]
   d45f8:	9301      	str	r3, [sp, #4]
   d45fa:	bd08      	pop	{r3, pc}
   d45fc:	0003023c 	.word	0x0003023c

000d4600 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4600:	b508      	push	{r3, lr}
   d4602:	4b02      	ldr	r3, [pc, #8]	; (d460c <HAL_USART_Available_Data+0xc>)
   d4604:	681b      	ldr	r3, [r3, #0]
   d4606:	691b      	ldr	r3, [r3, #16]
   d4608:	9301      	str	r3, [sp, #4]
   d460a:	bd08      	pop	{r3, pc}
   d460c:	0003023c 	.word	0x0003023c

000d4610 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4610:	b508      	push	{r3, lr}
   d4612:	4b02      	ldr	r3, [pc, #8]	; (d461c <HAL_USART_Read_Data+0xc>)
   d4614:	681b      	ldr	r3, [r3, #0]
   d4616:	695b      	ldr	r3, [r3, #20]
   d4618:	9301      	str	r3, [sp, #4]
   d461a:	bd08      	pop	{r3, pc}
   d461c:	0003023c 	.word	0x0003023c

000d4620 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4620:	b508      	push	{r3, lr}
   d4622:	4b02      	ldr	r3, [pc, #8]	; (d462c <HAL_USART_Peek_Data+0xc>)
   d4624:	681b      	ldr	r3, [r3, #0]
   d4626:	699b      	ldr	r3, [r3, #24]
   d4628:	9301      	str	r3, [sp, #4]
   d462a:	bd08      	pop	{r3, pc}
   d462c:	0003023c 	.word	0x0003023c

000d4630 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4630:	b508      	push	{r3, lr}
   d4632:	4b02      	ldr	r3, [pc, #8]	; (d463c <HAL_USART_Flush_Data+0xc>)
   d4634:	681b      	ldr	r3, [r3, #0]
   d4636:	69db      	ldr	r3, [r3, #28]
   d4638:	9301      	str	r3, [sp, #4]
   d463a:	bd08      	pop	{r3, pc}
   d463c:	0003023c 	.word	0x0003023c

000d4640 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4640:	b508      	push	{r3, lr}
   d4642:	4b02      	ldr	r3, [pc, #8]	; (d464c <HAL_USART_Available_Data_For_Write+0xc>)
   d4644:	681b      	ldr	r3, [r3, #0]
   d4646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4648:	9301      	str	r3, [sp, #4]
   d464a:	bd08      	pop	{r3, pc}
   d464c:	0003023c 	.word	0x0003023c

000d4650 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d4650:	b508      	push	{r3, lr}
   d4652:	4b02      	ldr	r3, [pc, #8]	; (d465c <HAL_I2C_Begin+0xc>)
   d4654:	681b      	ldr	r3, [r3, #0]
   d4656:	68db      	ldr	r3, [r3, #12]
   d4658:	9301      	str	r3, [sp, #4]
   d465a:	bd08      	pop	{r3, pc}
   d465c:	00030228 	.word	0x00030228

000d4660 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
   d4660:	b508      	push	{r3, lr}
   d4662:	4b02      	ldr	r3, [pc, #8]	; (d466c <HAL_I2C_Request_Data+0xc>)
   d4664:	681b      	ldr	r3, [r3, #0]
   d4666:	695b      	ldr	r3, [r3, #20]
   d4668:	9301      	str	r3, [sp, #4]
   d466a:	bd08      	pop	{r3, pc}
   d466c:	00030228 	.word	0x00030228

000d4670 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
   d4670:	b508      	push	{r3, lr}
   d4672:	4b02      	ldr	r3, [pc, #8]	; (d467c <HAL_I2C_Begin_Transmission+0xc>)
   d4674:	681b      	ldr	r3, [r3, #0]
   d4676:	699b      	ldr	r3, [r3, #24]
   d4678:	9301      	str	r3, [sp, #4]
   d467a:	bd08      	pop	{r3, pc}
   d467c:	00030228 	.word	0x00030228

000d4680 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d4680:	b508      	push	{r3, lr}
   d4682:	4b02      	ldr	r3, [pc, #8]	; (d468c <HAL_I2C_End_Transmission+0xc>)
   d4684:	681b      	ldr	r3, [r3, #0]
   d4686:	69db      	ldr	r3, [r3, #28]
   d4688:	9301      	str	r3, [sp, #4]
   d468a:	bd08      	pop	{r3, pc}
   d468c:	00030228 	.word	0x00030228

000d4690 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4690:	b508      	push	{r3, lr}
   d4692:	4b02      	ldr	r3, [pc, #8]	; (d469c <HAL_I2C_Write_Data+0xc>)
   d4694:	681b      	ldr	r3, [r3, #0]
   d4696:	6a1b      	ldr	r3, [r3, #32]
   d4698:	9301      	str	r3, [sp, #4]
   d469a:	bd08      	pop	{r3, pc}
   d469c:	00030228 	.word	0x00030228

000d46a0 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d46a0:	b508      	push	{r3, lr}
   d46a2:	4b02      	ldr	r3, [pc, #8]	; (d46ac <HAL_I2C_Available_Data+0xc>)
   d46a4:	681b      	ldr	r3, [r3, #0]
   d46a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d46a8:	9301      	str	r3, [sp, #4]
   d46aa:	bd08      	pop	{r3, pc}
   d46ac:	00030228 	.word	0x00030228

000d46b0 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d46b0:	b508      	push	{r3, lr}
   d46b2:	4b02      	ldr	r3, [pc, #8]	; (d46bc <HAL_I2C_Read_Data+0xc>)
   d46b4:	681b      	ldr	r3, [r3, #0]
   d46b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d46b8:	9301      	str	r3, [sp, #4]
   d46ba:	bd08      	pop	{r3, pc}
   d46bc:	00030228 	.word	0x00030228

000d46c0 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d46c0:	b508      	push	{r3, lr}
   d46c2:	4b02      	ldr	r3, [pc, #8]	; (d46cc <HAL_I2C_Peek_Data+0xc>)
   d46c4:	681b      	ldr	r3, [r3, #0]
   d46c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d46c8:	9301      	str	r3, [sp, #4]
   d46ca:	bd08      	pop	{r3, pc}
   d46cc:	00030228 	.word	0x00030228

000d46d0 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d46d0:	b508      	push	{r3, lr}
   d46d2:	4b02      	ldr	r3, [pc, #8]	; (d46dc <HAL_I2C_Flush_Data+0xc>)
   d46d4:	681b      	ldr	r3, [r3, #0]
   d46d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d46d8:	9301      	str	r3, [sp, #4]
   d46da:	bd08      	pop	{r3, pc}
   d46dc:	00030228 	.word	0x00030228

000d46e0 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d46e0:	b508      	push	{r3, lr}
   d46e2:	4b02      	ldr	r3, [pc, #8]	; (d46ec <HAL_I2C_Init+0xc>)
   d46e4:	681b      	ldr	r3, [r3, #0]
   d46e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d46e8:	9301      	str	r3, [sp, #4]
   d46ea:	bd08      	pop	{r3, pc}
   d46ec:	00030228 	.word	0x00030228

000d46f0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d46f0:	b508      	push	{r3, lr}
   d46f2:	4b02      	ldr	r3, [pc, #8]	; (d46fc <HAL_USB_USART_Init+0xc>)
   d46f4:	681b      	ldr	r3, [r3, #0]
   d46f6:	681b      	ldr	r3, [r3, #0]
   d46f8:	9301      	str	r3, [sp, #4]
   d46fa:	bd08      	pop	{r3, pc}
   d46fc:	0003024c 	.word	0x0003024c

000d4700 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4700:	b508      	push	{r3, lr}
   d4702:	4b02      	ldr	r3, [pc, #8]	; (d470c <HAL_USB_USART_Available_Data+0xc>)
   d4704:	681b      	ldr	r3, [r3, #0]
   d4706:	691b      	ldr	r3, [r3, #16]
   d4708:	9301      	str	r3, [sp, #4]
   d470a:	bd08      	pop	{r3, pc}
   d470c:	0003024c 	.word	0x0003024c

000d4710 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4710:	b508      	push	{r3, lr}
   d4712:	4b02      	ldr	r3, [pc, #8]	; (d471c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4714:	681b      	ldr	r3, [r3, #0]
   d4716:	695b      	ldr	r3, [r3, #20]
   d4718:	9301      	str	r3, [sp, #4]
   d471a:	bd08      	pop	{r3, pc}
   d471c:	0003024c 	.word	0x0003024c

000d4720 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4720:	b508      	push	{r3, lr}
   d4722:	4b02      	ldr	r3, [pc, #8]	; (d472c <HAL_USB_USART_Receive_Data+0xc>)
   d4724:	681b      	ldr	r3, [r3, #0]
   d4726:	699b      	ldr	r3, [r3, #24]
   d4728:	9301      	str	r3, [sp, #4]
   d472a:	bd08      	pop	{r3, pc}
   d472c:	0003024c 	.word	0x0003024c

000d4730 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4730:	b508      	push	{r3, lr}
   d4732:	4b02      	ldr	r3, [pc, #8]	; (d473c <HAL_USB_USART_Send_Data+0xc>)
   d4734:	681b      	ldr	r3, [r3, #0]
   d4736:	69db      	ldr	r3, [r3, #28]
   d4738:	9301      	str	r3, [sp, #4]
   d473a:	bd08      	pop	{r3, pc}
   d473c:	0003024c 	.word	0x0003024c

000d4740 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4740:	b508      	push	{r3, lr}
   d4742:	4b02      	ldr	r3, [pc, #8]	; (d474c <HAL_USB_USART_Flush_Data+0xc>)
   d4744:	681b      	ldr	r3, [r3, #0]
   d4746:	6a1b      	ldr	r3, [r3, #32]
   d4748:	9301      	str	r3, [sp, #4]
   d474a:	bd08      	pop	{r3, pc}
   d474c:	0003024c 	.word	0x0003024c

000d4750 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4750:	b508      	push	{r3, lr}
   d4752:	4b02      	ldr	r3, [pc, #8]	; (d475c <set_system_mode+0xc>)
   d4754:	681b      	ldr	r3, [r3, #0]
   d4756:	685b      	ldr	r3, [r3, #4]
   d4758:	9301      	str	r3, [sp, #4]
   d475a:	bd08      	pop	{r3, pc}
   d475c:	00030220 	.word	0x00030220

000d4760 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4760:	b508      	push	{r3, lr}
   d4762:	4b02      	ldr	r3, [pc, #8]	; (d476c <system_delay_ms+0xc>)
   d4764:	681b      	ldr	r3, [r3, #0]
   d4766:	695b      	ldr	r3, [r3, #20]
   d4768:	9301      	str	r3, [sp, #4]
   d476a:	bd08      	pop	{r3, pc}
   d476c:	00030220 	.word	0x00030220

000d4770 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4770:	b508      	push	{r3, lr}
   d4772:	4b02      	ldr	r3, [pc, #8]	; (d477c <application_thread_current+0xc>)
   d4774:	681b      	ldr	r3, [r3, #0]
   d4776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4778:	9301      	str	r3, [sp, #4]
   d477a:	bd08      	pop	{r3, pc}
   d477c:	00030220 	.word	0x00030220

000d4780 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4780:	b508      	push	{r3, lr}
   d4782:	4b02      	ldr	r3, [pc, #8]	; (d478c <application_thread_invoke+0xc>)
   d4784:	681b      	ldr	r3, [r3, #0]
   d4786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4788:	9301      	str	r3, [sp, #4]
   d478a:	bd08      	pop	{r3, pc}
   d478c:	00030220 	.word	0x00030220

000d4790 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4790:	b508      	push	{r3, lr}
   d4792:	4b03      	ldr	r3, [pc, #12]	; (d47a0 <system_ctrl_set_app_request_handler+0x10>)
   d4794:	681b      	ldr	r3, [r3, #0]
   d4796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d479a:	9301      	str	r3, [sp, #4]
   d479c:	bd08      	pop	{r3, pc}
   d479e:	0000      	.short	0x0000
   d47a0:	00030220 	.word	0x00030220

000d47a4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d47a4:	b508      	push	{r3, lr}
   d47a6:	4b03      	ldr	r3, [pc, #12]	; (d47b4 <system_ctrl_set_result+0x10>)
   d47a8:	681b      	ldr	r3, [r3, #0]
   d47aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d47ae:	9301      	str	r3, [sp, #4]
   d47b0:	bd08      	pop	{r3, pc}
   d47b2:	0000      	.short	0x0000
   d47b4:	00030220 	.word	0x00030220

000d47b8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d47b8:	b508      	push	{r3, lr}
   d47ba:	4b02      	ldr	r3, [pc, #8]	; (d47c4 <network_connect+0xc>)
   d47bc:	681b      	ldr	r3, [r3, #0]
   d47be:	685b      	ldr	r3, [r3, #4]
   d47c0:	9301      	str	r3, [sp, #4]
   d47c2:	bd08      	pop	{r3, pc}
   d47c4:	00030240 	.word	0x00030240

000d47c8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d47c8:	b508      	push	{r3, lr}
   d47ca:	4b02      	ldr	r3, [pc, #8]	; (d47d4 <network_connecting+0xc>)
   d47cc:	681b      	ldr	r3, [r3, #0]
   d47ce:	689b      	ldr	r3, [r3, #8]
   d47d0:	9301      	str	r3, [sp, #4]
   d47d2:	bd08      	pop	{r3, pc}
   d47d4:	00030240 	.word	0x00030240

000d47d8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d47d8:	b508      	push	{r3, lr}
   d47da:	4b02      	ldr	r3, [pc, #8]	; (d47e4 <network_disconnect+0xc>)
   d47dc:	681b      	ldr	r3, [r3, #0]
   d47de:	68db      	ldr	r3, [r3, #12]
   d47e0:	9301      	str	r3, [sp, #4]
   d47e2:	bd08      	pop	{r3, pc}
   d47e4:	00030240 	.word	0x00030240

000d47e8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d47e8:	b508      	push	{r3, lr}
   d47ea:	4b02      	ldr	r3, [pc, #8]	; (d47f4 <network_ready+0xc>)
   d47ec:	681b      	ldr	r3, [r3, #0]
   d47ee:	691b      	ldr	r3, [r3, #16]
   d47f0:	9301      	str	r3, [sp, #4]
   d47f2:	bd08      	pop	{r3, pc}
   d47f4:	00030240 	.word	0x00030240

000d47f8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d47f8:	b508      	push	{r3, lr}
   d47fa:	4b02      	ldr	r3, [pc, #8]	; (d4804 <network_on+0xc>)
   d47fc:	681b      	ldr	r3, [r3, #0]
   d47fe:	695b      	ldr	r3, [r3, #20]
   d4800:	9301      	str	r3, [sp, #4]
   d4802:	bd08      	pop	{r3, pc}
   d4804:	00030240 	.word	0x00030240

000d4808 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4808:	b508      	push	{r3, lr}
   d480a:	4b02      	ldr	r3, [pc, #8]	; (d4814 <network_off+0xc>)
   d480c:	681b      	ldr	r3, [r3, #0]
   d480e:	699b      	ldr	r3, [r3, #24]
   d4810:	9301      	str	r3, [sp, #4]
   d4812:	bd08      	pop	{r3, pc}
   d4814:	00030240 	.word	0x00030240

000d4818 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4818:	b508      	push	{r3, lr}
   d481a:	4b02      	ldr	r3, [pc, #8]	; (d4824 <network_listen+0xc>)
   d481c:	681b      	ldr	r3, [r3, #0]
   d481e:	69db      	ldr	r3, [r3, #28]
   d4820:	9301      	str	r3, [sp, #4]
   d4822:	bd08      	pop	{r3, pc}
   d4824:	00030240 	.word	0x00030240

000d4828 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4828:	b508      	push	{r3, lr}
   d482a:	4b02      	ldr	r3, [pc, #8]	; (d4834 <network_listening+0xc>)
   d482c:	681b      	ldr	r3, [r3, #0]
   d482e:	6a1b      	ldr	r3, [r3, #32]
   d4830:	9301      	str	r3, [sp, #4]
   d4832:	bd08      	pop	{r3, pc}
   d4834:	00030240 	.word	0x00030240

000d4838 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4838:	b508      	push	{r3, lr}
   d483a:	4b02      	ldr	r3, [pc, #8]	; (d4844 <network_set_listen_timeout+0xc>)
   d483c:	681b      	ldr	r3, [r3, #0]
   d483e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4840:	9301      	str	r3, [sp, #4]
   d4842:	bd08      	pop	{r3, pc}
   d4844:	00030240 	.word	0x00030240

000d4848 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4848:	b508      	push	{r3, lr}
   d484a:	4b02      	ldr	r3, [pc, #8]	; (d4854 <network_get_listen_timeout+0xc>)
   d484c:	681b      	ldr	r3, [r3, #0]
   d484e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4850:	9301      	str	r3, [sp, #4]
   d4852:	bd08      	pop	{r3, pc}
   d4854:	00030240 	.word	0x00030240

000d4858 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d4858:	b508      	push	{r3, lr}
   d485a:	4b02      	ldr	r3, [pc, #8]	; (d4864 <spark_cloud_flag_connected+0xc>)
   d485c:	681b      	ldr	r3, [r3, #0]
   d485e:	695b      	ldr	r3, [r3, #20]
   d4860:	9301      	str	r3, [sp, #4]
   d4862:	bd08      	pop	{r3, pc}
   d4864:	00030244 	.word	0x00030244

000d4868 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d4868:	b508      	push	{r3, lr}
   d486a:	4b02      	ldr	r3, [pc, #8]	; (d4874 <spark_send_event+0xc>)
   d486c:	681b      	ldr	r3, [r3, #0]
   d486e:	6a1b      	ldr	r3, [r3, #32]
   d4870:	9301      	str	r3, [sp, #4]
   d4872:	bd08      	pop	{r3, pc}
   d4874:	00030244 	.word	0x00030244

000d4878 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4878:	b508      	push	{r3, lr}
   d487a:	4b02      	ldr	r3, [pc, #8]	; (d4884 <spark_set_random_seed_from_cloud_handler+0xc>)
   d487c:	681b      	ldr	r3, [r3, #0]
   d487e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4880:	9301      	str	r3, [sp, #4]
   d4882:	bd08      	pop	{r3, pc}
   d4884:	00030244 	.word	0x00030244

000d4888 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4888:	b508      	push	{r3, lr}
   d488a:	4b02      	ldr	r3, [pc, #8]	; (d4894 <malloc+0xc>)
   d488c:	681b      	ldr	r3, [r3, #0]
   d488e:	681b      	ldr	r3, [r3, #0]
   d4890:	9301      	str	r3, [sp, #4]
   d4892:	bd08      	pop	{r3, pc}
   d4894:	0003021c 	.word	0x0003021c

000d4898 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4898:	b508      	push	{r3, lr}
   d489a:	4b02      	ldr	r3, [pc, #8]	; (d48a4 <free+0xc>)
   d489c:	681b      	ldr	r3, [r3, #0]
   d489e:	685b      	ldr	r3, [r3, #4]
   d48a0:	9301      	str	r3, [sp, #4]
   d48a2:	bd08      	pop	{r3, pc}
   d48a4:	0003021c 	.word	0x0003021c

000d48a8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d48a8:	b508      	push	{r3, lr}
   d48aa:	4b02      	ldr	r3, [pc, #8]	; (d48b4 <realloc+0xc>)
   d48ac:	681b      	ldr	r3, [r3, #0]
   d48ae:	689b      	ldr	r3, [r3, #8]
   d48b0:	9301      	str	r3, [sp, #4]
   d48b2:	bd08      	pop	{r3, pc}
   d48b4:	0003021c 	.word	0x0003021c

000d48b8 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d48b8:	b508      	push	{r3, lr}
   d48ba:	4b02      	ldr	r3, [pc, #8]	; (d48c4 <abort+0xc>)
   d48bc:	681b      	ldr	r3, [r3, #0]
   d48be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d48c0:	9301      	str	r3, [sp, #4]
   d48c2:	bd08      	pop	{r3, pc}
   d48c4:	0003021c 	.word	0x0003021c

000d48c8 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d48c8:	b508      	push	{r3, lr}
   d48ca:	4b02      	ldr	r3, [pc, #8]	; (d48d4 <_malloc_r+0xc>)
   d48cc:	681b      	ldr	r3, [r3, #0]
   d48ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d48d0:	9301      	str	r3, [sp, #4]
   d48d2:	bd08      	pop	{r3, pc}
   d48d4:	0003021c 	.word	0x0003021c

000d48d8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d48d8:	2200      	movs	r2, #0
   d48da:	4611      	mov	r1, r2
   d48dc:	6840      	ldr	r0, [r0, #4]
   d48de:	f7ff bfa3 	b.w	d4828 <network_listening>

000d48e2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d48e2:	2200      	movs	r2, #0
   d48e4:	4611      	mov	r1, r2
   d48e6:	6840      	ldr	r0, [r0, #4]
   d48e8:	f7ff bfae 	b.w	d4848 <network_get_listen_timeout>

000d48ec <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d48ec:	2200      	movs	r2, #0
   d48ee:	6840      	ldr	r0, [r0, #4]
   d48f0:	f7ff bfa2 	b.w	d4838 <network_set_listen_timeout>

000d48f4 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d48f4:	2200      	movs	r2, #0
   d48f6:	f081 0101 	eor.w	r1, r1, #1
   d48fa:	6840      	ldr	r0, [r0, #4]
   d48fc:	f7ff bf8c 	b.w	d4818 <network_listen>

000d4900 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4900:	2300      	movs	r3, #0
   d4902:	461a      	mov	r2, r3
   d4904:	4619      	mov	r1, r3
   d4906:	6840      	ldr	r0, [r0, #4]
   d4908:	f7ff bf7e 	b.w	d4808 <network_off>

000d490c <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d490c:	2300      	movs	r3, #0
   d490e:	461a      	mov	r2, r3
   d4910:	4619      	mov	r1, r3
   d4912:	6840      	ldr	r0, [r0, #4]
   d4914:	f7ff bf70 	b.w	d47f8 <network_on>

000d4918 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4918:	2200      	movs	r2, #0
   d491a:	4611      	mov	r1, r2
   d491c:	6840      	ldr	r0, [r0, #4]
   d491e:	f7ff bf63 	b.w	d47e8 <network_ready>

000d4922 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4922:	2200      	movs	r2, #0
   d4924:	4611      	mov	r1, r2
   d4926:	6840      	ldr	r0, [r0, #4]
   d4928:	f7ff bf4e 	b.w	d47c8 <network_connecting>

000d492c <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d492c:	2200      	movs	r2, #0
   d492e:	2102      	movs	r1, #2
   d4930:	6840      	ldr	r0, [r0, #4]
   d4932:	f7ff bf51 	b.w	d47d8 <network_disconnect>

000d4936 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4936:	2300      	movs	r3, #0
   d4938:	461a      	mov	r2, r3
   d493a:	6840      	ldr	r0, [r0, #4]
   d493c:	f7ff bf3c 	b.w	d47b8 <network_connect>

000d4940 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4940:	4b02      	ldr	r3, [pc, #8]	; (d494c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4942:	2203      	movs	r2, #3
   d4944:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4946:	4a02      	ldr	r2, [pc, #8]	; (d4950 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4948:	601a      	str	r2, [r3, #0]
   d494a:	4770      	bx	lr
   d494c:	2003e3c8 	.word	0x2003e3c8
   d4950:	000d6c28 	.word	0x000d6c28

000d4954 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d4954:	4770      	bx	lr

000d4956 <_ZN8SPIClassD0Ev>:
   d4956:	b510      	push	{r4, lr}
   d4958:	2110      	movs	r1, #16
   d495a:	4604      	mov	r4, r0
   d495c:	f001 f941 	bl	d5be2 <_ZdlPvj>
   d4960:	4620      	mov	r0, r4
   d4962:	bd10      	pop	{r4, pc}

000d4964 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d4964:	b570      	push	{r4, r5, r6, lr}
   d4966:	4b08      	ldr	r3, [pc, #32]	; (d4988 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d4968:	6003      	str	r3, [r0, #0]
   d496a:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d496c:	2500      	movs	r5, #0
   d496e:	460e      	mov	r6, r1
   d4970:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d4974:	f7ff fe1c 	bl	d45b0 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d4978:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d497a:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d497c:	f7ff fde8 	bl	d4550 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d4980:	60a5      	str	r5, [r4, #8]
}
   d4982:	4620      	mov	r0, r4
   d4984:	bd70      	pop	{r4, r5, r6, pc}
   d4986:	bf00      	nop
   d4988:	000d6c5c 	.word	0x000d6c5c

000d498c <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d498c:	4b04      	ldr	r3, [pc, #16]	; (d49a0 <_GLOBAL__sub_I_System+0x14>)
   d498e:	2000      	movs	r0, #0
   d4990:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d4994:	7018      	strb	r0, [r3, #0]
   d4996:	8058      	strh	r0, [r3, #2]
   d4998:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d499a:	f7ff bed9 	b.w	d4750 <set_system_mode>
   d499e:	bf00      	nop
   d49a0:	2003e3d0 	.word	0x2003e3d0

000d49a4 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d49a4:	b510      	push	{r4, lr}
   d49a6:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d49a8:	f002 f8f7 	bl	d6b9a <strlen>
   d49ac:	3801      	subs	r0, #1
   d49ae:	1823      	adds	r3, r4, r0
   d49b0:	4620      	mov	r0, r4
	while(i<j){
   d49b2:	4298      	cmp	r0, r3
   d49b4:	d206      	bcs.n	d49c4 <_Z11str_reversePc+0x20>
		c = *i;
   d49b6:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d49b8:	7819      	ldrb	r1, [r3, #0]
   d49ba:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d49be:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   d49c2:	e7f6      	b.n	d49b2 <_Z11str_reversePc+0xe>
   d49c4:	bd10      	pop	{r4, pc}

000d49c6 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d49c6:	b570      	push	{r4, r5, r6, lr}
   d49c8:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d49ca:	1e91      	subs	r1, r2, #2
   d49cc:	2922      	cmp	r1, #34	; 0x22
   d49ce:	d820      	bhi.n	d4a12 <ultoa+0x4c>
   d49d0:	4625      	mov	r5, r4
   d49d2:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d49d4:	b910      	cbnz	r0, d49dc <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d49d6:	4423      	add	r3, r4
            *ptr++ = '0';
   d49d8:	2230      	movs	r2, #48	; 0x30
   d49da:	e00e      	b.n	d49fa <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d49dc:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   d49e0:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   d49e4:	b2c1      	uxtb	r1, r0
   d49e6:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   d49ea:	2809      	cmp	r0, #9
                *ptr += '0';
   d49ec:	bf94      	ite	ls
   d49ee:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d49f0:	3157      	addhi	r1, #87	; 0x57
   d49f2:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   d49f6:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d49f8:	e7eb      	b.n	d49d2 <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d49fa:	4299      	cmp	r1, r3
   d49fc:	d202      	bcs.n	d4a04 <ultoa+0x3e>
            *ptr++ = '0';
   d49fe:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d4a02:	e7fa      	b.n	d49fa <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   d4a04:	2300      	movs	r3, #0
	str_reverse(buffer);
   d4a06:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   d4a08:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   d4a0a:	f7ff ffcb 	bl	d49a4 <_Z11str_reversePc>
	return buffer;
   d4a0e:	4620      	mov	r0, r4
   d4a10:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   d4a12:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   d4a14:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4a18 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   d4a18:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4a1c:	ec59 8b10 	vmov	r8, r9, d0
   d4a20:	4607      	mov	r7, r0
   d4a22:	460e      	mov	r6, r1
    bool negative = val<0;
    if (negative) {
   d4a24:	2200      	movs	r2, #0
   d4a26:	2300      	movs	r3, #0
   d4a28:	ee10 0a10 	vmov	r0, s0
   d4a2c:	4649      	mov	r1, r9
   d4a2e:	f001 fe4f 	bl	d66d0 <__aeabi_dcmplt>
   d4a32:	b128      	cbz	r0, d4a40 <_Z4dtoadhPc+0x28>
        val = -val;
   d4a34:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   d4a38:	4699      	mov	r9, r3
        *sout++ = '-';
   d4a3a:	232d      	movs	r3, #45	; 0x2d
   d4a3c:	7033      	strb	r3, [r6, #0]
   d4a3e:	3601      	adds	r6, #1
   d4a40:	2300      	movs	r3, #0
    }
    long scale = 1;
   d4a42:	2401      	movs	r4, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   d4a44:	220a      	movs	r2, #10
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
   d4a46:	b2d9      	uxtb	r1, r3
   d4a48:	428f      	cmp	r7, r1
   d4a4a:	d902      	bls.n	d4a52 <_Z4dtoadhPc+0x3a>
        scale *= 10;
   d4a4c:	4354      	muls	r4, r2
   d4a4e:	3301      	adds	r3, #1
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
   d4a50:	e7f9      	b.n	d4a46 <_Z4dtoadhPc+0x2e>
        scale *= 10;
    val *= scale;   // capture all the significant digits
   d4a52:	4620      	mov	r0, r4
   d4a54:	f001 fb64 	bl	d6120 <__aeabi_i2d>
   d4a58:	4642      	mov	r2, r8
   d4a5a:	464b      	mov	r3, r9
   d4a5c:	f001 fbc6 	bl	d61ec <__aeabi_dmul>
   d4a60:	4682      	mov	sl, r0
   d4a62:	468b      	mov	fp, r1
    uint64_t fixed = uint64_t(val);
   d4a64:	f001 fe94 	bl	d6790 <__aeabi_d2ulz>
   d4a68:	4680      	mov	r8, r0
   d4a6a:	4689      	mov	r9, r1
    if ((val-fixed)>=0.5)    // round last digit
   d4a6c:	f001 fb88 	bl	d6180 <__aeabi_ul2d>
   d4a70:	4602      	mov	r2, r0
   d4a72:	460b      	mov	r3, r1
   d4a74:	4650      	mov	r0, sl
   d4a76:	4659      	mov	r1, fp
   d4a78:	f001 fa04 	bl	d5e84 <__aeabi_dsub>
   d4a7c:	2200      	movs	r2, #0
   d4a7e:	4b17      	ldr	r3, [pc, #92]	; (d4adc <_Z4dtoadhPc+0xc4>)
   d4a80:	f001 fe3a 	bl	d66f8 <__aeabi_dcmpge>
   d4a84:	b118      	cbz	r0, d4a8e <_Z4dtoadhPc+0x76>
        fixed++;
   d4a86:	f118 0801 	adds.w	r8, r8, #1
   d4a8a:	f149 0900 	adc.w	r9, r9, #0

    unsigned long first = (unsigned long)(fixed / scale);
   d4a8e:	17e5      	asrs	r5, r4, #31
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   d4a90:	4622      	mov	r2, r4
   d4a92:	462b      	mov	r3, r5
   d4a94:	4640      	mov	r0, r8
   d4a96:	4649      	mov	r1, r9
   d4a98:	f001 fe62 	bl	d6760 <__aeabi_uldivmod>
   d4a9c:	2301      	movs	r3, #1
   d4a9e:	220a      	movs	r2, #10
   d4aa0:	4631      	mov	r1, r6
   d4aa2:	f7ff ff90 	bl	d49c6 <ultoa>
    if (prec) {
   d4aa6:	b1af      	cbz	r7, d4ad4 <_Z4dtoadhPc+0xbc>
        sout += strlen(sout);
   d4aa8:	4630      	mov	r0, r6
   d4aaa:	f002 f876 	bl	d6b9a <strlen>
        *sout++ = '.';
   d4aae:	232e      	movs	r3, #46	; 0x2e
   d4ab0:	5433      	strb	r3, [r6, r0]
        ultoa(second, sout, 10, prec);
   d4ab2:	3001      	adds	r0, #1
   d4ab4:	4406      	add	r6, r0
   d4ab6:	4622      	mov	r2, r4
   d4ab8:	462b      	mov	r3, r5
   d4aba:	4640      	mov	r0, r8
   d4abc:	4649      	mov	r1, r9
   d4abe:	f001 fe4f 	bl	d6760 <__aeabi_uldivmod>
   d4ac2:	463b      	mov	r3, r7
   d4ac4:	4610      	mov	r0, r2
   d4ac6:	4631      	mov	r1, r6
   d4ac8:	220a      	movs	r2, #10
    }
}
   d4aca:	b001      	add	sp, #4
   d4acc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    ultoa(first, sout, 10, 1);
    if (prec) {
        sout += strlen(sout);
        *sout++ = '.';
        ultoa(second, sout, 10, prec);
   d4ad0:	f7ff bf79 	b.w	d49c6 <ultoa>
    }
}
   d4ad4:	b001      	add	sp, #4
   d4ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4ada:	bf00      	nop
   d4adc:	3fe00000 	.word	0x3fe00000

000d4ae0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d4ae0:	b510      	push	{r4, lr}
   d4ae2:	4604      	mov	r4, r0
{
	free(buffer);
   d4ae4:	6800      	ldr	r0, [r0, #0]
   d4ae6:	f7ff fed7 	bl	d4898 <free>
}
   d4aea:	4620      	mov	r0, r4
   d4aec:	bd10      	pop	{r4, pc}

000d4aee <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d4aee:	b510      	push	{r4, lr}
   d4af0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d4af2:	6800      	ldr	r0, [r0, #0]
   d4af4:	b108      	cbz	r0, d4afa <_ZN6String10invalidateEv+0xc>
   d4af6:	f7ff fecf 	bl	d4898 <free>
	buffer = NULL;
   d4afa:	2300      	movs	r3, #0
   d4afc:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d4afe:	60a3      	str	r3, [r4, #8]
   d4b00:	6063      	str	r3, [r4, #4]
   d4b02:	bd10      	pop	{r4, pc}

000d4b04 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d4b04:	b538      	push	{r3, r4, r5, lr}
   d4b06:	4604      	mov	r4, r0
   d4b08:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d4b0a:	6800      	ldr	r0, [r0, #0]
   d4b0c:	3101      	adds	r1, #1
   d4b0e:	f7ff fecb 	bl	d48a8 <realloc>
	if (newbuffer) {
   d4b12:	b110      	cbz	r0, d4b1a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d4b14:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d4b18:	2001      	movs	r0, #1
	}
	return 0;
}
   d4b1a:	bd38      	pop	{r3, r4, r5, pc}

000d4b1c <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4b1c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d4b1e:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4b20:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d4b22:	b113      	cbz	r3, d4b2a <_ZN6String7reserveEj+0xe>
   d4b24:	6843      	ldr	r3, [r0, #4]
   d4b26:	428b      	cmp	r3, r1
   d4b28:	d207      	bcs.n	d4b3a <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d4b2a:	4620      	mov	r0, r4
   d4b2c:	f7ff ffea 	bl	d4b04 <_ZN6String12changeBufferEj>
   d4b30:	b120      	cbz	r0, d4b3c <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d4b32:	68a3      	ldr	r3, [r4, #8]
   d4b34:	b90b      	cbnz	r3, d4b3a <_ZN6String7reserveEj+0x1e>
   d4b36:	6822      	ldr	r2, [r4, #0]
   d4b38:	7013      	strb	r3, [r2, #0]
   d4b3a:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d4b3c:	bd10      	pop	{r4, pc}

000d4b3e <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4b3e:	b570      	push	{r4, r5, r6, lr}
   d4b40:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d4b42:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4b44:	4604      	mov	r4, r0
   d4b46:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d4b48:	f7ff ffe8 	bl	d4b1c <_ZN6String7reserveEj>
   d4b4c:	b918      	cbnz	r0, d4b56 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d4b4e:	4620      	mov	r0, r4
   d4b50:	f7ff ffcd 	bl	d4aee <_ZN6String10invalidateEv>
		return *this;
   d4b54:	e009      	b.n	d4b6a <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d4b56:	462a      	mov	r2, r5
   d4b58:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d4b5a:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d4b5c:	6820      	ldr	r0, [r4, #0]
   d4b5e:	f001 ffbd 	bl	d6adc <memcpy>
	buffer[len] = 0;
   d4b62:	6822      	ldr	r2, [r4, #0]
   d4b64:	68a3      	ldr	r3, [r4, #8]
   d4b66:	2100      	movs	r1, #0
   d4b68:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d4b6a:	4620      	mov	r0, r4
   d4b6c:	bd70      	pop	{r4, r5, r6, pc}

000d4b6e <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d4b6e:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4b70:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d4b72:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4b74:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d4b76:	6043      	str	r3, [r0, #4]
	len = 0;
   d4b78:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4b7a:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d4b7c:	460d      	mov	r5, r1
   d4b7e:	b139      	cbz	r1, d4b90 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d4b80:	4608      	mov	r0, r1
   d4b82:	f002 f80a 	bl	d6b9a <strlen>
   d4b86:	4629      	mov	r1, r5
   d4b88:	4602      	mov	r2, r0
   d4b8a:	4620      	mov	r0, r4
   d4b8c:	f7ff ffd7 	bl	d4b3e <_ZN6String4copyEPKcj>
}
   d4b90:	4620      	mov	r0, r4
   d4b92:	bd38      	pop	{r3, r4, r5, pc}

000d4b94 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d4b94:	b538      	push	{r3, r4, r5, lr}
   d4b96:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d4b98:	460c      	mov	r4, r1
   d4b9a:	b141      	cbz	r1, d4bae <_ZN6StringaSEPKc+0x1a>
   d4b9c:	4608      	mov	r0, r1
   d4b9e:	f001 fffc 	bl	d6b9a <strlen>
   d4ba2:	4621      	mov	r1, r4
   d4ba4:	4602      	mov	r2, r0
   d4ba6:	4628      	mov	r0, r5
   d4ba8:	f7ff ffc9 	bl	d4b3e <_ZN6String4copyEPKcj>
   d4bac:	e001      	b.n	d4bb2 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d4bae:	f7ff ff9e 	bl	d4aee <_ZN6String10invalidateEv>

	return *this;
}
   d4bb2:	4628      	mov	r0, r5
   d4bb4:	bd38      	pop	{r3, r4, r5, pc}

000d4bb6 <_ZN6StringC1Efi>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
   d4bb6:	b530      	push	{r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4bb8:	2300      	movs	r3, #0
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
   d4bba:	b08b      	sub	sp, #44	; 0x2c
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4bbc:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d4bbe:	6043      	str	r3, [r0, #4]
	len = 0;
   d4bc0:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4bc2:	7303      	strb	r3, [r0, #12]
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
   d4bc4:	4604      	mov	r4, r0
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
   d4bc6:	ee10 0a10 	vmov	r0, s0
   d4bca:	b2cd      	uxtb	r5, r1
   d4bcc:	f001 faba 	bl	d6144 <__aeabi_f2d>
   d4bd0:	ec41 0b10 	vmov	d0, r0, r1
   d4bd4:	a901      	add	r1, sp, #4
   d4bd6:	4628      	mov	r0, r5
   d4bd8:	f7ff ff1e 	bl	d4a18 <_Z4dtoadhPc>
        *this = buf;
   d4bdc:	a901      	add	r1, sp, #4
   d4bde:	4620      	mov	r0, r4
   d4be0:	f7ff ffd8 	bl	d4b94 <_ZN6StringaSEPKc>
}
   d4be4:	4620      	mov	r0, r4
   d4be6:	b00b      	add	sp, #44	; 0x2c
   d4be8:	bd30      	pop	{r4, r5, pc}

000d4bea <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d4bea:	b570      	push	{r4, r5, r6, lr}
   d4bec:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d4bee:	460e      	mov	r6, r1
   d4bf0:	b909      	cbnz	r1, d4bf6 <_ZN6String6concatEPKcj+0xc>
   d4bf2:	2000      	movs	r0, #0
   d4bf4:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d4bf6:	b16a      	cbz	r2, d4c14 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d4bf8:	6883      	ldr	r3, [r0, #8]
   d4bfa:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d4bfc:	4629      	mov	r1, r5
   d4bfe:	f7ff ff8d 	bl	d4b1c <_ZN6String7reserveEj>
   d4c02:	2800      	cmp	r0, #0
   d4c04:	d0f5      	beq.n	d4bf2 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d4c06:	6820      	ldr	r0, [r4, #0]
   d4c08:	68a3      	ldr	r3, [r4, #8]
   d4c0a:	4631      	mov	r1, r6
   d4c0c:	4418      	add	r0, r3
   d4c0e:	f001 ffa1 	bl	d6b54 <strcpy>
	len = newlen;
   d4c12:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d4c14:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d4c16:	bd70      	pop	{r4, r5, r6, pc}

000d4c18 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d4c18:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d4c1a:	688a      	ldr	r2, [r1, #8]
   d4c1c:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d4c1e:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d4c20:	f7ff ffe3 	bl	d4bea <_ZN6String6concatEPKcj>
   d4c24:	b910      	cbnz	r0, d4c2c <_ZplRK15StringSumHelperRK6String+0x14>
   d4c26:	4620      	mov	r0, r4
   d4c28:	f7ff ff61 	bl	d4aee <_ZN6String10invalidateEv>
	return a;
}
   d4c2c:	4620      	mov	r0, r4
   d4c2e:	bd10      	pop	{r4, pc}

000d4c30 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d4c30:	b538      	push	{r3, r4, r5, lr}
   d4c32:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d4c34:	460d      	mov	r5, r1
   d4c36:	b141      	cbz	r1, d4c4a <_ZplRK15StringSumHelperPKc+0x1a>
   d4c38:	4608      	mov	r0, r1
   d4c3a:	f001 ffae 	bl	d6b9a <strlen>
   d4c3e:	4629      	mov	r1, r5
   d4c40:	4602      	mov	r2, r0
   d4c42:	4620      	mov	r0, r4
   d4c44:	f7ff ffd1 	bl	d4bea <_ZN6String6concatEPKcj>
   d4c48:	b910      	cbnz	r0, d4c50 <_ZplRK15StringSumHelperPKc+0x20>
   d4c4a:	4620      	mov	r0, r4
   d4c4c:	f7ff ff4f 	bl	d4aee <_ZN6String10invalidateEv>
	return a;
}
   d4c50:	4620      	mov	r0, r4
   d4c52:	bd38      	pop	{r3, r4, r5, pc}

000d4c54 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.110>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4c54:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4c56:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4c58:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4c5a:	689b      	ldr	r3, [r3, #8]
   d4c5c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4c5e:	68a3      	ldr	r3, [r4, #8]
   d4c60:	3b01      	subs	r3, #1
   d4c62:	60a3      	str	r3, [r4, #8]
   d4c64:	b92b      	cbnz	r3, d4c72 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.110+0x1e>
            _M_destroy();
   d4c66:	6823      	ldr	r3, [r4, #0]
   d4c68:	4620      	mov	r0, r4
   d4c6a:	68db      	ldr	r3, [r3, #12]
        }
    }
   d4c6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d4c70:	4718      	bx	r3
   d4c72:	bd10      	pop	{r4, pc}

000d4c74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d4c74:	680b      	ldr	r3, [r1, #0]
   d4c76:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d4c78:	b113      	cbz	r3, d4c80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d4c7a:	685a      	ldr	r2, [r3, #4]
   d4c7c:	3201      	adds	r2, #1
   d4c7e:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d4c80:	4770      	bx	lr

000d4c82 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4c82:	b510      	push	{r4, lr}
   d4c84:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d4c86:	6800      	ldr	r0, [r0, #0]
   d4c88:	b128      	cbz	r0, d4c96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4c8a:	6843      	ldr	r3, [r0, #4]
   d4c8c:	3b01      	subs	r3, #1
   d4c8e:	6043      	str	r3, [r0, #4]
   d4c90:	b90b      	cbnz	r3, d4c96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d4c92:	f7ff ffdf 	bl	d4c54 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.110>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4c96:	4620      	mov	r0, r4
   d4c98:	bd10      	pop	{r4, pc}
	...

000d4c9c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4c9c:	4802      	ldr	r0, [pc, #8]	; (d4ca8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d4c9e:	2300      	movs	r3, #0
   d4ca0:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4ca2:	f7ff bc8d 	b.w	d45c0 <os_mutex_recursive_create>
   d4ca6:	bf00      	nop
   d4ca8:	2003e3d8 	.word	0x2003e3d8

000d4cac <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4cae:	4606      	mov	r6, r0
   d4cb0:	460d      	mov	r5, r1
   d4cb2:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d4cb4:	2400      	movs	r4, #0
  while (size--) {
   d4cb6:	42bd      	cmp	r5, r7
   d4cb8:	d00c      	beq.n	d4cd4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4cba:	6833      	ldr	r3, [r6, #0]
   d4cbc:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4cc0:	689b      	ldr	r3, [r3, #8]
   d4cc2:	4630      	mov	r0, r6
   d4cc4:	4798      	blx	r3
     if (chunk>=0)
   d4cc6:	2800      	cmp	r0, #0
   d4cc8:	db01      	blt.n	d4cce <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4cca:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d4ccc:	e7f3      	b.n	d4cb6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4cce:	2c00      	cmp	r4, #0
   d4cd0:	bf08      	it	eq
   d4cd2:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d4cd4:	4620      	mov	r0, r4
   d4cd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4cd8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4cd8:	b570      	push	{r4, r5, r6, lr}
   d4cda:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d4cdc:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d4cde:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d4ce0:	b149      	cbz	r1, d4cf6 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d4ce2:	f001 ff5a 	bl	d6b9a <strlen>
   d4ce6:	682b      	ldr	r3, [r5, #0]
   d4ce8:	4602      	mov	r2, r0
   d4cea:	4621      	mov	r1, r4
   d4cec:	4628      	mov	r0, r5
   d4cee:	68db      	ldr	r3, [r3, #12]
    }
   d4cf0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4cf4:	4718      	bx	r3
    }
   d4cf6:	bd70      	pop	{r4, r5, r6, pc}

000d4cf8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4cf8:	6803      	ldr	r3, [r0, #0]
   d4cfa:	689b      	ldr	r3, [r3, #8]
   d4cfc:	4718      	bx	r3

000d4cfe <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4cfe:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4d00:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4d02:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4d04:	f7ff fff8 	bl	d4cf8 <_ZN5Print5printEc>
  n += print('\n');
   d4d08:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d4d0a:	4604      	mov	r4, r0
  n += print('\n');
   d4d0c:	4628      	mov	r0, r5
   d4d0e:	f7ff fff3 	bl	d4cf8 <_ZN5Print5printEc>
  return n;
}
   d4d12:	4420      	add	r0, r4
   d4d14:	bd38      	pop	{r3, r4, r5, pc}

000d4d16 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d4d16:	b538      	push	{r3, r4, r5, lr}
   d4d18:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4d1a:	f7ff ffdd 	bl	d4cd8 <_ZN5Print5writeEPKc>
   d4d1e:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d4d20:	4628      	mov	r0, r5
   d4d22:	f7ff ffec 	bl	d4cfe <_ZN5Print7printlnEv>
  return n;
}
   d4d26:	4420      	add	r0, r4
   d4d28:	bd38      	pop	{r3, r4, r5, pc}

000d4d2a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4d2a:	b530      	push	{r4, r5, lr}
   d4d2c:	b08b      	sub	sp, #44	; 0x2c
   d4d2e:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4d30:	2100      	movs	r1, #0
   d4d32:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4d36:	2a01      	cmp	r2, #1
   d4d38:	bf98      	it	ls
   d4d3a:	220a      	movls	r2, #10
   d4d3c:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d4d40:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d4d44:	fb05 3312 	mls	r3, r5, r2, r3
   d4d48:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4d4c:	2b09      	cmp	r3, #9
   d4d4e:	bf94      	ite	ls
   d4d50:	3330      	addls	r3, #48	; 0x30
   d4d52:	3337      	addhi	r3, #55	; 0x37
   d4d54:	b2db      	uxtb	r3, r3
   d4d56:	4621      	mov	r1, r4
   d4d58:	f804 3901 	strb.w	r3, [r4], #-1
   d4d5c:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d4d5e:	2d00      	cmp	r5, #0
   d4d60:	d1ee      	bne.n	d4d40 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d4d62:	f7ff ffb9 	bl	d4cd8 <_ZN5Print5writeEPKc>
}
   d4d66:	b00b      	add	sp, #44	; 0x2c
   d4d68:	bd30      	pop	{r4, r5, pc}

000d4d6a <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d4d6a:	b410      	push	{r4}
  if (base == 0) return write(n);
   d4d6c:	b92a      	cbnz	r2, d4d7a <_ZN5Print5printEmi+0x10>
   d4d6e:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d4d70:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d4d74:	689b      	ldr	r3, [r3, #8]
   d4d76:	b2c9      	uxtb	r1, r1
   d4d78:	4718      	bx	r3
  else return printNumber(n, base);
   d4d7a:	b2d2      	uxtb	r2, r2
}
   d4d7c:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d4d80:	f7ff bfd3 	b.w	d4d2a <_ZN5Print11printNumberEmh>

000d4d84 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d4d84:	f7ff bff1 	b.w	d4d6a <_ZN5Print5printEmi>

000d4d88 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4d88:	4b01      	ldr	r3, [pc, #4]	; (d4d90 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4d8a:	4a02      	ldr	r2, [pc, #8]	; (d4d94 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4d8c:	601a      	str	r2, [r3, #0]
   d4d8e:	4770      	bx	lr
   d4d90:	2003e3dc 	.word	0x2003e3dc
   d4d94:	000d6cd7 	.word	0x000d6cd7

000d4d98 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4d98:	4b02      	ldr	r3, [pc, #8]	; (d4da4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4d9a:	681a      	ldr	r2, [r3, #0]
   d4d9c:	4b02      	ldr	r3, [pc, #8]	; (d4da8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4d9e:	601a      	str	r2, [r3, #0]
   d4da0:	4770      	bx	lr
   d4da2:	bf00      	nop
   d4da4:	2003e33c 	.word	0x2003e33c
   d4da8:	2003e3e0 	.word	0x2003e3e0

000d4dac <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4dac:	2100      	movs	r1, #0
   d4dae:	f7ff bcd7 	b.w	d4760 <system_delay_ms>

000d4db2 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4db2:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4db4:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4db6:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4db8:	b113      	cbz	r3, d4dc0 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4dba:	2203      	movs	r2, #3
   d4dbc:	4601      	mov	r1, r0
   d4dbe:	4798      	blx	r3
    }
   d4dc0:	4620      	mov	r0, r4
   d4dc2:	bd10      	pop	{r4, pc}

000d4dc4 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4dc4:	b510      	push	{r4, lr}
   d4dc6:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4dc8:	f7ff fff3 	bl	d4db2 <_ZNSt14_Function_baseD1Ev>
   d4dcc:	4620      	mov	r0, r4
   d4dce:	bd10      	pop	{r4, pc}

000d4dd0 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d4dd0:	b513      	push	{r0, r1, r4, lr}
   d4dd2:	460b      	mov	r3, r1
   d4dd4:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4dd6:	c803      	ldmia	r0, {r0, r1}
   d4dd8:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4ddc:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4de0:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4de4:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d4de8:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d4dec:	b002      	add	sp, #8
   d4dee:	bd10      	pop	{r4, pc}

000d4df0 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4df0:	4803      	ldr	r0, [pc, #12]	; (d4e00 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4df2:	4a04      	ldr	r2, [pc, #16]	; (d4e04 <_GLOBAL__sub_I_RGB+0x14>)
   d4df4:	4904      	ldr	r1, [pc, #16]	; (d4e08 <_GLOBAL__sub_I_RGB+0x18>)
   d4df6:	2300      	movs	r3, #0
   d4df8:	6083      	str	r3, [r0, #8]
   d4dfa:	f000 beed 	b.w	d5bd8 <__aeabi_atexit>
   d4dfe:	bf00      	nop
   d4e00:	2003e3e4 	.word	0x2003e3e4
   d4e04:	2003e3a4 	.word	0x2003e3a4
   d4e08:	000d4dc5 	.word	0x000d4dc5

000d4e0c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d4e0c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d4e0e:	4b0c      	ldr	r3, [pc, #48]	; (d4e40 <serialEventRun+0x34>)
   d4e10:	b133      	cbz	r3, d4e20 <serialEventRun+0x14>
   d4e12:	f000 fbf9 	bl	d5608 <_Z16_fetch_usbserialv>
   d4e16:	6803      	ldr	r3, [r0, #0]
   d4e18:	691b      	ldr	r3, [r3, #16]
   d4e1a:	4798      	blx	r3
   d4e1c:	2800      	cmp	r0, #0
   d4e1e:	dc09      	bgt.n	d4e34 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d4e20:	4b08      	ldr	r3, [pc, #32]	; (d4e44 <serialEventRun+0x38>)
   d4e22:	b163      	cbz	r3, d4e3e <serialEventRun+0x32>
   d4e24:	f000 fc6e 	bl	d5704 <_Z22__fetch_global_Serial1v>
   d4e28:	6803      	ldr	r3, [r0, #0]
   d4e2a:	691b      	ldr	r3, [r3, #16]
   d4e2c:	4798      	blx	r3
   d4e2e:	2800      	cmp	r0, #0
   d4e30:	dc03      	bgt.n	d4e3a <serialEventRun+0x2e>
   d4e32:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d4e34:	f3af 8000 	nop.w
   d4e38:	e7f2      	b.n	d4e20 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d4e3a:	f3af 8000 	nop.w
   d4e3e:	bd08      	pop	{r3, pc}
	...

000d4e48 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d4e48:	b508      	push	{r3, lr}
	serialEventRun();
   d4e4a:	f7ff ffdf 	bl	d4e0c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4e4e:	f7ff fb8f 	bl	d4570 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4e52:	4b01      	ldr	r3, [pc, #4]	; (d4e58 <_post_loop+0x10>)
   d4e54:	6018      	str	r0, [r3, #0]
   d4e56:	bd08      	pop	{r3, pc}
   d4e58:	2003e734 	.word	0x2003e734

000d4e5c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4e5c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4e5e:	2300      	movs	r3, #0
   d4e60:	9300      	str	r3, [sp, #0]
   d4e62:	461a      	mov	r2, r3
   d4e64:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4e68:	f7ff fc9c 	bl	d47a4 <system_ctrl_set_result>
}
   d4e6c:	b003      	add	sp, #12
   d4e6e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4e74 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d4e74:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d4e76:	8843      	ldrh	r3, [r0, #2]
   d4e78:	2b0a      	cmp	r3, #10
   d4e7a:	d008      	beq.n	d4e8e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4e7c:	2b50      	cmp	r3, #80	; 0x50
   d4e7e:	d109      	bne.n	d4e94 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d4e80:	4b09      	ldr	r3, [pc, #36]	; (d4ea8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d4e82:	681b      	ldr	r3, [r3, #0]
   d4e84:	b13b      	cbz	r3, d4e96 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d4e86:	b003      	add	sp, #12
   d4e88:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d4e8c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d4e8e:	f7ff ffe5 	bl	d4e5c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d4e92:	e006      	b.n	d4ea2 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4e94:	2300      	movs	r3, #0
   d4e96:	9300      	str	r3, [sp, #0]
   d4e98:	461a      	mov	r2, r3
   d4e9a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4e9e:	f7ff fc81 	bl	d47a4 <system_ctrl_set_result>
        break;
    }
}
   d4ea2:	b003      	add	sp, #12
   d4ea4:	f85d fb04 	ldr.w	pc, [sp], #4
   d4ea8:	2003e3f4 	.word	0x2003e3f4

000d4eac <module_user_init_hook>:

void module_user_init_hook()
{
   d4eac:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d4eae:	f7ff fb57 	bl	d4560 <HAL_RNG_GetRandomNumber>
   d4eb2:	4604      	mov	r4, r0
    srand(seed);
   d4eb4:	f001 fe26 	bl	d6b04 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d4eb8:	4b07      	ldr	r3, [pc, #28]	; (d4ed8 <module_user_init_hook+0x2c>)
   d4eba:	b113      	cbz	r3, d4ec2 <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d4ebc:	4620      	mov	r0, r4
   d4ebe:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d4ec2:	2100      	movs	r1, #0
   d4ec4:	4804      	ldr	r0, [pc, #16]	; (d4ed8 <module_user_init_hook+0x2c>)
   d4ec6:	f7ff fcd7 	bl	d4878 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4eca:	2100      	movs	r1, #0
   d4ecc:	4803      	ldr	r0, [pc, #12]	; (d4edc <module_user_init_hook+0x30>)
}
   d4ece:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4ed2:	f7ff bc5d 	b.w	d4790 <system_ctrl_set_app_request_handler>
   d4ed6:	bf00      	nop
   d4ed8:	00000000 	.word	0x00000000
   d4edc:	000d4e75 	.word	0x000d4e75

000d4ee0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4ee0:	4770      	bx	lr

000d4ee2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d4ee2:	2000      	movs	r0, #0
   d4ee4:	4770      	bx	lr

000d4ee6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4ee6:	b510      	push	{r4, lr}
   d4ee8:	2110      	movs	r1, #16
   d4eea:	4604      	mov	r4, r0
   d4eec:	f000 fe79 	bl	d5be2 <_ZdlPvj>
   d4ef0:	4620      	mov	r0, r4
   d4ef2:	bd10      	pop	{r4, pc}

000d4ef4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d4ef4:	b508      	push	{r3, lr}
      { delete this; }
   d4ef6:	b108      	cbz	r0, d4efc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d4ef8:	f7ff fff5 	bl	d4ee6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d4efc:	bd08      	pop	{r3, pc}

000d4efe <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4efe:	2200      	movs	r2, #0
   d4f00:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d4f02:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4f04:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d4f08:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4f0a:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d4f0e:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d4f10:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4f12:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4f14:	680c      	ldr	r4, [r1, #0]
   d4f16:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d4f18:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d4f1a:	bd10      	pop	{r4, pc}

000d4f1c <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d4f1c:	b510      	push	{r4, lr}
   d4f1e:	4604      	mov	r4, r0
    free((void*)msg_);
   d4f20:	6800      	ldr	r0, [r0, #0]
   d4f22:	f7ff fcb9 	bl	d4898 <free>
}
   d4f26:	4620      	mov	r0, r4
   d4f28:	bd10      	pop	{r4, pc}

000d4f2a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d4f2a:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d4f2c:	68c4      	ldr	r4, [r0, #12]
   d4f2e:	b1f4      	cbz	r4, d4f6e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d4f30:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d4f32:	2b02      	cmp	r3, #2
   d4f34:	d103      	bne.n	d4f3e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d4f36:	f104 000c 	add.w	r0, r4, #12
   d4f3a:	f7ff ffef 	bl	d4f1c <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d4f3e:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d4f40:	b135      	cbz	r5, d4f50 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4f42:	4628      	mov	r0, r5
   d4f44:	f7ff ff35 	bl	d4db2 <_ZNSt14_Function_baseD1Ev>
   d4f48:	2110      	movs	r1, #16
   d4f4a:	4628      	mov	r0, r5
   d4f4c:	f000 fe49 	bl	d5be2 <_ZdlPvj>
   d4f50:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d4f52:	b135      	cbz	r5, d4f62 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d4f54:	4628      	mov	r0, r5
   d4f56:	f7ff ff2c 	bl	d4db2 <_ZNSt14_Function_baseD1Ev>
   d4f5a:	2110      	movs	r1, #16
   d4f5c:	4628      	mov	r0, r5
   d4f5e:	f000 fe40 	bl	d5be2 <_ZdlPvj>
   d4f62:	4620      	mov	r0, r4
   d4f64:	2114      	movs	r1, #20
   d4f66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4f6a:	f000 be3a 	b.w	d5be2 <_ZdlPvj>
   d4f6e:	bd38      	pop	{r3, r4, r5, pc}

000d4f70 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d4f70:	b513      	push	{r0, r1, r4, lr}
   d4f72:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d4f74:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d4f78:	2300      	movs	r3, #0
   d4f7a:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4f7c:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4f7e:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d4f80:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4f82:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d4f84:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4f86:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4f88:	f7ff fe7b 	bl	d4c82 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4f8c:	4620      	mov	r0, r4
   d4f8e:	b002      	add	sp, #8
   d4f90:	bd10      	pop	{r4, pc}

000d4f92 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d4f92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4f94:	460c      	mov	r4, r1
   d4f96:	ad02      	add	r5, sp, #8
   d4f98:	f854 3b04 	ldr.w	r3, [r4], #4
   d4f9c:	f845 3d08 	str.w	r3, [r5, #-8]!
   d4fa0:	4606      	mov	r6, r0
   d4fa2:	460f      	mov	r7, r1
   d4fa4:	a801      	add	r0, sp, #4
   d4fa6:	4621      	mov	r1, r4
   d4fa8:	f7ff fe64 	bl	d4c74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d4fac:	4629      	mov	r1, r5
   d4fae:	4630      	mov	r0, r6
   d4fb0:	f7ff ffde 	bl	d4f70 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4fb4:	a801      	add	r0, sp, #4
   d4fb6:	f7ff fe64 	bl	d4c82 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4fba:	4620      	mov	r0, r4
   d4fbc:	f7ff fe61 	bl	d4c82 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d4fc0:	4638      	mov	r0, r7
   d4fc2:	2108      	movs	r1, #8
   d4fc4:	f000 fe0d 	bl	d5be2 <_ZdlPvj>
        return p;
    }
   d4fc8:	4630      	mov	r0, r6
   d4fca:	b003      	add	sp, #12
   d4fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d4fd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d4fd0:	b538      	push	{r3, r4, r5, lr}
   d4fd2:	2300      	movs	r3, #0
   d4fd4:	4604      	mov	r4, r0
   d4fd6:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4fd8:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d4fda:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4fdc:	f7ff f85b 	bl	d4096 <_Znwj>
   d4fe0:	b128      	cbz	r0, d4fee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d4fe2:	2301      	movs	r3, #1
   d4fe4:	6043      	str	r3, [r0, #4]
   d4fe6:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d4fe8:	4b02      	ldr	r3, [pc, #8]	; (d4ff4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d4fea:	6003      	str	r3, [r0, #0]
   d4fec:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4fee:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d4ff0:	4620      	mov	r0, r4
   d4ff2:	bd38      	pop	{r3, r4, r5, pc}
   d4ff4:	000d6d78 	.word	0x000d6d78

000d4ff8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4ff8:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d4ffa:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4ffc:	b90a      	cbnz	r2, d5002 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d4ffe:	f000 fdf2 	bl	d5be6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5002:	68c3      	ldr	r3, [r0, #12]
    }
   d5004:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5008:	4718      	bx	r3

000d500a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d500a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d500c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d500e:	f100 0110 	add.w	r1, r0, #16
   d5012:	f7ff fff1 	bl	d4ff8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5016:	bd08      	pop	{r3, pc}

000d5018 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5018:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d501a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d501c:	b90a      	cbnz	r2, d5022 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d501e:	f000 fde2 	bl	d5be6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5022:	68c3      	ldr	r3, [r0, #12]
    }
   d5024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5028:	4718      	bx	r3

000d502a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d502a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d502c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d502e:	f100 0110 	add.w	r1, r0, #16
   d5032:	f7ff fff1 	bl	d5018 <_ZNKSt8functionIFvRKbEEclES1_>
   d5036:	bd08      	pop	{r3, pc}

000d5038 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5038:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d503a:	2300      	movs	r3, #0
   d503c:	6083      	str	r3, [r0, #8]
   d503e:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5040:	4604      	mov	r4, r0
   d5042:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d5044:	b12b      	cbz	r3, d5052 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5046:	2202      	movs	r2, #2
   d5048:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d504a:	68eb      	ldr	r3, [r5, #12]
   d504c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d504e:	68ab      	ldr	r3, [r5, #8]
   d5050:	60a3      	str	r3, [r4, #8]
	}
    }
   d5052:	4620      	mov	r0, r4
   d5054:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5058 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d5058:	b5f0      	push	{r4, r5, r6, r7, lr}
   d505a:	b089      	sub	sp, #36	; 0x24
   d505c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d505e:	4668      	mov	r0, sp
   d5060:	f7ff ff4d 	bl	d4efe <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d5064:	2300      	movs	r3, #0
   d5066:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d506a:	f04f 0202 	mov.w	r2, #2
   d506e:	e8d4 3f4f 	ldrexb	r3, [r4]
   d5072:	2b00      	cmp	r3, #0
   d5074:	d103      	bne.n	d507e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d5076:	e8c4 2f41 	strexb	r1, r2, [r4]
   d507a:	2900      	cmp	r1, #0
   d507c:	d1f7      	bne.n	d506e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d507e:	d002      	beq.n	d5086 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d5080:	f88d 3008 	strb.w	r3, [sp, #8]
   d5084:	e063      	b.n	d514e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d5086:	f114 050c 	adds.w	r5, r4, #12
   d508a:	d003      	beq.n	d5094 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d508c:	4669      	mov	r1, sp
   d508e:	4628      	mov	r0, r5
   d5090:	f7ff ff35 	bl	d4efe <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5094:	f3bf 8f5f 	dmb	sy
   d5098:	2301      	movs	r3, #1
   d509a:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d509c:	2000      	movs	r0, #0
   d509e:	f104 0308 	add.w	r3, r4, #8
   d50a2:	f3bf 8f5f 	dmb	sy
   d50a6:	e853 6f00 	ldrex	r6, [r3]
   d50aa:	e843 0200 	strex	r2, r0, [r3]
   d50ae:	2a00      	cmp	r2, #0
   d50b0:	d1f9      	bne.n	d50a6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d50b2:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d50b6:	2e00      	cmp	r6, #0
   d50b8:	d049      	beq.n	d514e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d50ba:	f7ff fb59 	bl	d4770 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d50be:	b120      	cbz	r0, d50ca <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d50c0:	4629      	mov	r1, r5
   d50c2:	4630      	mov	r0, r6
   d50c4:	f7ff ff98 	bl	d4ff8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d50c8:	e03a      	b.n	d5140 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d50ca:	4631      	mov	r1, r6
   d50cc:	a802      	add	r0, sp, #8
   d50ce:	f7ff ffb3 	bl	d5038 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d50d2:	68e0      	ldr	r0, [r4, #12]
   d50d4:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d50d8:	b108      	cbz	r0, d50de <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d50da:	f001 fd43 	bl	d6b64 <strdup>
   d50de:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d50e0:	2010      	movs	r0, #16
   d50e2:	f8ad 501c 	strh.w	r5, [sp, #28]
   d50e6:	f7fe ffd6 	bl	d4096 <_Znwj>
   d50ea:	4605      	mov	r5, r0
   d50ec:	b1e8      	cbz	r0, d512a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d50ee:	2700      	movs	r7, #0
   d50f0:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d50f2:	2018      	movs	r0, #24
   d50f4:	f7fe ffcf 	bl	d4096 <_Znwj>
   d50f8:	4604      	mov	r4, r0
   d50fa:	b188      	cbz	r0, d5120 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d50fc:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d50fe:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5100:	a802      	add	r0, sp, #8
   d5102:	f7ff fe65 	bl	d4dd0 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5106:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5108:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d510a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d510c:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d510e:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5110:	a906      	add	r1, sp, #24
   d5112:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5114:	60e3      	str	r3, [r4, #12]
   d5116:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d511a:	9205      	str	r2, [sp, #20]
   d511c:	f7ff feef 	bl	d4efe <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5120:	4b0d      	ldr	r3, [pc, #52]	; (d5158 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d5122:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5124:	4b0d      	ldr	r3, [pc, #52]	; (d515c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5126:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5128:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d512a:	a806      	add	r0, sp, #24
   d512c:	f7ff fef6 	bl	d4f1c <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5130:	a802      	add	r0, sp, #8
   d5132:	f7ff fe3e 	bl	d4db2 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5136:	2200      	movs	r2, #0
   d5138:	4629      	mov	r1, r5
   d513a:	4809      	ldr	r0, [pc, #36]	; (d5160 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d513c:	f7ff fb20 	bl	d4780 <application_thread_invoke>
   d5140:	4630      	mov	r0, r6
   d5142:	f7ff fe36 	bl	d4db2 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5146:	2110      	movs	r1, #16
   d5148:	4630      	mov	r0, r6
   d514a:	f000 fd4a 	bl	d5be2 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d514e:	4668      	mov	r0, sp
   d5150:	f7ff fee4 	bl	d4f1c <_ZN8particle5ErrorD1Ev>
    }
   d5154:	b009      	add	sp, #36	; 0x24
   d5156:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5158:	000d500b 	.word	0x000d500b
   d515c:	000d5281 	.word	0x000d5281
   d5160:	000d5751 	.word	0x000d5751

000d5164 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5168:	b08b      	sub	sp, #44	; 0x2c
   d516a:	4606      	mov	r6, r0
   d516c:	460f      	mov	r7, r1
   d516e:	4690      	mov	r8, r2
   d5170:	4699      	mov	r9, r3
   d5172:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5176:	f7ff fb6f 	bl	d4858 <spark_cloud_flag_connected>
   d517a:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
   d517c:	4683      	mov	fp, r0
   d517e:	bb30      	cbnz	r0, d51ce <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5180:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d5184:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5186:	a905      	add	r1, sp, #20
   d5188:	4628      	mov	r0, r5
   d518a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d518e:	f7ff feb6 	bl	d4efe <_ZN8particle5ErrorC1EOS0_>
   d5192:	2014      	movs	r0, #20
   d5194:	f7fe ff7f 	bl	d4096 <_Znwj>
   d5198:	4604      	mov	r4, r0
   d519a:	b158      	cbz	r0, d51b4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d519c:	2302      	movs	r3, #2
   d519e:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d51a0:	2301      	movs	r3, #1
   d51a2:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d51a4:	f8c0 b004 	str.w	fp, [r0, #4]
   d51a8:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d51ac:	4629      	mov	r1, r5
   d51ae:	300c      	adds	r0, #12
   d51b0:	f7ff fea5 	bl	d4efe <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d51b4:	4630      	mov	r0, r6
   d51b6:	4621      	mov	r1, r4
   d51b8:	f840 4b04 	str.w	r4, [r0], #4
   d51bc:	f7ff ff08 	bl	d4fd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d51c0:	4628      	mov	r0, r5
   d51c2:	f7ff feab 	bl	d4f1c <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d51c6:	a805      	add	r0, sp, #20
   d51c8:	f7ff fea8 	bl	d4f1c <_ZN8particle5ErrorD1Ev>
   d51cc:	e052      	b.n	d5274 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d51ce:	2400      	movs	r4, #0
   d51d0:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d51d2:	2014      	movs	r0, #20
   d51d4:	606c      	str	r4, [r5, #4]
   d51d6:	60ac      	str	r4, [r5, #8]
   d51d8:	9307      	str	r3, [sp, #28]
   d51da:	f7fe ff5c 	bl	d4096 <_Znwj>
   d51de:	4601      	mov	r1, r0
   d51e0:	b118      	cbz	r0, d51ea <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d51e2:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d51e4:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d51e6:	6044      	str	r4, [r0, #4]
   d51e8:	6084      	str	r4, [r0, #8]
   d51ea:	a804      	add	r0, sp, #16
   d51ec:	9103      	str	r1, [sp, #12]
   d51ee:	f7ff feef 	bl	d4fd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d51f2:	4b22      	ldr	r3, [pc, #136]	; (d527c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d51f4:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d51f6:	2008      	movs	r0, #8
   d51f8:	f7fe ff4d 	bl	d4096 <_Znwj>
   d51fc:	4604      	mov	r4, r0
   d51fe:	b128      	cbz	r0, d520c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5200:	9b03      	ldr	r3, [sp, #12]
   d5202:	f840 3b04 	str.w	r3, [r0], #4
   d5206:	a904      	add	r1, sp, #16
   d5208:	f7ff fd34 	bl	d4c74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d520c:	9500      	str	r5, [sp, #0]
   d520e:	fa5f f38a 	uxtb.w	r3, sl
   d5212:	464a      	mov	r2, r9
   d5214:	4641      	mov	r1, r8
   d5216:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d5218:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d521a:	f7ff fb25 	bl	d4868 <spark_send_event>
   d521e:	b920      	cbnz	r0, d522a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d5220:	9b03      	ldr	r3, [sp, #12]
   d5222:	785b      	ldrb	r3, [r3, #1]
   d5224:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d5228:	b183      	cbz	r3, d524c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d522a:	9b03      	ldr	r3, [sp, #12]
   d522c:	9305      	str	r3, [sp, #20]
   d522e:	a904      	add	r1, sp, #16
   d5230:	a806      	add	r0, sp, #24
   d5232:	f7ff fd1f 	bl	d4c74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d5236:	a905      	add	r1, sp, #20
   d5238:	4630      	mov	r0, r6
   d523a:	f7ff fe99 	bl	d4f70 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d523e:	a806      	add	r0, sp, #24
   d5240:	f7ff fd1f 	bl	d4c82 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5244:	a804      	add	r0, sp, #16
   d5246:	f7ff fd1c 	bl	d4c82 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d524a:	e013      	b.n	d5274 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d524c:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d5250:	a905      	add	r1, sp, #20
   d5252:	a803      	add	r0, sp, #12
   d5254:	9205      	str	r2, [sp, #20]
   d5256:	f8ad 3018 	strh.w	r3, [sp, #24]
   d525a:	f7ff fefd 	bl	d5058 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d525e:	a805      	add	r0, sp, #20
   d5260:	f7ff fe5c 	bl	d4f1c <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d5264:	a805      	add	r0, sp, #20
   d5266:	9909      	ldr	r1, [sp, #36]	; 0x24
   d5268:	f7ff fe93 	bl	d4f92 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d526c:	a806      	add	r0, sp, #24
   d526e:	f7ff fd08 	bl	d4c82 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5272:	e7da      	b.n	d522a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d5274:	4630      	mov	r0, r6
   d5276:	b00b      	add	sp, #44	; 0x2c
   d5278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d527c:	000d53f1 	.word	0x000d53f1

000d5280 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5280:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5282:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5284:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d5286:	d006      	beq.n	d5296 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d5288:	2a03      	cmp	r2, #3
   d528a:	d017      	beq.n	d52bc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d528c:	2a01      	cmp	r2, #1
   d528e:	d122      	bne.n	d52d6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5290:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5292:	6003      	str	r3, [r0, #0]
	      break;
   d5294:	e01f      	b.n	d52d6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5296:	2018      	movs	r0, #24
   d5298:	680e      	ldr	r6, [r1, #0]
   d529a:	f7fe fefc 	bl	d4096 <_Znwj>
   d529e:	4605      	mov	r5, r0
   d52a0:	b150      	cbz	r0, d52b8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d52a2:	4631      	mov	r1, r6
   d52a4:	f7ff fec8 	bl	d5038 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d52a8:	6930      	ldr	r0, [r6, #16]
   d52aa:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d52ae:	b108      	cbz	r0, d52b4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d52b0:	f001 fc58 	bl	d6b64 <strdup>
   d52b4:	6128      	str	r0, [r5, #16]
   d52b6:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d52b8:	6025      	str	r5, [r4, #0]
   d52ba:	e00c      	b.n	d52d6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d52bc:	6804      	ldr	r4, [r0, #0]
   d52be:	b154      	cbz	r4, d52d6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d52c0:	f104 0010 	add.w	r0, r4, #16
   d52c4:	f7ff fe2a 	bl	d4f1c <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d52c8:	4620      	mov	r0, r4
   d52ca:	f7ff fd72 	bl	d4db2 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d52ce:	2118      	movs	r1, #24
   d52d0:	4620      	mov	r0, r4
   d52d2:	f000 fc86 	bl	d5be2 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d52d6:	2000      	movs	r0, #0
   d52d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d52da <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d52da:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d52dc:	2300      	movs	r3, #0
   d52de:	6083      	str	r3, [r0, #8]
   d52e0:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d52e2:	4604      	mov	r4, r0
   d52e4:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d52e6:	b12b      	cbz	r3, d52f4 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d52e8:	2202      	movs	r2, #2
   d52ea:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d52ec:	68eb      	ldr	r3, [r5, #12]
   d52ee:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d52f0:	68ab      	ldr	r3, [r5, #8]
   d52f2:	60a3      	str	r3, [r4, #8]
	}
    }
   d52f4:	4620      	mov	r0, r4
   d52f6:	bd38      	pop	{r3, r4, r5, pc}

000d52f8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d52f8:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d52fa:	b570      	push	{r4, r5, r6, lr}
   d52fc:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d52fe:	d006      	beq.n	d530e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d5300:	2a03      	cmp	r2, #3
   d5302:	d011      	beq.n	d5328 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d5304:	2a01      	cmp	r2, #1
   d5306:	d118      	bne.n	d533a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5308:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d530a:	6003      	str	r3, [r0, #0]
	      break;
   d530c:	e015      	b.n	d533a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d530e:	2014      	movs	r0, #20
   d5310:	680e      	ldr	r6, [r1, #0]
   d5312:	f7fe fec0 	bl	d4096 <_Znwj>
   d5316:	4605      	mov	r5, r0
   d5318:	b120      	cbz	r0, d5324 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d531a:	4631      	mov	r1, r6
   d531c:	f7ff ffdd 	bl	d52da <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d5320:	7c33      	ldrb	r3, [r6, #16]
   d5322:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5324:	6025      	str	r5, [r4, #0]
   d5326:	e008      	b.n	d533a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5328:	6804      	ldr	r4, [r0, #0]
   d532a:	b134      	cbz	r4, d533a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d532c:	4620      	mov	r0, r4
   d532e:	f7ff fd40 	bl	d4db2 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5332:	2114      	movs	r1, #20
   d5334:	4620      	mov	r0, r4
   d5336:	f000 fc54 	bl	d5be2 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d533a:	2000      	movs	r0, #0
   d533c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5340 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d5340:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d5342:	2300      	movs	r3, #0
   d5344:	b087      	sub	sp, #28
   d5346:	460c      	mov	r4, r1
   d5348:	f3bf 8f5f 	dmb	sy
   d534c:	e850 6f00 	ldrex	r6, [r0]
   d5350:	e840 3200 	strex	r2, r3, [r0]
   d5354:	2a00      	cmp	r2, #0
   d5356:	d1f9      	bne.n	d534c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d5358:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d535c:	2e00      	cmp	r6, #0
   d535e:	d03f      	beq.n	d53e0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5360:	4618      	mov	r0, r3
   d5362:	f7ff fa05 	bl	d4770 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d5366:	4607      	mov	r7, r0
   d5368:	b120      	cbz	r0, d5374 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d536a:	4621      	mov	r1, r4
   d536c:	4630      	mov	r0, r6
   d536e:	f7ff fe53 	bl	d5018 <_ZNKSt8functionIFvRKbEEclES1_>
   d5372:	e02e      	b.n	d53d2 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5374:	4631      	mov	r1, r6
   d5376:	a801      	add	r0, sp, #4
   d5378:	f7ff ffaf 	bl	d52da <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d537c:	7823      	ldrb	r3, [r4, #0]
   d537e:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5382:	2010      	movs	r0, #16
   d5384:	f7fe fe87 	bl	d4096 <_Znwj>
   d5388:	4605      	mov	r5, r0
   d538a:	b1d0      	cbz	r0, d53c2 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d538c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d538e:	2014      	movs	r0, #20
   d5390:	f7fe fe81 	bl	d4096 <_Znwj>
   d5394:	4604      	mov	r4, r0
   d5396:	b178      	cbz	r0, d53b8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5398:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d539a:	4601      	mov	r1, r0
   d539c:	a801      	add	r0, sp, #4
   d539e:	f7ff fd17 	bl	d4dd0 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d53a2:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d53a4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d53a6:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d53a8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d53aa:	9203      	str	r2, [sp, #12]
   d53ac:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d53ae:	60e3      	str	r3, [r4, #12]
   d53b0:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d53b4:	9204      	str	r2, [sp, #16]
   d53b6:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d53b8:	4b0a      	ldr	r3, [pc, #40]	; (d53e4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d53ba:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d53bc:	4b0a      	ldr	r3, [pc, #40]	; (d53e8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d53be:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d53c0:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d53c2:	a801      	add	r0, sp, #4
   d53c4:	f7ff fcf5 	bl	d4db2 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d53c8:	2200      	movs	r2, #0
   d53ca:	4629      	mov	r1, r5
   d53cc:	4807      	ldr	r0, [pc, #28]	; (d53ec <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d53ce:	f7ff f9d7 	bl	d4780 <application_thread_invoke>
   d53d2:	4630      	mov	r0, r6
   d53d4:	f7ff fced 	bl	d4db2 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d53d8:	2110      	movs	r1, #16
   d53da:	4630      	mov	r0, r6
   d53dc:	f000 fc01 	bl	d5be2 <_ZdlPvj>
        }
    }
   d53e0:	b007      	add	sp, #28
   d53e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d53e4:	000d502b 	.word	0x000d502b
   d53e8:	000d52f9 	.word	0x000d52f9
   d53ec:	000d5751 	.word	0x000d5751

000d53f0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d53f0:	b530      	push	{r4, r5, lr}
   d53f2:	b085      	sub	sp, #20
   d53f4:	4604      	mov	r4, r0
   d53f6:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d53f8:	4668      	mov	r0, sp
   d53fa:	4611      	mov	r1, r2
   d53fc:	f7ff fdc9 	bl	d4f92 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d5400:	b17c      	cbz	r4, d5422 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d5402:	b224      	sxth	r4, r4
   d5404:	4628      	mov	r0, r5
   d5406:	b10d      	cbz	r5, d540c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d5408:	f001 fbac 	bl	d6b64 <strdup>
   d540c:	9002      	str	r0, [sp, #8]
   d540e:	a902      	add	r1, sp, #8
   d5410:	4668      	mov	r0, sp
   d5412:	f8ad 400c 	strh.w	r4, [sp, #12]
   d5416:	f7ff fe1f 	bl	d5058 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d541a:	a802      	add	r0, sp, #8
   d541c:	f7ff fd7e 	bl	d4f1c <_ZN8particle5ErrorD1Ev>
   d5420:	e01d      	b.n	d545e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d5422:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d5424:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5428:	f04f 0201 	mov.w	r2, #1
   d542c:	e8d0 3f4f 	ldrexb	r3, [r0]
   d5430:	42a3      	cmp	r3, r4
   d5432:	d103      	bne.n	d543c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d5434:	e8c0 2f41 	strexb	r1, r2, [r0]
   d5438:	2900      	cmp	r1, #0
   d543a:	d1f7      	bne.n	d542c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d543c:	d002      	beq.n	d5444 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d543e:	f88d 3008 	strb.w	r3, [sp, #8]
   d5442:	e00c      	b.n	d545e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d5444:	f110 010c 	adds.w	r1, r0, #12
   d5448:	f04f 0301 	mov.w	r3, #1
   d544c:	bf18      	it	ne
   d544e:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5450:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d5454:	3004      	adds	r0, #4
   d5456:	f800 3c03 	strb.w	r3, [r0, #-3]
   d545a:	f7ff ff71 	bl	d5340 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d545e:	a801      	add	r0, sp, #4
   d5460:	f7ff fc0f 	bl	d4c82 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d5464:	b005      	add	sp, #20
   d5466:	bd30      	pop	{r4, r5, pc}

000d5468 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5468:	4770      	bx	lr

000d546a <_ZN9IPAddressD0Ev>:
   d546a:	b510      	push	{r4, lr}
   d546c:	2118      	movs	r1, #24
   d546e:	4604      	mov	r4, r0
   d5470:	f000 fbb7 	bl	d5be2 <_ZdlPvj>
   d5474:	4620      	mov	r0, r4
   d5476:	bd10      	pop	{r4, pc}

000d5478 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5478:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d547a:	7d03      	ldrb	r3, [r0, #20]
   d547c:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d547e:	b08d      	sub	sp, #52	; 0x34
   d5480:	460e      	mov	r6, r1
   d5482:	f100 0704 	add.w	r7, r0, #4
   d5486:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d548a:	d002      	beq.n	d5492 <_ZNK9IPAddress7printToER5Print+0x1a>
   d548c:	f100 0508 	add.w	r5, r0, #8
   d5490:	e018      	b.n	d54c4 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5492:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5494:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5496:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d549a:	232f      	movs	r3, #47	; 0x2f
   d549c:	462a      	mov	r2, r5
   d549e:	200a      	movs	r0, #10
   d54a0:	f7ff f896 	bl	d45d0 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d54a4:	4628      	mov	r0, r5
   d54a6:	f001 fb78 	bl	d6b9a <strlen>
   d54aa:	6833      	ldr	r3, [r6, #0]
   d54ac:	4602      	mov	r2, r0
   d54ae:	68db      	ldr	r3, [r3, #12]
   d54b0:	4629      	mov	r1, r5
   d54b2:	4630      	mov	r0, r6
   d54b4:	4798      	blx	r3
   d54b6:	e00f      	b.n	d54d8 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d54b8:	b124      	cbz	r4, d54c4 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d54ba:	212e      	movs	r1, #46	; 0x2e
   d54bc:	4630      	mov	r0, r6
   d54be:	f7ff fc1b 	bl	d4cf8 <_ZN5Print5printEc>
   d54c2:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d54c4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d54c8:	220a      	movs	r2, #10
   d54ca:	4630      	mov	r0, r6
   d54cc:	f7ff fc5a 	bl	d4d84 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d54d0:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d54d2:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d54d4:	d1f0      	bne.n	d54b8 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d54d6:	4620      	mov	r0, r4
    }
    return n;
}
   d54d8:	b00d      	add	sp, #52	; 0x34
   d54da:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d54dc <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d54dc:	b510      	push	{r4, lr}
   d54de:	4b05      	ldr	r3, [pc, #20]	; (d54f4 <_ZN9IPAddressC1Ev+0x18>)
   d54e0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d54e2:	2211      	movs	r2, #17
   d54e4:	f840 3b04 	str.w	r3, [r0], #4
   d54e8:	2100      	movs	r1, #0
   d54ea:	f001 fb02 	bl	d6af2 <memset>
{
    clear();
}
   d54ee:	4620      	mov	r0, r4
   d54f0:	bd10      	pop	{r4, pc}
   d54f2:	bf00      	nop
   d54f4:	000d6d94 	.word	0x000d6d94

000d54f8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d54f8:	4603      	mov	r3, r0
   d54fa:	4a07      	ldr	r2, [pc, #28]	; (d5518 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d54fc:	b510      	push	{r4, lr}
   d54fe:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d5502:	f101 0210 	add.w	r2, r1, #16
   d5506:	f851 4b04 	ldr.w	r4, [r1], #4
   d550a:	f843 4b04 	str.w	r4, [r3], #4
   d550e:	4291      	cmp	r1, r2
   d5510:	d1f9      	bne.n	d5506 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5512:	780a      	ldrb	r2, [r1, #0]
   d5514:	701a      	strb	r2, [r3, #0]
}
   d5516:	bd10      	pop	{r4, pc}
   d5518:	000d6d94 	.word	0x000d6d94

000d551c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d551c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d551e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5522:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5526:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d552a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d552e:	2304      	movs	r3, #4
   d5530:	6041      	str	r1, [r0, #4]
   d5532:	7503      	strb	r3, [r0, #20]
   d5534:	bd10      	pop	{r4, pc}

000d5536 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d5536:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5538:	780d      	ldrb	r5, [r1, #0]
   d553a:	788b      	ldrb	r3, [r1, #2]
   d553c:	784a      	ldrb	r2, [r1, #1]
   d553e:	78c9      	ldrb	r1, [r1, #3]
   d5540:	9100      	str	r1, [sp, #0]
   d5542:	4629      	mov	r1, r5
   d5544:	f7ff ffea 	bl	d551c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5548:	b003      	add	sp, #12
   d554a:	bd30      	pop	{r4, r5, pc}

000d554c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d554c:	7441      	strb	r1, [r0, #17]
   d554e:	4770      	bx	lr

000d5550 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5550:	4770      	bx	lr

000d5552 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d5552:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5554:	2100      	movs	r1, #0
   d5556:	7c00      	ldrb	r0, [r0, #16]
   d5558:	f7ff f8e2 	bl	d4720 <HAL_USB_USART_Receive_Data>
}
   d555c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5560:	bf28      	it	cs
   d5562:	f04f 30ff 	movcs.w	r0, #4294967295
   d5566:	bd08      	pop	{r3, pc}

000d5568 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d5568:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d556a:	2101      	movs	r1, #1
   d556c:	7c00      	ldrb	r0, [r0, #16]
   d556e:	f7ff f8d7 	bl	d4720 <HAL_USB_USART_Receive_Data>
}
   d5572:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5576:	bf28      	it	cs
   d5578:	f04f 30ff 	movcs.w	r0, #4294967295
   d557c:	bd08      	pop	{r3, pc}

000d557e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d557e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5580:	7c00      	ldrb	r0, [r0, #16]
   d5582:	f7ff f8c5 	bl	d4710 <HAL_USB_USART_Available_Data_For_Write>
}
   d5586:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d558a:	bd08      	pop	{r3, pc}

000d558c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d558c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d558e:	7c00      	ldrb	r0, [r0, #16]
   d5590:	f7ff f8b6 	bl	d4700 <HAL_USB_USART_Available_Data>
}
   d5594:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5598:	bd08      	pop	{r3, pc}

000d559a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d559a:	7c00      	ldrb	r0, [r0, #16]
   d559c:	f7ff b8d0 	b.w	d4740 <HAL_USB_USART_Flush_Data>

000d55a0 <_ZN9USBSerialD0Ev>:
   d55a0:	b510      	push	{r4, lr}
   d55a2:	2114      	movs	r1, #20
   d55a4:	4604      	mov	r4, r0
   d55a6:	f000 fb1c 	bl	d5be2 <_ZdlPvj>
   d55aa:	4620      	mov	r0, r4
   d55ac:	bd10      	pop	{r4, pc}

000d55ae <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d55ae:	b538      	push	{r3, r4, r5, lr}
   d55b0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d55b2:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d55b4:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d55b6:	f7ff f8ab 	bl	d4710 <HAL_USB_USART_Available_Data_For_Write>
   d55ba:	2800      	cmp	r0, #0
   d55bc:	dc01      	bgt.n	d55c2 <_ZN9USBSerial5writeEh+0x14>
   d55be:	7c60      	ldrb	r0, [r4, #17]
   d55c0:	b128      	cbz	r0, d55ce <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d55c2:	4629      	mov	r1, r5
   d55c4:	7c20      	ldrb	r0, [r4, #16]
   d55c6:	f7ff f8b3 	bl	d4730 <HAL_USB_USART_Send_Data>
   d55ca:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d55ce:	bd38      	pop	{r3, r4, r5, pc}

000d55d0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d55d0:	b510      	push	{r4, lr}
   d55d2:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d55d4:	2300      	movs	r3, #0
   d55d6:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d55d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d55dc:	60a3      	str	r3, [r4, #8]
   d55de:	4b05      	ldr	r3, [pc, #20]	; (d55f4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d55e0:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d55e2:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d55e4:	4608      	mov	r0, r1
{
  _serial = serial;
   d55e6:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d55e8:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d55ea:	4611      	mov	r1, r2
   d55ec:	f7ff f880 	bl	d46f0 <HAL_USB_USART_Init>
}
   d55f0:	4620      	mov	r0, r4
   d55f2:	bd10      	pop	{r4, pc}
   d55f4:	000d6da8 	.word	0x000d6da8

000d55f8 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d55f8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d55fa:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d55fc:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d55fe:	2100      	movs	r1, #0
   d5600:	f001 fa77 	bl	d6af2 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5604:	4620      	mov	r0, r4
   d5606:	bd10      	pop	{r4, pc}

000d5608 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5608:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d560a:	4d0e      	ldr	r5, [pc, #56]	; (d5644 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d560c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d560e:	a801      	add	r0, sp, #4
   d5610:	f7ff fff2 	bl	d55f8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5614:	6829      	ldr	r1, [r5, #0]
   d5616:	f011 0401 	ands.w	r4, r1, #1
   d561a:	d110      	bne.n	d563e <_Z16_fetch_usbserialv+0x36>
   d561c:	4628      	mov	r0, r5
   d561e:	f7fe fd40 	bl	d40a2 <__cxa_guard_acquire>
   d5622:	b160      	cbz	r0, d563e <_Z16_fetch_usbserialv+0x36>
   d5624:	aa01      	add	r2, sp, #4
   d5626:	4621      	mov	r1, r4
   d5628:	4807      	ldr	r0, [pc, #28]	; (d5648 <_Z16_fetch_usbserialv+0x40>)
   d562a:	f7ff ffd1 	bl	d55d0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d562e:	4628      	mov	r0, r5
   d5630:	f7fe fd3c 	bl	d40ac <__cxa_guard_release>
   d5634:	4a05      	ldr	r2, [pc, #20]	; (d564c <_Z16_fetch_usbserialv+0x44>)
   d5636:	4906      	ldr	r1, [pc, #24]	; (d5650 <_Z16_fetch_usbserialv+0x48>)
   d5638:	4803      	ldr	r0, [pc, #12]	; (d5648 <_Z16_fetch_usbserialv+0x40>)
   d563a:	f000 facd 	bl	d5bd8 <__aeabi_atexit>
	return _usbserial;
}
   d563e:	4802      	ldr	r0, [pc, #8]	; (d5648 <_Z16_fetch_usbserialv+0x40>)
   d5640:	b007      	add	sp, #28
   d5642:	bd30      	pop	{r4, r5, pc}
   d5644:	2003e3f8 	.word	0x2003e3f8
   d5648:	2003e3fc 	.word	0x2003e3fc
   d564c:	2003e3a4 	.word	0x2003e3a4
   d5650:	000d5551 	.word	0x000d5551

000d5654 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5654:	4770      	bx	lr

000d5656 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5656:	7441      	strb	r1, [r0, #17]
   d5658:	4770      	bx	lr

000d565a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d565a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d565c:	7c00      	ldrb	r0, [r0, #16]
   d565e:	f7fe ffef 	bl	d4640 <HAL_USART_Available_Data_For_Write>
}
   d5662:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5666:	bd08      	pop	{r3, pc}

000d5668 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5668:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d566a:	7c00      	ldrb	r0, [r0, #16]
   d566c:	f7fe ffc8 	bl	d4600 <HAL_USART_Available_Data>
}
   d5670:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5674:	bd08      	pop	{r3, pc}

000d5676 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5676:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d5678:	7c00      	ldrb	r0, [r0, #16]
   d567a:	f7fe ffd1 	bl	d4620 <HAL_USART_Peek_Data>
}
   d567e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5682:	bf28      	it	cs
   d5684:	f04f 30ff 	movcs.w	r0, #4294967295
   d5688:	bd08      	pop	{r3, pc}

000d568a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d568a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d568c:	7c00      	ldrb	r0, [r0, #16]
   d568e:	f7fe ffbf 	bl	d4610 <HAL_USART_Read_Data>
}
   d5692:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5696:	bf28      	it	cs
   d5698:	f04f 30ff 	movcs.w	r0, #4294967295
   d569c:	bd08      	pop	{r3, pc}

000d569e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d569e:	7c00      	ldrb	r0, [r0, #16]
   d56a0:	f7fe bfc6 	b.w	d4630 <HAL_USART_Flush_Data>

000d56a4 <_ZN11USARTSerialD0Ev>:
   d56a4:	b510      	push	{r4, lr}
   d56a6:	2114      	movs	r1, #20
   d56a8:	4604      	mov	r4, r0
   d56aa:	f000 fa9a 	bl	d5be2 <_ZdlPvj>
   d56ae:	4620      	mov	r0, r4
   d56b0:	bd10      	pop	{r4, pc}

000d56b2 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d56b2:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d56b4:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d56b6:	4604      	mov	r4, r0
   d56b8:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d56ba:	b925      	cbnz	r5, d56c6 <_ZN11USARTSerial5writeEh+0x14>
   d56bc:	7c00      	ldrb	r0, [r0, #16]
   d56be:	f7fe ffbf 	bl	d4640 <HAL_USART_Available_Data_For_Write>
   d56c2:	2800      	cmp	r0, #0
   d56c4:	dd05      	ble.n	d56d2 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d56c6:	4631      	mov	r1, r6
   d56c8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d56ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d56ce:	f7fe bf8f 	b.w	d45f0 <HAL_USART_Write_Data>
  }
  return 0;
}
   d56d2:	4628      	mov	r0, r5
   d56d4:	bd70      	pop	{r4, r5, r6, pc}
	...

000d56d8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d56d8:	b510      	push	{r4, lr}
   d56da:	4604      	mov	r4, r0
   d56dc:	4608      	mov	r0, r1
   d56de:	4611      	mov	r1, r2
   d56e0:	2200      	movs	r2, #0
   d56e2:	6062      	str	r2, [r4, #4]
   d56e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d56e8:	60a2      	str	r2, [r4, #8]
   d56ea:	4a05      	ldr	r2, [pc, #20]	; (d5700 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d56ec:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d56ee:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d56f0:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d56f2:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d56f4:	461a      	mov	r2, r3
   d56f6:	f7fe ff73 	bl	d45e0 <HAL_USART_Init>
}
   d56fa:	4620      	mov	r0, r4
   d56fc:	bd10      	pop	{r4, pc}
   d56fe:	bf00      	nop
   d5700:	000d6dd8 	.word	0x000d6dd8

000d5704 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5704:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5706:	4d0c      	ldr	r5, [pc, #48]	; (d5738 <_Z22__fetch_global_Serial1v+0x34>)
   d5708:	6829      	ldr	r1, [r5, #0]
   d570a:	f011 0401 	ands.w	r4, r1, #1
   d570e:	d111      	bne.n	d5734 <_Z22__fetch_global_Serial1v+0x30>
   d5710:	4628      	mov	r0, r5
   d5712:	f7fe fcc6 	bl	d40a2 <__cxa_guard_acquire>
   d5716:	b168      	cbz	r0, d5734 <_Z22__fetch_global_Serial1v+0x30>
   d5718:	4a08      	ldr	r2, [pc, #32]	; (d573c <_Z22__fetch_global_Serial1v+0x38>)
   d571a:	4b09      	ldr	r3, [pc, #36]	; (d5740 <_Z22__fetch_global_Serial1v+0x3c>)
   d571c:	4809      	ldr	r0, [pc, #36]	; (d5744 <_Z22__fetch_global_Serial1v+0x40>)
   d571e:	4621      	mov	r1, r4
   d5720:	f7ff ffda 	bl	d56d8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5724:	4628      	mov	r0, r5
   d5726:	f7fe fcc1 	bl	d40ac <__cxa_guard_release>
   d572a:	4a07      	ldr	r2, [pc, #28]	; (d5748 <_Z22__fetch_global_Serial1v+0x44>)
   d572c:	4907      	ldr	r1, [pc, #28]	; (d574c <_Z22__fetch_global_Serial1v+0x48>)
   d572e:	4805      	ldr	r0, [pc, #20]	; (d5744 <_Z22__fetch_global_Serial1v+0x40>)
   d5730:	f000 fa52 	bl	d5bd8 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5734:	4803      	ldr	r0, [pc, #12]	; (d5744 <_Z22__fetch_global_Serial1v+0x40>)
   d5736:	bd38      	pop	{r3, r4, r5, pc}
   d5738:	2003e4a8 	.word	0x2003e4a8
   d573c:	2003e4ac 	.word	0x2003e4ac
   d5740:	2003e424 	.word	0x2003e424
   d5744:	2003e410 	.word	0x2003e410
   d5748:	2003e3a4 	.word	0x2003e3a4
   d574c:	000d5655 	.word	0x000d5655

000d5750 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d5750:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5752:	6883      	ldr	r3, [r0, #8]
   d5754:	4604      	mov	r4, r0
   d5756:	b90b      	cbnz	r3, d575c <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d5758:	f000 fa45 	bl	d5be6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d575c:	68c3      	ldr	r3, [r0, #12]
   d575e:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5760:	68a3      	ldr	r3, [r4, #8]
   d5762:	b11b      	cbz	r3, d576c <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5764:	2203      	movs	r2, #3
   d5766:	4621      	mov	r1, r4
   d5768:	4620      	mov	r0, r4
   d576a:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d576c:	4620      	mov	r0, r4
   d576e:	2110      	movs	r1, #16
}
   d5770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5774:	f000 ba35 	b.w	d5be2 <_ZdlPvj>

000d5778 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d5778:	4770      	bx	lr

000d577a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d577a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d577c:	4606      	mov	r6, r0
   d577e:	4615      	mov	r5, r2
   d5780:	460c      	mov	r4, r1
   d5782:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5784:	42bc      	cmp	r4, r7
   d5786:	d006      	beq.n	d5796 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5788:	6833      	ldr	r3, [r6, #0]
   d578a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d578e:	689b      	ldr	r3, [r3, #8]
   d5790:	4630      	mov	r0, r6
   d5792:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5794:	e7f6      	b.n	d5784 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d5796:	4628      	mov	r0, r5
   d5798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d579a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d579a:	2200      	movs	r2, #0
   d579c:	7c00      	ldrb	r0, [r0, #16]
   d579e:	f7fe bf77 	b.w	d4690 <HAL_I2C_Write_Data>

000d57a2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d57a2:	2100      	movs	r1, #0
   d57a4:	7c00      	ldrb	r0, [r0, #16]
   d57a6:	f7fe bf7b 	b.w	d46a0 <HAL_I2C_Available_Data>

000d57aa <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d57aa:	2100      	movs	r1, #0
   d57ac:	7c00      	ldrb	r0, [r0, #16]
   d57ae:	f7fe bf7f 	b.w	d46b0 <HAL_I2C_Read_Data>

000d57b2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d57b2:	2100      	movs	r1, #0
   d57b4:	7c00      	ldrb	r0, [r0, #16]
   d57b6:	f7fe bf83 	b.w	d46c0 <HAL_I2C_Peek_Data>

000d57ba <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d57ba:	2100      	movs	r1, #0
   d57bc:	7c00      	ldrb	r0, [r0, #16]
   d57be:	f7fe bf87 	b.w	d46d0 <HAL_I2C_Flush_Data>

000d57c2 <_ZN7TwoWireD0Ev>:
   d57c2:	b510      	push	{r4, lr}
   d57c4:	2114      	movs	r1, #20
   d57c6:	4604      	mov	r4, r0
   d57c8:	f000 fa0b 	bl	d5be2 <_ZdlPvj>
   d57cc:	4620      	mov	r0, r4
   d57ce:	bd10      	pop	{r4, pc}

000d57d0 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d57d0:	b510      	push	{r4, lr}
   d57d2:	4604      	mov	r4, r0
   d57d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d57d8:	4608      	mov	r0, r1
   d57da:	60a3      	str	r3, [r4, #8]
   d57dc:	2100      	movs	r1, #0
   d57de:	4b04      	ldr	r3, [pc, #16]	; (d57f0 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d57e0:	7420      	strb	r0, [r4, #16]
   d57e2:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d57e4:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d57e6:	f7fe ff7b 	bl	d46e0 <HAL_I2C_Init>

}
   d57ea:	4620      	mov	r0, r4
   d57ec:	bd10      	pop	{r4, pc}
   d57ee:	bf00      	nop
   d57f0:	000d6e08 	.word	0x000d6e08

000d57f4 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d57f4:	2300      	movs	r3, #0
   d57f6:	461a      	mov	r2, r3
   d57f8:	4619      	mov	r1, r3
   d57fa:	7c00      	ldrb	r0, [r0, #16]
   d57fc:	f7fe bf28 	b.w	d4650 <HAL_I2C_Begin>

000d5800 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
   d5800:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
   d5802:	2400      	movs	r4, #0
   d5804:	7c00      	ldrb	r0, [r0, #16]
   d5806:	9400      	str	r4, [sp, #0]
   d5808:	f7fe ff2a 	bl	d4660 <HAL_I2C_Request_Data>
  return result;
}
   d580c:	b2c0      	uxtb	r0, r0
   d580e:	b002      	add	sp, #8
   d5810:	bd10      	pop	{r4, pc}

000d5812 <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
   d5812:	2301      	movs	r3, #1
   d5814:	f7ff bff4 	b.w	d5800 <_ZN7TwoWire11requestFromEhhh>

000d5818 <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d5818:	2200      	movs	r2, #0
   d581a:	7c00      	ldrb	r0, [r0, #16]
   d581c:	f7fe bf28 	b.w	d4670 <HAL_I2C_Begin_Transmission>

000d5820 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d5820:	2200      	movs	r2, #0
   d5822:	7c00      	ldrb	r0, [r0, #16]
   d5824:	f7fe bf2c 	b.w	d4680 <HAL_I2C_End_Transmission>

000d5828 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d5828:	2101      	movs	r1, #1
   d582a:	f7ff bff9 	b.w	d5820 <_ZN7TwoWire15endTransmissionEh>

000d582e <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d582e:	2200      	movs	r2, #0
   d5830:	4611      	mov	r1, r2
   d5832:	6840      	ldr	r0, [r0, #4]
   d5834:	f7fe bff8 	b.w	d4828 <network_listening>

000d5838 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5838:	2200      	movs	r2, #0
   d583a:	4611      	mov	r1, r2
   d583c:	6840      	ldr	r0, [r0, #4]
   d583e:	f7ff b803 	b.w	d4848 <network_get_listen_timeout>

000d5842 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5842:	2200      	movs	r2, #0
   d5844:	6840      	ldr	r0, [r0, #4]
   d5846:	f7fe bff7 	b.w	d4838 <network_set_listen_timeout>

000d584a <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d584a:	2200      	movs	r2, #0
   d584c:	f081 0101 	eor.w	r1, r1, #1
   d5850:	6840      	ldr	r0, [r0, #4]
   d5852:	f7fe bfe1 	b.w	d4818 <network_listen>

000d5856 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d5856:	2300      	movs	r3, #0
   d5858:	461a      	mov	r2, r3
   d585a:	2101      	movs	r1, #1
   d585c:	6840      	ldr	r0, [r0, #4]
   d585e:	f7fe bfd3 	b.w	d4808 <network_off>

000d5862 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5862:	2300      	movs	r3, #0
   d5864:	461a      	mov	r2, r3
   d5866:	4619      	mov	r1, r3
   d5868:	6840      	ldr	r0, [r0, #4]
   d586a:	f7fe bfc5 	b.w	d47f8 <network_on>

000d586e <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d586e:	2200      	movs	r2, #0
   d5870:	4611      	mov	r1, r2
   d5872:	6840      	ldr	r0, [r0, #4]
   d5874:	f7fe bfb8 	b.w	d47e8 <network_ready>

000d5878 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5878:	2200      	movs	r2, #0
   d587a:	4611      	mov	r1, r2
   d587c:	6840      	ldr	r0, [r0, #4]
   d587e:	f7fe bfa3 	b.w	d47c8 <network_connecting>

000d5882 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5882:	2200      	movs	r2, #0
   d5884:	2102      	movs	r1, #2
   d5886:	6840      	ldr	r0, [r0, #4]
   d5888:	f7fe bfa6 	b.w	d47d8 <network_disconnect>

000d588c <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d588c:	2300      	movs	r3, #0
   d588e:	461a      	mov	r2, r3
   d5890:	6840      	ldr	r0, [r0, #4]
   d5892:	f7fe bf91 	b.w	d47b8 <network_connect>

000d5896 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5896:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5898:	4605      	mov	r5, r0
   d589a:	b188      	cbz	r0, d58c0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d589c:	6804      	ldr	r4, [r0, #0]
   d589e:	b14c      	cbz	r4, d58b4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d58a0:	68a3      	ldr	r3, [r4, #8]
   d58a2:	b11b      	cbz	r3, d58ac <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d58a4:	2203      	movs	r2, #3
   d58a6:	4621      	mov	r1, r4
   d58a8:	4620      	mov	r0, r4
   d58aa:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d58ac:	2110      	movs	r1, #16
   d58ae:	4620      	mov	r0, r4
   d58b0:	f000 f997 	bl	d5be2 <_ZdlPvj>
   d58b4:	4628      	mov	r0, r5
   d58b6:	2114      	movs	r1, #20
      }
   d58b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d58bc:	f000 b991 	b.w	d5be2 <_ZdlPvj>
   d58c0:	bd38      	pop	{r3, r4, r5, pc}

000d58c2 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d58c2:	b110      	cbz	r0, d58ca <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d58c4:	6803      	ldr	r3, [r0, #0]
   d58c6:	685b      	ldr	r3, [r3, #4]
   d58c8:	4718      	bx	r3
   d58ca:	4770      	bx	lr

000d58cc <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d58cc:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d58ce:	6803      	ldr	r3, [r0, #0]
   d58d0:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d58d2:	b1bb      	cbz	r3, d5904 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d58d4:	6858      	ldr	r0, [r3, #4]
   d58d6:	f7fe fe53 	bl	d4580 <os_thread_is_current>
   d58da:	b978      	cbnz	r0, d58fc <_ZN6ThreadD1Ev+0x30>
   d58dc:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d58de:	7c5a      	ldrb	r2, [r3, #17]
   d58e0:	b912      	cbnz	r2, d58e8 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d58e2:	6858      	ldr	r0, [r3, #4]
   d58e4:	f7fe fe54 	bl	d4590 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d58e8:	6823      	ldr	r3, [r4, #0]
   d58ea:	6858      	ldr	r0, [r3, #4]
   d58ec:	f7fe fe58 	bl	d45a0 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d58f0:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d58f2:	2300      	movs	r3, #0
   d58f4:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d58f6:	b128      	cbz	r0, d5904 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d58f8:	f7ff ffcd 	bl	d5896 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d58fc:	6820      	ldr	r0, [r4, #0]
   d58fe:	b108      	cbz	r0, d5904 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d5900:	f7ff ffc9 	bl	d5896 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d5904:	4620      	mov	r0, r4
   d5906:	bd10      	pop	{r4, pc}

000d5908 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5908:	b538      	push	{r3, r4, r5, lr}
   d590a:	4b0c      	ldr	r3, [pc, #48]	; (d593c <_ZN5spark9MeshClassD1Ev+0x34>)
   d590c:	6003      	str	r3, [r0, #0]
   d590e:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5910:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d5914:	b108      	cbz	r0, d591a <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5916:	f7fe fbc2 	bl	d409e <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d591a:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d591e:	b135      	cbz	r5, d592e <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5920:	4628      	mov	r0, r5
   d5922:	f7ff ffd3 	bl	d58cc <_ZN6ThreadD1Ev>
   d5926:	2104      	movs	r1, #4
   d5928:	4628      	mov	r0, r5
   d592a:	f000 f95a 	bl	d5be2 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d592e:	68a0      	ldr	r0, [r4, #8]
   d5930:	b108      	cbz	r0, d5936 <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d5932:	f7ff ffc6 	bl	d58c2 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d5936:	4620      	mov	r0, r4
   d5938:	bd38      	pop	{r3, r4, r5, pc}
   d593a:	bf00      	nop
   d593c:	000d6e30 	.word	0x000d6e30

000d5940 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5940:	b538      	push	{r3, r4, r5, lr}
   d5942:	4c0e      	ldr	r4, [pc, #56]	; (d597c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d5944:	4b0e      	ldr	r3, [pc, #56]	; (d5980 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d5946:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5948:	2500      	movs	r5, #0
   d594a:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d594c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5950:	6063      	str	r3, [r4, #4]
   d5952:	60a5      	str	r5, [r4, #8]
   d5954:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5958:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d595c:	f7fe fe30 	bl	d45c0 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5960:	4b08      	ldr	r3, [pc, #32]	; (d5984 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d5962:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5966:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d596a:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d596c:	4620      	mov	r0, r4
   d596e:	4a06      	ldr	r2, [pc, #24]	; (d5988 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d5970:	4906      	ldr	r1, [pc, #24]	; (d598c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d5972:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d5976:	f000 b92f 	b.w	d5bd8 <__aeabi_atexit>
   d597a:	bf00      	nop
   d597c:	2003e530 	.word	0x2003e530
   d5980:	000d6e98 	.word	0x000d6e98
   d5984:	000d6e30 	.word	0x000d6e30
   d5988:	2003e3a4 	.word	0x2003e3a4
   d598c:	000d5909 	.word	0x000d5909

000d5990 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5990:	2200      	movs	r2, #0
   d5992:	4611      	mov	r1, r2
   d5994:	6840      	ldr	r0, [r0, #4]
   d5996:	f7fe bf27 	b.w	d47e8 <network_ready>

000d599a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d599a:	2200      	movs	r2, #0
   d599c:	4611      	mov	r1, r2
   d599e:	6840      	ldr	r0, [r0, #4]
   d59a0:	f7fe bf42 	b.w	d4828 <network_listening>

000d59a4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d59a4:	2200      	movs	r2, #0
   d59a6:	4611      	mov	r1, r2
   d59a8:	6840      	ldr	r0, [r0, #4]
   d59aa:	f7fe bf4d 	b.w	d4848 <network_get_listen_timeout>

000d59ae <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d59ae:	2200      	movs	r2, #0
   d59b0:	6840      	ldr	r0, [r0, #4]
   d59b2:	f7fe bf41 	b.w	d4838 <network_set_listen_timeout>

000d59b6 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d59b6:	2200      	movs	r2, #0
   d59b8:	f081 0101 	eor.w	r1, r1, #1
   d59bc:	6840      	ldr	r0, [r0, #4]
   d59be:	f7fe bf2b 	b.w	d4818 <network_listen>

000d59c2 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d59c2:	2300      	movs	r3, #0
   d59c4:	461a      	mov	r2, r3
   d59c6:	4619      	mov	r1, r3
   d59c8:	6840      	ldr	r0, [r0, #4]
   d59ca:	f7fe bf1d 	b.w	d4808 <network_off>

000d59ce <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d59ce:	2300      	movs	r3, #0
   d59d0:	461a      	mov	r2, r3
   d59d2:	4619      	mov	r1, r3
   d59d4:	6840      	ldr	r0, [r0, #4]
   d59d6:	f7fe bf0f 	b.w	d47f8 <network_on>

000d59da <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d59da:	2200      	movs	r2, #0
   d59dc:	4611      	mov	r1, r2
   d59de:	6840      	ldr	r0, [r0, #4]
   d59e0:	f7fe bef2 	b.w	d47c8 <network_connecting>

000d59e4 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d59e4:	2200      	movs	r2, #0
   d59e6:	2102      	movs	r1, #2
   d59e8:	6840      	ldr	r0, [r0, #4]
   d59ea:	f7fe bef5 	b.w	d47d8 <network_disconnect>

000d59ee <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d59ee:	2300      	movs	r3, #0
   d59f0:	461a      	mov	r2, r3
   d59f2:	6840      	ldr	r0, [r0, #4]
   d59f4:	f7fe bee0 	b.w	d47b8 <network_connect>

000d59f8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d59f8:	4b02      	ldr	r3, [pc, #8]	; (d5a04 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d59fa:	2204      	movs	r2, #4
   d59fc:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d59fe:	4a02      	ldr	r2, [pc, #8]	; (d5a08 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5a00:	601a      	str	r2, [r3, #0]
   d5a02:	4770      	bx	lr
   d5a04:	2003e704 	.word	0x2003e704
   d5a08:	000d6e64 	.word	0x000d6e64

000d5a0c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5a0c:	2300      	movs	r3, #0
   d5a0e:	461a      	mov	r2, r3
   d5a10:	6840      	ldr	r0, [r0, #4]
   d5a12:	f7fe bed1 	b.w	d47b8 <network_connect>

000d5a16 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5a16:	2200      	movs	r2, #0
   d5a18:	2102      	movs	r1, #2
   d5a1a:	6840      	ldr	r0, [r0, #4]
   d5a1c:	f7fe bedc 	b.w	d47d8 <network_disconnect>

000d5a20 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5a20:	2200      	movs	r2, #0
   d5a22:	4611      	mov	r1, r2
   d5a24:	6840      	ldr	r0, [r0, #4]
   d5a26:	f7fe becf 	b.w	d47c8 <network_connecting>

000d5a2a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5a2a:	2200      	movs	r2, #0
   d5a2c:	4611      	mov	r1, r2
   d5a2e:	6840      	ldr	r0, [r0, #4]
   d5a30:	f7fe beda 	b.w	d47e8 <network_ready>

000d5a34 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5a34:	2300      	movs	r3, #0
   d5a36:	461a      	mov	r2, r3
   d5a38:	4619      	mov	r1, r3
   d5a3a:	6840      	ldr	r0, [r0, #4]
   d5a3c:	f7fe bedc 	b.w	d47f8 <network_on>

000d5a40 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5a40:	2300      	movs	r3, #0
   d5a42:	461a      	mov	r2, r3
   d5a44:	4619      	mov	r1, r3
   d5a46:	6840      	ldr	r0, [r0, #4]
   d5a48:	f7fe bede 	b.w	d4808 <network_off>

000d5a4c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5a4c:	2200      	movs	r2, #0
   d5a4e:	f081 0101 	eor.w	r1, r1, #1
   d5a52:	6840      	ldr	r0, [r0, #4]
   d5a54:	f7fe bee0 	b.w	d4818 <network_listen>

000d5a58 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5a58:	2200      	movs	r2, #0
   d5a5a:	6840      	ldr	r0, [r0, #4]
   d5a5c:	f7fe beec 	b.w	d4838 <network_set_listen_timeout>

000d5a60 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5a60:	2200      	movs	r2, #0
   d5a62:	4611      	mov	r1, r2
   d5a64:	6840      	ldr	r0, [r0, #4]
   d5a66:	f7fe beef 	b.w	d4848 <network_get_listen_timeout>

000d5a6a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5a6a:	2200      	movs	r2, #0
   d5a6c:	4611      	mov	r1, r2
   d5a6e:	6840      	ldr	r0, [r0, #4]
   d5a70:	f7fe beda 	b.w	d4828 <network_listening>

000d5a74 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5a74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5a78:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d5a7a:	b095      	sub	sp, #84	; 0x54
   d5a7c:	4616      	mov	r6, r2
   d5a7e:	460d      	mov	r5, r1
   d5a80:	4607      	mov	r7, r0
    IPAddress addr;
   d5a82:	f7ff fd2b 	bl	d54dc <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d5a86:	4621      	mov	r1, r4
   d5a88:	2220      	movs	r2, #32
   d5a8a:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5a8c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5a8e:	f001 f830 	bl	d6af2 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5a92:	2340      	movs	r3, #64	; 0x40
   d5a94:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5a96:	4621      	mov	r1, r4
   d5a98:	466b      	mov	r3, sp
   d5a9a:	aa0c      	add	r2, sp, #48	; 0x30
   d5a9c:	4630      	mov	r0, r6
   d5a9e:	f7fe fd47 	bl	d4530 <netdb_getaddrinfo>
    if (!r) {
   d5aa2:	4604      	mov	r4, r0
   d5aa4:	2800      	cmp	r0, #0
   d5aa6:	d144      	bne.n	d5b32 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5aa8:	4602      	mov	r2, r0
   d5aaa:	2101      	movs	r1, #1
   d5aac:	6868      	ldr	r0, [r5, #4]
   d5aae:	f7fe fe9b 	bl	d47e8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5ab2:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5ab4:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5ab6:	4622      	mov	r2, r4
   d5ab8:	6868      	ldr	r0, [r5, #4]
   d5aba:	f7fe fe95 	bl	d47e8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5abe:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5ac0:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d5ac2:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5ac4:	2e00      	cmp	r6, #0
   d5ac6:	d034      	beq.n	d5b32 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d5ac8:	2900      	cmp	r1, #0
   d5aca:	d132      	bne.n	d5b32 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5acc:	6873      	ldr	r3, [r6, #4]
   d5ace:	2b02      	cmp	r3, #2
   d5ad0:	d002      	beq.n	d5ad8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d5ad2:	2b0a      	cmp	r3, #10
   d5ad4:	d009      	beq.n	d5aea <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d5ad6:	e02a      	b.n	d5b2e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d5ad8:	f1b8 0f00 	cmp.w	r8, #0
   d5adc:	d027      	beq.n	d5b2e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5ade:	6971      	ldr	r1, [r6, #20]
   d5ae0:	4638      	mov	r0, r7
   d5ae2:	3104      	adds	r1, #4
   d5ae4:	f7ff fd27 	bl	d5536 <_ZN9IPAddressaSEPKh>
   d5ae8:	e020      	b.n	d5b2c <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5aea:	f1b9 0f00 	cmp.w	r9, #0
   d5aee:	d01e      	beq.n	d5b2e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5af0:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5af2:	2211      	movs	r2, #17
   d5af4:	a801      	add	r0, sp, #4
   d5af6:	f000 fffc 	bl	d6af2 <memset>
                    a.v = 6;
   d5afa:	2306      	movs	r3, #6
   d5afc:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5b00:	ad01      	add	r5, sp, #4
   d5b02:	f104 0308 	add.w	r3, r4, #8
   d5b06:	3418      	adds	r4, #24
   d5b08:	6818      	ldr	r0, [r3, #0]
   d5b0a:	6859      	ldr	r1, [r3, #4]
   d5b0c:	462a      	mov	r2, r5
   d5b0e:	c203      	stmia	r2!, {r0, r1}
   d5b10:	3308      	adds	r3, #8
   d5b12:	42a3      	cmp	r3, r4
   d5b14:	4615      	mov	r5, r2
   d5b16:	d1f7      	bne.n	d5b08 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5b18:	a901      	add	r1, sp, #4
   d5b1a:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5b1c:	ad07      	add	r5, sp, #28
   d5b1e:	f7ff fceb 	bl	d54f8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5b22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5b24:	1d3c      	adds	r4, r7, #4
   d5b26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5b28:	682b      	ldr	r3, [r5, #0]
   d5b2a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d5b2c:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5b2e:	69f6      	ldr	r6, [r6, #28]
   d5b30:	e7c8      	b.n	d5ac4 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5b32:	9800      	ldr	r0, [sp, #0]
   d5b34:	f7fe fcf4 	bl	d4520 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5b38:	4638      	mov	r0, r7
   d5b3a:	b015      	add	sp, #84	; 0x54
   d5b3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5b40 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5b40:	4b02      	ldr	r3, [pc, #8]	; (d5b4c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5b42:	4a03      	ldr	r2, [pc, #12]	; (d5b50 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5b44:	601a      	str	r2, [r3, #0]
   d5b46:	2200      	movs	r2, #0
   d5b48:	605a      	str	r2, [r3, #4]
   d5b4a:	4770      	bx	lr
   d5b4c:	2003e70c 	.word	0x2003e70c
   d5b50:	000d6e98 	.word	0x000d6e98

000d5b54 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5b54:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d5b56:	4c0c      	ldr	r4, [pc, #48]	; (d5b88 <_GLOBAL__sub_I_SPI+0x34>)
   d5b58:	4e0c      	ldr	r6, [pc, #48]	; (d5b8c <_GLOBAL__sub_I_SPI+0x38>)
   d5b5a:	4d0d      	ldr	r5, [pc, #52]	; (d5b90 <_GLOBAL__sub_I_SPI+0x3c>)
   d5b5c:	2100      	movs	r1, #0
   d5b5e:	4620      	mov	r0, r4
   d5b60:	f7fe ff00 	bl	d4964 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5b64:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5b66:	4c0b      	ldr	r4, [pc, #44]	; (d5b94 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d5b68:	4632      	mov	r2, r6
   d5b6a:	4629      	mov	r1, r5
   d5b6c:	f000 f834 	bl	d5bd8 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5b70:	2101      	movs	r1, #1
   d5b72:	4620      	mov	r0, r4
   d5b74:	f7fe fef6 	bl	d4964 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5b78:	4632      	mov	r2, r6
   d5b7a:	4629      	mov	r1, r5
   d5b7c:	4620      	mov	r0, r4
   d5b7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d5b82:	f000 b829 	b.w	d5bd8 <__aeabi_atexit>
   d5b86:	bf00      	nop
   d5b88:	2003e714 	.word	0x2003e714
   d5b8c:	2003e3a4 	.word	0x2003e3a4
   d5b90:	000d4955 	.word	0x000d4955
   d5b94:	2003e724 	.word	0x2003e724

000d5b98 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d5b98:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d5b9a:	4d0b      	ldr	r5, [pc, #44]	; (d5bc8 <_Z19__fetch_global_Wirev+0x30>)
   d5b9c:	6829      	ldr	r1, [r5, #0]
   d5b9e:	f011 0401 	ands.w	r4, r1, #1
   d5ba2:	d10f      	bne.n	d5bc4 <_Z19__fetch_global_Wirev+0x2c>
   d5ba4:	4628      	mov	r0, r5
   d5ba6:	f7fe fa7c 	bl	d40a2 <__cxa_guard_acquire>
   d5baa:	b158      	cbz	r0, d5bc4 <_Z19__fetch_global_Wirev+0x2c>
   d5bac:	4621      	mov	r1, r4
   d5bae:	4807      	ldr	r0, [pc, #28]	; (d5bcc <_Z19__fetch_global_Wirev+0x34>)
   d5bb0:	f7ff fe0e 	bl	d57d0 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d5bb4:	4628      	mov	r0, r5
   d5bb6:	f7fe fa79 	bl	d40ac <__cxa_guard_release>
   d5bba:	4a05      	ldr	r2, [pc, #20]	; (d5bd0 <_Z19__fetch_global_Wirev+0x38>)
   d5bbc:	4905      	ldr	r1, [pc, #20]	; (d5bd4 <_Z19__fetch_global_Wirev+0x3c>)
   d5bbe:	4803      	ldr	r0, [pc, #12]	; (d5bcc <_Z19__fetch_global_Wirev+0x34>)
   d5bc0:	f000 f80a 	bl	d5bd8 <__aeabi_atexit>
	return wire;
}
   d5bc4:	4801      	ldr	r0, [pc, #4]	; (d5bcc <_Z19__fetch_global_Wirev+0x34>)
   d5bc6:	bd38      	pop	{r3, r4, r5, pc}
   d5bc8:	2003e738 	.word	0x2003e738
   d5bcc:	2003e73c 	.word	0x2003e73c
   d5bd0:	2003e3a4 	.word	0x2003e3a4
   d5bd4:	000d5779 	.word	0x000d5779

000d5bd8 <__aeabi_atexit>:
   d5bd8:	460b      	mov	r3, r1
   d5bda:	4601      	mov	r1, r0
   d5bdc:	4618      	mov	r0, r3
   d5bde:	f000 bf6f 	b.w	d6ac0 <__cxa_atexit>

000d5be2 <_ZdlPvj>:
   d5be2:	f7fe ba5a 	b.w	d409a <_ZdlPv>

000d5be6 <_ZSt25__throw_bad_function_callv>:
   d5be6:	b508      	push	{r3, lr}
   d5be8:	f7fe fe66 	bl	d48b8 <abort>

000d5bec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5bec:	4b18      	ldr	r3, [pc, #96]	; (d5c50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5bee:	681a      	ldr	r2, [r3, #0]
   d5bf0:	07d1      	lsls	r1, r2, #31
   d5bf2:	bf5c      	itt	pl
   d5bf4:	2201      	movpl	r2, #1
   d5bf6:	601a      	strpl	r2, [r3, #0]
   d5bf8:	4b16      	ldr	r3, [pc, #88]	; (d5c54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5bfa:	681a      	ldr	r2, [r3, #0]
   d5bfc:	07d2      	lsls	r2, r2, #31
   d5bfe:	bf5c      	itt	pl
   d5c00:	2201      	movpl	r2, #1
   d5c02:	601a      	strpl	r2, [r3, #0]
   d5c04:	4b14      	ldr	r3, [pc, #80]	; (d5c58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5c06:	681a      	ldr	r2, [r3, #0]
   d5c08:	07d0      	lsls	r0, r2, #31
   d5c0a:	bf5c      	itt	pl
   d5c0c:	2201      	movpl	r2, #1
   d5c0e:	601a      	strpl	r2, [r3, #0]
   d5c10:	4b12      	ldr	r3, [pc, #72]	; (d5c5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5c12:	681a      	ldr	r2, [r3, #0]
   d5c14:	07d1      	lsls	r1, r2, #31
   d5c16:	bf5c      	itt	pl
   d5c18:	2201      	movpl	r2, #1
   d5c1a:	601a      	strpl	r2, [r3, #0]
   d5c1c:	4b10      	ldr	r3, [pc, #64]	; (d5c60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5c1e:	681a      	ldr	r2, [r3, #0]
   d5c20:	07d2      	lsls	r2, r2, #31
   d5c22:	bf5c      	itt	pl
   d5c24:	2201      	movpl	r2, #1
   d5c26:	601a      	strpl	r2, [r3, #0]
   d5c28:	4b0e      	ldr	r3, [pc, #56]	; (d5c64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5c2a:	681a      	ldr	r2, [r3, #0]
   d5c2c:	07d0      	lsls	r0, r2, #31
   d5c2e:	bf5c      	itt	pl
   d5c30:	2201      	movpl	r2, #1
   d5c32:	601a      	strpl	r2, [r3, #0]
   d5c34:	4b0c      	ldr	r3, [pc, #48]	; (d5c68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5c36:	681a      	ldr	r2, [r3, #0]
   d5c38:	07d1      	lsls	r1, r2, #31
   d5c3a:	bf5c      	itt	pl
   d5c3c:	2201      	movpl	r2, #1
   d5c3e:	601a      	strpl	r2, [r3, #0]
   d5c40:	4b0a      	ldr	r3, [pc, #40]	; (d5c6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5c42:	681a      	ldr	r2, [r3, #0]
   d5c44:	07d2      	lsls	r2, r2, #31
   d5c46:	bf5c      	itt	pl
   d5c48:	2201      	movpl	r2, #1
   d5c4a:	601a      	strpl	r2, [r3, #0]
   d5c4c:	4770      	bx	lr
   d5c4e:	bf00      	nop
   d5c50:	2003e76c 	.word	0x2003e76c
   d5c54:	2003e768 	.word	0x2003e768
   d5c58:	2003e764 	.word	0x2003e764
   d5c5c:	2003e760 	.word	0x2003e760
   d5c60:	2003e75c 	.word	0x2003e75c
   d5c64:	2003e758 	.word	0x2003e758
   d5c68:	2003e754 	.word	0x2003e754
   d5c6c:	2003e750 	.word	0x2003e750

000d5c70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5c70:	4b24      	ldr	r3, [pc, #144]	; (d5d04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d5c72:	681a      	ldr	r2, [r3, #0]
   d5c74:	07d0      	lsls	r0, r2, #31
   d5c76:	bf5c      	itt	pl
   d5c78:	2201      	movpl	r2, #1
   d5c7a:	601a      	strpl	r2, [r3, #0]
   d5c7c:	4b22      	ldr	r3, [pc, #136]	; (d5d08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d5c7e:	681a      	ldr	r2, [r3, #0]
   d5c80:	07d1      	lsls	r1, r2, #31
   d5c82:	bf5c      	itt	pl
   d5c84:	2201      	movpl	r2, #1
   d5c86:	601a      	strpl	r2, [r3, #0]
   d5c88:	4b20      	ldr	r3, [pc, #128]	; (d5d0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d5c8a:	681a      	ldr	r2, [r3, #0]
   d5c8c:	07d2      	lsls	r2, r2, #31
   d5c8e:	bf5c      	itt	pl
   d5c90:	2201      	movpl	r2, #1
   d5c92:	601a      	strpl	r2, [r3, #0]
   d5c94:	4b1e      	ldr	r3, [pc, #120]	; (d5d10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d5c96:	681a      	ldr	r2, [r3, #0]
   d5c98:	07d0      	lsls	r0, r2, #31
   d5c9a:	bf5c      	itt	pl
   d5c9c:	2201      	movpl	r2, #1
   d5c9e:	601a      	strpl	r2, [r3, #0]
   d5ca0:	4b1c      	ldr	r3, [pc, #112]	; (d5d14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d5ca2:	681a      	ldr	r2, [r3, #0]
   d5ca4:	07d1      	lsls	r1, r2, #31
   d5ca6:	bf5c      	itt	pl
   d5ca8:	2201      	movpl	r2, #1
   d5caa:	601a      	strpl	r2, [r3, #0]
   d5cac:	4b1a      	ldr	r3, [pc, #104]	; (d5d18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d5cae:	681a      	ldr	r2, [r3, #0]
   d5cb0:	07d2      	lsls	r2, r2, #31
   d5cb2:	bf5c      	itt	pl
   d5cb4:	2201      	movpl	r2, #1
   d5cb6:	601a      	strpl	r2, [r3, #0]
   d5cb8:	4b18      	ldr	r3, [pc, #96]	; (d5d1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d5cba:	681a      	ldr	r2, [r3, #0]
   d5cbc:	07d0      	lsls	r0, r2, #31
   d5cbe:	bf5c      	itt	pl
   d5cc0:	2201      	movpl	r2, #1
   d5cc2:	601a      	strpl	r2, [r3, #0]
   d5cc4:	4b16      	ldr	r3, [pc, #88]	; (d5d20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d5cc6:	681a      	ldr	r2, [r3, #0]
   d5cc8:	07d1      	lsls	r1, r2, #31
   d5cca:	bf5c      	itt	pl
   d5ccc:	2201      	movpl	r2, #1
   d5cce:	601a      	strpl	r2, [r3, #0]
   d5cd0:	4b14      	ldr	r3, [pc, #80]	; (d5d24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d5cd2:	681a      	ldr	r2, [r3, #0]
   d5cd4:	07d2      	lsls	r2, r2, #31
   d5cd6:	bf5c      	itt	pl
   d5cd8:	2201      	movpl	r2, #1
   d5cda:	601a      	strpl	r2, [r3, #0]
   d5cdc:	4b12      	ldr	r3, [pc, #72]	; (d5d28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d5cde:	681a      	ldr	r2, [r3, #0]
   d5ce0:	07d0      	lsls	r0, r2, #31
   d5ce2:	bf5c      	itt	pl
   d5ce4:	2201      	movpl	r2, #1
   d5ce6:	601a      	strpl	r2, [r3, #0]
   d5ce8:	4b10      	ldr	r3, [pc, #64]	; (d5d2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d5cea:	681a      	ldr	r2, [r3, #0]
   d5cec:	07d1      	lsls	r1, r2, #31
   d5cee:	bf5c      	itt	pl
   d5cf0:	2201      	movpl	r2, #1
   d5cf2:	601a      	strpl	r2, [r3, #0]
   d5cf4:	4b0e      	ldr	r3, [pc, #56]	; (d5d30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d5cf6:	681a      	ldr	r2, [r3, #0]
   d5cf8:	07d2      	lsls	r2, r2, #31
   d5cfa:	bf5c      	itt	pl
   d5cfc:	2201      	movpl	r2, #1
   d5cfe:	601a      	strpl	r2, [r3, #0]
   d5d00:	4770      	bx	lr
   d5d02:	bf00      	nop
   d5d04:	2003e79c 	.word	0x2003e79c
   d5d08:	2003e798 	.word	0x2003e798
   d5d0c:	2003e794 	.word	0x2003e794
   d5d10:	2003e790 	.word	0x2003e790
   d5d14:	2003e78c 	.word	0x2003e78c
   d5d18:	2003e788 	.word	0x2003e788
   d5d1c:	2003e784 	.word	0x2003e784
   d5d20:	2003e780 	.word	0x2003e780
   d5d24:	2003e77c 	.word	0x2003e77c
   d5d28:	2003e778 	.word	0x2003e778
   d5d2c:	2003e774 	.word	0x2003e774
   d5d30:	2003e770 	.word	0x2003e770

000d5d34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d5d34:	4b24      	ldr	r3, [pc, #144]	; (d5dc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d5d36:	681a      	ldr	r2, [r3, #0]
   d5d38:	07d0      	lsls	r0, r2, #31
   d5d3a:	bf5c      	itt	pl
   d5d3c:	2201      	movpl	r2, #1
   d5d3e:	601a      	strpl	r2, [r3, #0]
   d5d40:	4b22      	ldr	r3, [pc, #136]	; (d5dcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d5d42:	681a      	ldr	r2, [r3, #0]
   d5d44:	07d1      	lsls	r1, r2, #31
   d5d46:	bf5c      	itt	pl
   d5d48:	2201      	movpl	r2, #1
   d5d4a:	601a      	strpl	r2, [r3, #0]
   d5d4c:	4b20      	ldr	r3, [pc, #128]	; (d5dd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d5d4e:	681a      	ldr	r2, [r3, #0]
   d5d50:	07d2      	lsls	r2, r2, #31
   d5d52:	bf5c      	itt	pl
   d5d54:	2201      	movpl	r2, #1
   d5d56:	601a      	strpl	r2, [r3, #0]
   d5d58:	4b1e      	ldr	r3, [pc, #120]	; (d5dd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d5d5a:	681a      	ldr	r2, [r3, #0]
   d5d5c:	07d0      	lsls	r0, r2, #31
   d5d5e:	bf5c      	itt	pl
   d5d60:	2201      	movpl	r2, #1
   d5d62:	601a      	strpl	r2, [r3, #0]
   d5d64:	4b1c      	ldr	r3, [pc, #112]	; (d5dd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d5d66:	681a      	ldr	r2, [r3, #0]
   d5d68:	07d1      	lsls	r1, r2, #31
   d5d6a:	bf5c      	itt	pl
   d5d6c:	2201      	movpl	r2, #1
   d5d6e:	601a      	strpl	r2, [r3, #0]
   d5d70:	4b1a      	ldr	r3, [pc, #104]	; (d5ddc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d5d72:	681a      	ldr	r2, [r3, #0]
   d5d74:	07d2      	lsls	r2, r2, #31
   d5d76:	bf5c      	itt	pl
   d5d78:	2201      	movpl	r2, #1
   d5d7a:	601a      	strpl	r2, [r3, #0]
   d5d7c:	4b18      	ldr	r3, [pc, #96]	; (d5de0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d5d7e:	681a      	ldr	r2, [r3, #0]
   d5d80:	07d0      	lsls	r0, r2, #31
   d5d82:	bf5c      	itt	pl
   d5d84:	2201      	movpl	r2, #1
   d5d86:	601a      	strpl	r2, [r3, #0]
   d5d88:	4b16      	ldr	r3, [pc, #88]	; (d5de4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d5d8a:	681a      	ldr	r2, [r3, #0]
   d5d8c:	07d1      	lsls	r1, r2, #31
   d5d8e:	bf5c      	itt	pl
   d5d90:	2201      	movpl	r2, #1
   d5d92:	601a      	strpl	r2, [r3, #0]
   d5d94:	4b14      	ldr	r3, [pc, #80]	; (d5de8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d5d96:	681a      	ldr	r2, [r3, #0]
   d5d98:	07d2      	lsls	r2, r2, #31
   d5d9a:	bf5c      	itt	pl
   d5d9c:	2201      	movpl	r2, #1
   d5d9e:	601a      	strpl	r2, [r3, #0]
   d5da0:	4b12      	ldr	r3, [pc, #72]	; (d5dec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d5da2:	681a      	ldr	r2, [r3, #0]
   d5da4:	07d0      	lsls	r0, r2, #31
   d5da6:	bf5c      	itt	pl
   d5da8:	2201      	movpl	r2, #1
   d5daa:	601a      	strpl	r2, [r3, #0]
   d5dac:	4b10      	ldr	r3, [pc, #64]	; (d5df0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d5dae:	681a      	ldr	r2, [r3, #0]
   d5db0:	07d1      	lsls	r1, r2, #31
   d5db2:	bf5c      	itt	pl
   d5db4:	2201      	movpl	r2, #1
   d5db6:	601a      	strpl	r2, [r3, #0]
   d5db8:	4b0e      	ldr	r3, [pc, #56]	; (d5df4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d5dba:	681a      	ldr	r2, [r3, #0]
   d5dbc:	07d2      	lsls	r2, r2, #31
   d5dbe:	bf5c      	itt	pl
   d5dc0:	2201      	movpl	r2, #1
   d5dc2:	601a      	strpl	r2, [r3, #0]
   d5dc4:	4770      	bx	lr
   d5dc6:	bf00      	nop
   d5dc8:	2003e7cc 	.word	0x2003e7cc
   d5dcc:	2003e7c8 	.word	0x2003e7c8
   d5dd0:	2003e7c4 	.word	0x2003e7c4
   d5dd4:	2003e7c0 	.word	0x2003e7c0
   d5dd8:	2003e7bc 	.word	0x2003e7bc
   d5ddc:	2003e7b8 	.word	0x2003e7b8
   d5de0:	2003e7b4 	.word	0x2003e7b4
   d5de4:	2003e7b0 	.word	0x2003e7b0
   d5de8:	2003e7ac 	.word	0x2003e7ac
   d5dec:	2003e7a8 	.word	0x2003e7a8
   d5df0:	2003e7a4 	.word	0x2003e7a4
   d5df4:	2003e7a0 	.word	0x2003e7a0

000d5df8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5df8:	4b18      	ldr	r3, [pc, #96]	; (d5e5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5dfa:	681a      	ldr	r2, [r3, #0]
   d5dfc:	07d1      	lsls	r1, r2, #31
   d5dfe:	bf5c      	itt	pl
   d5e00:	2201      	movpl	r2, #1
   d5e02:	601a      	strpl	r2, [r3, #0]
   d5e04:	4b16      	ldr	r3, [pc, #88]	; (d5e60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5e06:	681a      	ldr	r2, [r3, #0]
   d5e08:	07d2      	lsls	r2, r2, #31
   d5e0a:	bf5c      	itt	pl
   d5e0c:	2201      	movpl	r2, #1
   d5e0e:	601a      	strpl	r2, [r3, #0]
   d5e10:	4b14      	ldr	r3, [pc, #80]	; (d5e64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5e12:	681a      	ldr	r2, [r3, #0]
   d5e14:	07d0      	lsls	r0, r2, #31
   d5e16:	bf5c      	itt	pl
   d5e18:	2201      	movpl	r2, #1
   d5e1a:	601a      	strpl	r2, [r3, #0]
   d5e1c:	4b12      	ldr	r3, [pc, #72]	; (d5e68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5e1e:	681a      	ldr	r2, [r3, #0]
   d5e20:	07d1      	lsls	r1, r2, #31
   d5e22:	bf5c      	itt	pl
   d5e24:	2201      	movpl	r2, #1
   d5e26:	601a      	strpl	r2, [r3, #0]
   d5e28:	4b10      	ldr	r3, [pc, #64]	; (d5e6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5e2a:	681a      	ldr	r2, [r3, #0]
   d5e2c:	07d2      	lsls	r2, r2, #31
   d5e2e:	bf5c      	itt	pl
   d5e30:	2201      	movpl	r2, #1
   d5e32:	601a      	strpl	r2, [r3, #0]
   d5e34:	4b0e      	ldr	r3, [pc, #56]	; (d5e70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5e36:	681a      	ldr	r2, [r3, #0]
   d5e38:	07d0      	lsls	r0, r2, #31
   d5e3a:	bf5c      	itt	pl
   d5e3c:	2201      	movpl	r2, #1
   d5e3e:	601a      	strpl	r2, [r3, #0]
   d5e40:	4b0c      	ldr	r3, [pc, #48]	; (d5e74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5e42:	681a      	ldr	r2, [r3, #0]
   d5e44:	07d1      	lsls	r1, r2, #31
   d5e46:	bf5c      	itt	pl
   d5e48:	2201      	movpl	r2, #1
   d5e4a:	601a      	strpl	r2, [r3, #0]
   d5e4c:	4b0a      	ldr	r3, [pc, #40]	; (d5e78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5e4e:	681a      	ldr	r2, [r3, #0]
   d5e50:	07d2      	lsls	r2, r2, #31
   d5e52:	bf5c      	itt	pl
   d5e54:	2201      	movpl	r2, #1
   d5e56:	601a      	strpl	r2, [r3, #0]
   d5e58:	4770      	bx	lr
   d5e5a:	bf00      	nop
   d5e5c:	2003e7ec 	.word	0x2003e7ec
   d5e60:	2003e7e8 	.word	0x2003e7e8
   d5e64:	2003e7e4 	.word	0x2003e7e4
   d5e68:	2003e7e0 	.word	0x2003e7e0
   d5e6c:	2003e7dc 	.word	0x2003e7dc
   d5e70:	2003e7d8 	.word	0x2003e7d8
   d5e74:	2003e7d4 	.word	0x2003e7d4
   d5e78:	2003e7d0 	.word	0x2003e7d0

000d5e7c <__aeabi_drsub>:
   d5e7c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d5e80:	e002      	b.n	d5e88 <__adddf3>
   d5e82:	bf00      	nop

000d5e84 <__aeabi_dsub>:
   d5e84:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d5e88 <__adddf3>:
   d5e88:	b530      	push	{r4, r5, lr}
   d5e8a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d5e8e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d5e92:	ea94 0f05 	teq	r4, r5
   d5e96:	bf08      	it	eq
   d5e98:	ea90 0f02 	teqeq	r0, r2
   d5e9c:	bf1f      	itttt	ne
   d5e9e:	ea54 0c00 	orrsne.w	ip, r4, r0
   d5ea2:	ea55 0c02 	orrsne.w	ip, r5, r2
   d5ea6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d5eaa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5eae:	f000 80e2 	beq.w	d6076 <__adddf3+0x1ee>
   d5eb2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d5eb6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d5eba:	bfb8      	it	lt
   d5ebc:	426d      	neglt	r5, r5
   d5ebe:	dd0c      	ble.n	d5eda <__adddf3+0x52>
   d5ec0:	442c      	add	r4, r5
   d5ec2:	ea80 0202 	eor.w	r2, r0, r2
   d5ec6:	ea81 0303 	eor.w	r3, r1, r3
   d5eca:	ea82 0000 	eor.w	r0, r2, r0
   d5ece:	ea83 0101 	eor.w	r1, r3, r1
   d5ed2:	ea80 0202 	eor.w	r2, r0, r2
   d5ed6:	ea81 0303 	eor.w	r3, r1, r3
   d5eda:	2d36      	cmp	r5, #54	; 0x36
   d5edc:	bf88      	it	hi
   d5ede:	bd30      	pophi	{r4, r5, pc}
   d5ee0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d5ee4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5ee8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d5eec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d5ef0:	d002      	beq.n	d5ef8 <__adddf3+0x70>
   d5ef2:	4240      	negs	r0, r0
   d5ef4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5ef8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d5efc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5f00:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d5f04:	d002      	beq.n	d5f0c <__adddf3+0x84>
   d5f06:	4252      	negs	r2, r2
   d5f08:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d5f0c:	ea94 0f05 	teq	r4, r5
   d5f10:	f000 80a7 	beq.w	d6062 <__adddf3+0x1da>
   d5f14:	f1a4 0401 	sub.w	r4, r4, #1
   d5f18:	f1d5 0e20 	rsbs	lr, r5, #32
   d5f1c:	db0d      	blt.n	d5f3a <__adddf3+0xb2>
   d5f1e:	fa02 fc0e 	lsl.w	ip, r2, lr
   d5f22:	fa22 f205 	lsr.w	r2, r2, r5
   d5f26:	1880      	adds	r0, r0, r2
   d5f28:	f141 0100 	adc.w	r1, r1, #0
   d5f2c:	fa03 f20e 	lsl.w	r2, r3, lr
   d5f30:	1880      	adds	r0, r0, r2
   d5f32:	fa43 f305 	asr.w	r3, r3, r5
   d5f36:	4159      	adcs	r1, r3
   d5f38:	e00e      	b.n	d5f58 <__adddf3+0xd0>
   d5f3a:	f1a5 0520 	sub.w	r5, r5, #32
   d5f3e:	f10e 0e20 	add.w	lr, lr, #32
   d5f42:	2a01      	cmp	r2, #1
   d5f44:	fa03 fc0e 	lsl.w	ip, r3, lr
   d5f48:	bf28      	it	cs
   d5f4a:	f04c 0c02 	orrcs.w	ip, ip, #2
   d5f4e:	fa43 f305 	asr.w	r3, r3, r5
   d5f52:	18c0      	adds	r0, r0, r3
   d5f54:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d5f58:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5f5c:	d507      	bpl.n	d5f6e <__adddf3+0xe6>
   d5f5e:	f04f 0e00 	mov.w	lr, #0
   d5f62:	f1dc 0c00 	rsbs	ip, ip, #0
   d5f66:	eb7e 0000 	sbcs.w	r0, lr, r0
   d5f6a:	eb6e 0101 	sbc.w	r1, lr, r1
   d5f6e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d5f72:	d31b      	bcc.n	d5fac <__adddf3+0x124>
   d5f74:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d5f78:	d30c      	bcc.n	d5f94 <__adddf3+0x10c>
   d5f7a:	0849      	lsrs	r1, r1, #1
   d5f7c:	ea5f 0030 	movs.w	r0, r0, rrx
   d5f80:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d5f84:	f104 0401 	add.w	r4, r4, #1
   d5f88:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d5f8c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d5f90:	f080 809a 	bcs.w	d60c8 <__adddf3+0x240>
   d5f94:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d5f98:	bf08      	it	eq
   d5f9a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d5f9e:	f150 0000 	adcs.w	r0, r0, #0
   d5fa2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5fa6:	ea41 0105 	orr.w	r1, r1, r5
   d5faa:	bd30      	pop	{r4, r5, pc}
   d5fac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d5fb0:	4140      	adcs	r0, r0
   d5fb2:	eb41 0101 	adc.w	r1, r1, r1
   d5fb6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5fba:	f1a4 0401 	sub.w	r4, r4, #1
   d5fbe:	d1e9      	bne.n	d5f94 <__adddf3+0x10c>
   d5fc0:	f091 0f00 	teq	r1, #0
   d5fc4:	bf04      	itt	eq
   d5fc6:	4601      	moveq	r1, r0
   d5fc8:	2000      	moveq	r0, #0
   d5fca:	fab1 f381 	clz	r3, r1
   d5fce:	bf08      	it	eq
   d5fd0:	3320      	addeq	r3, #32
   d5fd2:	f1a3 030b 	sub.w	r3, r3, #11
   d5fd6:	f1b3 0220 	subs.w	r2, r3, #32
   d5fda:	da0c      	bge.n	d5ff6 <__adddf3+0x16e>
   d5fdc:	320c      	adds	r2, #12
   d5fde:	dd08      	ble.n	d5ff2 <__adddf3+0x16a>
   d5fe0:	f102 0c14 	add.w	ip, r2, #20
   d5fe4:	f1c2 020c 	rsb	r2, r2, #12
   d5fe8:	fa01 f00c 	lsl.w	r0, r1, ip
   d5fec:	fa21 f102 	lsr.w	r1, r1, r2
   d5ff0:	e00c      	b.n	d600c <__adddf3+0x184>
   d5ff2:	f102 0214 	add.w	r2, r2, #20
   d5ff6:	bfd8      	it	le
   d5ff8:	f1c2 0c20 	rsble	ip, r2, #32
   d5ffc:	fa01 f102 	lsl.w	r1, r1, r2
   d6000:	fa20 fc0c 	lsr.w	ip, r0, ip
   d6004:	bfdc      	itt	le
   d6006:	ea41 010c 	orrle.w	r1, r1, ip
   d600a:	4090      	lslle	r0, r2
   d600c:	1ae4      	subs	r4, r4, r3
   d600e:	bfa2      	ittt	ge
   d6010:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d6014:	4329      	orrge	r1, r5
   d6016:	bd30      	popge	{r4, r5, pc}
   d6018:	ea6f 0404 	mvn.w	r4, r4
   d601c:	3c1f      	subs	r4, #31
   d601e:	da1c      	bge.n	d605a <__adddf3+0x1d2>
   d6020:	340c      	adds	r4, #12
   d6022:	dc0e      	bgt.n	d6042 <__adddf3+0x1ba>
   d6024:	f104 0414 	add.w	r4, r4, #20
   d6028:	f1c4 0220 	rsb	r2, r4, #32
   d602c:	fa20 f004 	lsr.w	r0, r0, r4
   d6030:	fa01 f302 	lsl.w	r3, r1, r2
   d6034:	ea40 0003 	orr.w	r0, r0, r3
   d6038:	fa21 f304 	lsr.w	r3, r1, r4
   d603c:	ea45 0103 	orr.w	r1, r5, r3
   d6040:	bd30      	pop	{r4, r5, pc}
   d6042:	f1c4 040c 	rsb	r4, r4, #12
   d6046:	f1c4 0220 	rsb	r2, r4, #32
   d604a:	fa20 f002 	lsr.w	r0, r0, r2
   d604e:	fa01 f304 	lsl.w	r3, r1, r4
   d6052:	ea40 0003 	orr.w	r0, r0, r3
   d6056:	4629      	mov	r1, r5
   d6058:	bd30      	pop	{r4, r5, pc}
   d605a:	fa21 f004 	lsr.w	r0, r1, r4
   d605e:	4629      	mov	r1, r5
   d6060:	bd30      	pop	{r4, r5, pc}
   d6062:	f094 0f00 	teq	r4, #0
   d6066:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d606a:	bf06      	itte	eq
   d606c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d6070:	3401      	addeq	r4, #1
   d6072:	3d01      	subne	r5, #1
   d6074:	e74e      	b.n	d5f14 <__adddf3+0x8c>
   d6076:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d607a:	bf18      	it	ne
   d607c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6080:	d029      	beq.n	d60d6 <__adddf3+0x24e>
   d6082:	ea94 0f05 	teq	r4, r5
   d6086:	bf08      	it	eq
   d6088:	ea90 0f02 	teqeq	r0, r2
   d608c:	d005      	beq.n	d609a <__adddf3+0x212>
   d608e:	ea54 0c00 	orrs.w	ip, r4, r0
   d6092:	bf04      	itt	eq
   d6094:	4619      	moveq	r1, r3
   d6096:	4610      	moveq	r0, r2
   d6098:	bd30      	pop	{r4, r5, pc}
   d609a:	ea91 0f03 	teq	r1, r3
   d609e:	bf1e      	ittt	ne
   d60a0:	2100      	movne	r1, #0
   d60a2:	2000      	movne	r0, #0
   d60a4:	bd30      	popne	{r4, r5, pc}
   d60a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d60aa:	d105      	bne.n	d60b8 <__adddf3+0x230>
   d60ac:	0040      	lsls	r0, r0, #1
   d60ae:	4149      	adcs	r1, r1
   d60b0:	bf28      	it	cs
   d60b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d60b6:	bd30      	pop	{r4, r5, pc}
   d60b8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d60bc:	bf3c      	itt	cc
   d60be:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d60c2:	bd30      	popcc	{r4, r5, pc}
   d60c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d60c8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d60cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d60d0:	f04f 0000 	mov.w	r0, #0
   d60d4:	bd30      	pop	{r4, r5, pc}
   d60d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d60da:	bf1a      	itte	ne
   d60dc:	4619      	movne	r1, r3
   d60de:	4610      	movne	r0, r2
   d60e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d60e4:	bf1c      	itt	ne
   d60e6:	460b      	movne	r3, r1
   d60e8:	4602      	movne	r2, r0
   d60ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d60ee:	bf06      	itte	eq
   d60f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d60f4:	ea91 0f03 	teqeq	r1, r3
   d60f8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d60fc:	bd30      	pop	{r4, r5, pc}
   d60fe:	bf00      	nop

000d6100 <__aeabi_ui2d>:
   d6100:	f090 0f00 	teq	r0, #0
   d6104:	bf04      	itt	eq
   d6106:	2100      	moveq	r1, #0
   d6108:	4770      	bxeq	lr
   d610a:	b530      	push	{r4, r5, lr}
   d610c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6110:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6114:	f04f 0500 	mov.w	r5, #0
   d6118:	f04f 0100 	mov.w	r1, #0
   d611c:	e750      	b.n	d5fc0 <__adddf3+0x138>
   d611e:	bf00      	nop

000d6120 <__aeabi_i2d>:
   d6120:	f090 0f00 	teq	r0, #0
   d6124:	bf04      	itt	eq
   d6126:	2100      	moveq	r1, #0
   d6128:	4770      	bxeq	lr
   d612a:	b530      	push	{r4, r5, lr}
   d612c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6130:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6134:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d6138:	bf48      	it	mi
   d613a:	4240      	negmi	r0, r0
   d613c:	f04f 0100 	mov.w	r1, #0
   d6140:	e73e      	b.n	d5fc0 <__adddf3+0x138>
   d6142:	bf00      	nop

000d6144 <__aeabi_f2d>:
   d6144:	0042      	lsls	r2, r0, #1
   d6146:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d614a:	ea4f 0131 	mov.w	r1, r1, rrx
   d614e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d6152:	bf1f      	itttt	ne
   d6154:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d6158:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d615c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d6160:	4770      	bxne	lr
   d6162:	f092 0f00 	teq	r2, #0
   d6166:	bf14      	ite	ne
   d6168:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d616c:	4770      	bxeq	lr
   d616e:	b530      	push	{r4, r5, lr}
   d6170:	f44f 7460 	mov.w	r4, #896	; 0x380
   d6174:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6178:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d617c:	e720      	b.n	d5fc0 <__adddf3+0x138>
   d617e:	bf00      	nop

000d6180 <__aeabi_ul2d>:
   d6180:	ea50 0201 	orrs.w	r2, r0, r1
   d6184:	bf08      	it	eq
   d6186:	4770      	bxeq	lr
   d6188:	b530      	push	{r4, r5, lr}
   d618a:	f04f 0500 	mov.w	r5, #0
   d618e:	e00a      	b.n	d61a6 <__aeabi_l2d+0x16>

000d6190 <__aeabi_l2d>:
   d6190:	ea50 0201 	orrs.w	r2, r0, r1
   d6194:	bf08      	it	eq
   d6196:	4770      	bxeq	lr
   d6198:	b530      	push	{r4, r5, lr}
   d619a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d619e:	d502      	bpl.n	d61a6 <__aeabi_l2d+0x16>
   d61a0:	4240      	negs	r0, r0
   d61a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d61a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d61aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d61ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d61b2:	f43f aedc 	beq.w	d5f6e <__adddf3+0xe6>
   d61b6:	f04f 0203 	mov.w	r2, #3
   d61ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d61be:	bf18      	it	ne
   d61c0:	3203      	addne	r2, #3
   d61c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d61c6:	bf18      	it	ne
   d61c8:	3203      	addne	r2, #3
   d61ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d61ce:	f1c2 0320 	rsb	r3, r2, #32
   d61d2:	fa00 fc03 	lsl.w	ip, r0, r3
   d61d6:	fa20 f002 	lsr.w	r0, r0, r2
   d61da:	fa01 fe03 	lsl.w	lr, r1, r3
   d61de:	ea40 000e 	orr.w	r0, r0, lr
   d61e2:	fa21 f102 	lsr.w	r1, r1, r2
   d61e6:	4414      	add	r4, r2
   d61e8:	e6c1      	b.n	d5f6e <__adddf3+0xe6>
   d61ea:	bf00      	nop

000d61ec <__aeabi_dmul>:
   d61ec:	b570      	push	{r4, r5, r6, lr}
   d61ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d61f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d61f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d61fa:	bf1d      	ittte	ne
   d61fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6200:	ea94 0f0c 	teqne	r4, ip
   d6204:	ea95 0f0c 	teqne	r5, ip
   d6208:	f000 f8de 	bleq	d63c8 <__aeabi_dmul+0x1dc>
   d620c:	442c      	add	r4, r5
   d620e:	ea81 0603 	eor.w	r6, r1, r3
   d6212:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d6216:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d621a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d621e:	bf18      	it	ne
   d6220:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d6224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6228:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d622c:	d038      	beq.n	d62a0 <__aeabi_dmul+0xb4>
   d622e:	fba0 ce02 	umull	ip, lr, r0, r2
   d6232:	f04f 0500 	mov.w	r5, #0
   d6236:	fbe1 e502 	umlal	lr, r5, r1, r2
   d623a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d623e:	fbe0 e503 	umlal	lr, r5, r0, r3
   d6242:	f04f 0600 	mov.w	r6, #0
   d6246:	fbe1 5603 	umlal	r5, r6, r1, r3
   d624a:	f09c 0f00 	teq	ip, #0
   d624e:	bf18      	it	ne
   d6250:	f04e 0e01 	orrne.w	lr, lr, #1
   d6254:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d6258:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d625c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d6260:	d204      	bcs.n	d626c <__aeabi_dmul+0x80>
   d6262:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d6266:	416d      	adcs	r5, r5
   d6268:	eb46 0606 	adc.w	r6, r6, r6
   d626c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d6270:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d6274:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d6278:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d627c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d6280:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6284:	bf88      	it	hi
   d6286:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d628a:	d81e      	bhi.n	d62ca <__aeabi_dmul+0xde>
   d628c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d6290:	bf08      	it	eq
   d6292:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d6296:	f150 0000 	adcs.w	r0, r0, #0
   d629a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d629e:	bd70      	pop	{r4, r5, r6, pc}
   d62a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d62a4:	ea46 0101 	orr.w	r1, r6, r1
   d62a8:	ea40 0002 	orr.w	r0, r0, r2
   d62ac:	ea81 0103 	eor.w	r1, r1, r3
   d62b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d62b4:	bfc2      	ittt	gt
   d62b6:	ebd4 050c 	rsbsgt	r5, r4, ip
   d62ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d62be:	bd70      	popgt	{r4, r5, r6, pc}
   d62c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d62c4:	f04f 0e00 	mov.w	lr, #0
   d62c8:	3c01      	subs	r4, #1
   d62ca:	f300 80ab 	bgt.w	d6424 <__aeabi_dmul+0x238>
   d62ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d62d2:	bfde      	ittt	le
   d62d4:	2000      	movle	r0, #0
   d62d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d62da:	bd70      	pople	{r4, r5, r6, pc}
   d62dc:	f1c4 0400 	rsb	r4, r4, #0
   d62e0:	3c20      	subs	r4, #32
   d62e2:	da35      	bge.n	d6350 <__aeabi_dmul+0x164>
   d62e4:	340c      	adds	r4, #12
   d62e6:	dc1b      	bgt.n	d6320 <__aeabi_dmul+0x134>
   d62e8:	f104 0414 	add.w	r4, r4, #20
   d62ec:	f1c4 0520 	rsb	r5, r4, #32
   d62f0:	fa00 f305 	lsl.w	r3, r0, r5
   d62f4:	fa20 f004 	lsr.w	r0, r0, r4
   d62f8:	fa01 f205 	lsl.w	r2, r1, r5
   d62fc:	ea40 0002 	orr.w	r0, r0, r2
   d6300:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d6304:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6308:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d630c:	fa21 f604 	lsr.w	r6, r1, r4
   d6310:	eb42 0106 	adc.w	r1, r2, r6
   d6314:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6318:	bf08      	it	eq
   d631a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d631e:	bd70      	pop	{r4, r5, r6, pc}
   d6320:	f1c4 040c 	rsb	r4, r4, #12
   d6324:	f1c4 0520 	rsb	r5, r4, #32
   d6328:	fa00 f304 	lsl.w	r3, r0, r4
   d632c:	fa20 f005 	lsr.w	r0, r0, r5
   d6330:	fa01 f204 	lsl.w	r2, r1, r4
   d6334:	ea40 0002 	orr.w	r0, r0, r2
   d6338:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d633c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6340:	f141 0100 	adc.w	r1, r1, #0
   d6344:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6348:	bf08      	it	eq
   d634a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d634e:	bd70      	pop	{r4, r5, r6, pc}
   d6350:	f1c4 0520 	rsb	r5, r4, #32
   d6354:	fa00 f205 	lsl.w	r2, r0, r5
   d6358:	ea4e 0e02 	orr.w	lr, lr, r2
   d635c:	fa20 f304 	lsr.w	r3, r0, r4
   d6360:	fa01 f205 	lsl.w	r2, r1, r5
   d6364:	ea43 0302 	orr.w	r3, r3, r2
   d6368:	fa21 f004 	lsr.w	r0, r1, r4
   d636c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6370:	fa21 f204 	lsr.w	r2, r1, r4
   d6374:	ea20 0002 	bic.w	r0, r0, r2
   d6378:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d637c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6380:	bf08      	it	eq
   d6382:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6386:	bd70      	pop	{r4, r5, r6, pc}
   d6388:	f094 0f00 	teq	r4, #0
   d638c:	d10f      	bne.n	d63ae <__aeabi_dmul+0x1c2>
   d638e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d6392:	0040      	lsls	r0, r0, #1
   d6394:	eb41 0101 	adc.w	r1, r1, r1
   d6398:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d639c:	bf08      	it	eq
   d639e:	3c01      	subeq	r4, #1
   d63a0:	d0f7      	beq.n	d6392 <__aeabi_dmul+0x1a6>
   d63a2:	ea41 0106 	orr.w	r1, r1, r6
   d63a6:	f095 0f00 	teq	r5, #0
   d63aa:	bf18      	it	ne
   d63ac:	4770      	bxne	lr
   d63ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d63b2:	0052      	lsls	r2, r2, #1
   d63b4:	eb43 0303 	adc.w	r3, r3, r3
   d63b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d63bc:	bf08      	it	eq
   d63be:	3d01      	subeq	r5, #1
   d63c0:	d0f7      	beq.n	d63b2 <__aeabi_dmul+0x1c6>
   d63c2:	ea43 0306 	orr.w	r3, r3, r6
   d63c6:	4770      	bx	lr
   d63c8:	ea94 0f0c 	teq	r4, ip
   d63cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d63d0:	bf18      	it	ne
   d63d2:	ea95 0f0c 	teqne	r5, ip
   d63d6:	d00c      	beq.n	d63f2 <__aeabi_dmul+0x206>
   d63d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d63dc:	bf18      	it	ne
   d63de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d63e2:	d1d1      	bne.n	d6388 <__aeabi_dmul+0x19c>
   d63e4:	ea81 0103 	eor.w	r1, r1, r3
   d63e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d63ec:	f04f 0000 	mov.w	r0, #0
   d63f0:	bd70      	pop	{r4, r5, r6, pc}
   d63f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d63f6:	bf06      	itte	eq
   d63f8:	4610      	moveq	r0, r2
   d63fa:	4619      	moveq	r1, r3
   d63fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6400:	d019      	beq.n	d6436 <__aeabi_dmul+0x24a>
   d6402:	ea94 0f0c 	teq	r4, ip
   d6406:	d102      	bne.n	d640e <__aeabi_dmul+0x222>
   d6408:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d640c:	d113      	bne.n	d6436 <__aeabi_dmul+0x24a>
   d640e:	ea95 0f0c 	teq	r5, ip
   d6412:	d105      	bne.n	d6420 <__aeabi_dmul+0x234>
   d6414:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d6418:	bf1c      	itt	ne
   d641a:	4610      	movne	r0, r2
   d641c:	4619      	movne	r1, r3
   d641e:	d10a      	bne.n	d6436 <__aeabi_dmul+0x24a>
   d6420:	ea81 0103 	eor.w	r1, r1, r3
   d6424:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6428:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d642c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6430:	f04f 0000 	mov.w	r0, #0
   d6434:	bd70      	pop	{r4, r5, r6, pc}
   d6436:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d643a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d643e:	bd70      	pop	{r4, r5, r6, pc}

000d6440 <__aeabi_ddiv>:
   d6440:	b570      	push	{r4, r5, r6, lr}
   d6442:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6446:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d644a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d644e:	bf1d      	ittte	ne
   d6450:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6454:	ea94 0f0c 	teqne	r4, ip
   d6458:	ea95 0f0c 	teqne	r5, ip
   d645c:	f000 f8a7 	bleq	d65ae <__aeabi_ddiv+0x16e>
   d6460:	eba4 0405 	sub.w	r4, r4, r5
   d6464:	ea81 0e03 	eor.w	lr, r1, r3
   d6468:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d646c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6470:	f000 8088 	beq.w	d6584 <__aeabi_ddiv+0x144>
   d6474:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6478:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d647c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d6480:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d6484:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d6488:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d648c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d6490:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d6494:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d6498:	429d      	cmp	r5, r3
   d649a:	bf08      	it	eq
   d649c:	4296      	cmpeq	r6, r2
   d649e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d64a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d64a6:	d202      	bcs.n	d64ae <__aeabi_ddiv+0x6e>
   d64a8:	085b      	lsrs	r3, r3, #1
   d64aa:	ea4f 0232 	mov.w	r2, r2, rrx
   d64ae:	1ab6      	subs	r6, r6, r2
   d64b0:	eb65 0503 	sbc.w	r5, r5, r3
   d64b4:	085b      	lsrs	r3, r3, #1
   d64b6:	ea4f 0232 	mov.w	r2, r2, rrx
   d64ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d64be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d64c2:	ebb6 0e02 	subs.w	lr, r6, r2
   d64c6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d64ca:	bf22      	ittt	cs
   d64cc:	1ab6      	subcs	r6, r6, r2
   d64ce:	4675      	movcs	r5, lr
   d64d0:	ea40 000c 	orrcs.w	r0, r0, ip
   d64d4:	085b      	lsrs	r3, r3, #1
   d64d6:	ea4f 0232 	mov.w	r2, r2, rrx
   d64da:	ebb6 0e02 	subs.w	lr, r6, r2
   d64de:	eb75 0e03 	sbcs.w	lr, r5, r3
   d64e2:	bf22      	ittt	cs
   d64e4:	1ab6      	subcs	r6, r6, r2
   d64e6:	4675      	movcs	r5, lr
   d64e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d64ec:	085b      	lsrs	r3, r3, #1
   d64ee:	ea4f 0232 	mov.w	r2, r2, rrx
   d64f2:	ebb6 0e02 	subs.w	lr, r6, r2
   d64f6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d64fa:	bf22      	ittt	cs
   d64fc:	1ab6      	subcs	r6, r6, r2
   d64fe:	4675      	movcs	r5, lr
   d6500:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d6504:	085b      	lsrs	r3, r3, #1
   d6506:	ea4f 0232 	mov.w	r2, r2, rrx
   d650a:	ebb6 0e02 	subs.w	lr, r6, r2
   d650e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6512:	bf22      	ittt	cs
   d6514:	1ab6      	subcs	r6, r6, r2
   d6516:	4675      	movcs	r5, lr
   d6518:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d651c:	ea55 0e06 	orrs.w	lr, r5, r6
   d6520:	d018      	beq.n	d6554 <__aeabi_ddiv+0x114>
   d6522:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d6526:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d652a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d652e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d6532:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d6536:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d653a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d653e:	d1c0      	bne.n	d64c2 <__aeabi_ddiv+0x82>
   d6540:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6544:	d10b      	bne.n	d655e <__aeabi_ddiv+0x11e>
   d6546:	ea41 0100 	orr.w	r1, r1, r0
   d654a:	f04f 0000 	mov.w	r0, #0
   d654e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d6552:	e7b6      	b.n	d64c2 <__aeabi_ddiv+0x82>
   d6554:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6558:	bf04      	itt	eq
   d655a:	4301      	orreq	r1, r0
   d655c:	2000      	moveq	r0, #0
   d655e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6562:	bf88      	it	hi
   d6564:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6568:	f63f aeaf 	bhi.w	d62ca <__aeabi_dmul+0xde>
   d656c:	ebb5 0c03 	subs.w	ip, r5, r3
   d6570:	bf04      	itt	eq
   d6572:	ebb6 0c02 	subseq.w	ip, r6, r2
   d6576:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d657a:	f150 0000 	adcs.w	r0, r0, #0
   d657e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6582:	bd70      	pop	{r4, r5, r6, pc}
   d6584:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d6588:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d658c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d6590:	bfc2      	ittt	gt
   d6592:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d659a:	bd70      	popgt	{r4, r5, r6, pc}
   d659c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d65a0:	f04f 0e00 	mov.w	lr, #0
   d65a4:	3c01      	subs	r4, #1
   d65a6:	e690      	b.n	d62ca <__aeabi_dmul+0xde>
   d65a8:	ea45 0e06 	orr.w	lr, r5, r6
   d65ac:	e68d      	b.n	d62ca <__aeabi_dmul+0xde>
   d65ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d65b2:	ea94 0f0c 	teq	r4, ip
   d65b6:	bf08      	it	eq
   d65b8:	ea95 0f0c 	teqeq	r5, ip
   d65bc:	f43f af3b 	beq.w	d6436 <__aeabi_dmul+0x24a>
   d65c0:	ea94 0f0c 	teq	r4, ip
   d65c4:	d10a      	bne.n	d65dc <__aeabi_ddiv+0x19c>
   d65c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d65ca:	f47f af34 	bne.w	d6436 <__aeabi_dmul+0x24a>
   d65ce:	ea95 0f0c 	teq	r5, ip
   d65d2:	f47f af25 	bne.w	d6420 <__aeabi_dmul+0x234>
   d65d6:	4610      	mov	r0, r2
   d65d8:	4619      	mov	r1, r3
   d65da:	e72c      	b.n	d6436 <__aeabi_dmul+0x24a>
   d65dc:	ea95 0f0c 	teq	r5, ip
   d65e0:	d106      	bne.n	d65f0 <__aeabi_ddiv+0x1b0>
   d65e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d65e6:	f43f aefd 	beq.w	d63e4 <__aeabi_dmul+0x1f8>
   d65ea:	4610      	mov	r0, r2
   d65ec:	4619      	mov	r1, r3
   d65ee:	e722      	b.n	d6436 <__aeabi_dmul+0x24a>
   d65f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d65f4:	bf18      	it	ne
   d65f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d65fa:	f47f aec5 	bne.w	d6388 <__aeabi_dmul+0x19c>
   d65fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d6602:	f47f af0d 	bne.w	d6420 <__aeabi_dmul+0x234>
   d6606:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d660a:	f47f aeeb 	bne.w	d63e4 <__aeabi_dmul+0x1f8>
   d660e:	e712      	b.n	d6436 <__aeabi_dmul+0x24a>

000d6610 <__gedf2>:
   d6610:	f04f 3cff 	mov.w	ip, #4294967295
   d6614:	e006      	b.n	d6624 <__cmpdf2+0x4>
   d6616:	bf00      	nop

000d6618 <__ledf2>:
   d6618:	f04f 0c01 	mov.w	ip, #1
   d661c:	e002      	b.n	d6624 <__cmpdf2+0x4>
   d661e:	bf00      	nop

000d6620 <__cmpdf2>:
   d6620:	f04f 0c01 	mov.w	ip, #1
   d6624:	f84d cd04 	str.w	ip, [sp, #-4]!
   d6628:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d662c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6630:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6634:	bf18      	it	ne
   d6636:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d663a:	d01b      	beq.n	d6674 <__cmpdf2+0x54>
   d663c:	b001      	add	sp, #4
   d663e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d6642:	bf0c      	ite	eq
   d6644:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d6648:	ea91 0f03 	teqne	r1, r3
   d664c:	bf02      	ittt	eq
   d664e:	ea90 0f02 	teqeq	r0, r2
   d6652:	2000      	moveq	r0, #0
   d6654:	4770      	bxeq	lr
   d6656:	f110 0f00 	cmn.w	r0, #0
   d665a:	ea91 0f03 	teq	r1, r3
   d665e:	bf58      	it	pl
   d6660:	4299      	cmppl	r1, r3
   d6662:	bf08      	it	eq
   d6664:	4290      	cmpeq	r0, r2
   d6666:	bf2c      	ite	cs
   d6668:	17d8      	asrcs	r0, r3, #31
   d666a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d666e:	f040 0001 	orr.w	r0, r0, #1
   d6672:	4770      	bx	lr
   d6674:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6678:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d667c:	d102      	bne.n	d6684 <__cmpdf2+0x64>
   d667e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d6682:	d107      	bne.n	d6694 <__cmpdf2+0x74>
   d6684:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6688:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d668c:	d1d6      	bne.n	d663c <__cmpdf2+0x1c>
   d668e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d6692:	d0d3      	beq.n	d663c <__cmpdf2+0x1c>
   d6694:	f85d 0b04 	ldr.w	r0, [sp], #4
   d6698:	4770      	bx	lr
   d669a:	bf00      	nop

000d669c <__aeabi_cdrcmple>:
   d669c:	4684      	mov	ip, r0
   d669e:	4610      	mov	r0, r2
   d66a0:	4662      	mov	r2, ip
   d66a2:	468c      	mov	ip, r1
   d66a4:	4619      	mov	r1, r3
   d66a6:	4663      	mov	r3, ip
   d66a8:	e000      	b.n	d66ac <__aeabi_cdcmpeq>
   d66aa:	bf00      	nop

000d66ac <__aeabi_cdcmpeq>:
   d66ac:	b501      	push	{r0, lr}
   d66ae:	f7ff ffb7 	bl	d6620 <__cmpdf2>
   d66b2:	2800      	cmp	r0, #0
   d66b4:	bf48      	it	mi
   d66b6:	f110 0f00 	cmnmi.w	r0, #0
   d66ba:	bd01      	pop	{r0, pc}

000d66bc <__aeabi_dcmpeq>:
   d66bc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d66c0:	f7ff fff4 	bl	d66ac <__aeabi_cdcmpeq>
   d66c4:	bf0c      	ite	eq
   d66c6:	2001      	moveq	r0, #1
   d66c8:	2000      	movne	r0, #0
   d66ca:	f85d fb08 	ldr.w	pc, [sp], #8
   d66ce:	bf00      	nop

000d66d0 <__aeabi_dcmplt>:
   d66d0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d66d4:	f7ff ffea 	bl	d66ac <__aeabi_cdcmpeq>
   d66d8:	bf34      	ite	cc
   d66da:	2001      	movcc	r0, #1
   d66dc:	2000      	movcs	r0, #0
   d66de:	f85d fb08 	ldr.w	pc, [sp], #8
   d66e2:	bf00      	nop

000d66e4 <__aeabi_dcmple>:
   d66e4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d66e8:	f7ff ffe0 	bl	d66ac <__aeabi_cdcmpeq>
   d66ec:	bf94      	ite	ls
   d66ee:	2001      	movls	r0, #1
   d66f0:	2000      	movhi	r0, #0
   d66f2:	f85d fb08 	ldr.w	pc, [sp], #8
   d66f6:	bf00      	nop

000d66f8 <__aeabi_dcmpge>:
   d66f8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d66fc:	f7ff ffce 	bl	d669c <__aeabi_cdrcmple>
   d6700:	bf94      	ite	ls
   d6702:	2001      	movls	r0, #1
   d6704:	2000      	movhi	r0, #0
   d6706:	f85d fb08 	ldr.w	pc, [sp], #8
   d670a:	bf00      	nop

000d670c <__aeabi_dcmpgt>:
   d670c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6710:	f7ff ffc4 	bl	d669c <__aeabi_cdrcmple>
   d6714:	bf34      	ite	cc
   d6716:	2001      	movcc	r0, #1
   d6718:	2000      	movcs	r0, #0
   d671a:	f85d fb08 	ldr.w	pc, [sp], #8
   d671e:	bf00      	nop

000d6720 <__aeabi_d2uiz>:
   d6720:	004a      	lsls	r2, r1, #1
   d6722:	d211      	bcs.n	d6748 <__aeabi_d2uiz+0x28>
   d6724:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6728:	d211      	bcs.n	d674e <__aeabi_d2uiz+0x2e>
   d672a:	d50d      	bpl.n	d6748 <__aeabi_d2uiz+0x28>
   d672c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6730:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d6734:	d40e      	bmi.n	d6754 <__aeabi_d2uiz+0x34>
   d6736:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d673a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d673e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d6742:	fa23 f002 	lsr.w	r0, r3, r2
   d6746:	4770      	bx	lr
   d6748:	f04f 0000 	mov.w	r0, #0
   d674c:	4770      	bx	lr
   d674e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d6752:	d102      	bne.n	d675a <__aeabi_d2uiz+0x3a>
   d6754:	f04f 30ff 	mov.w	r0, #4294967295
   d6758:	4770      	bx	lr
   d675a:	f04f 0000 	mov.w	r0, #0
   d675e:	4770      	bx	lr

000d6760 <__aeabi_uldivmod>:
   d6760:	b953      	cbnz	r3, d6778 <__aeabi_uldivmod+0x18>
   d6762:	b94a      	cbnz	r2, d6778 <__aeabi_uldivmod+0x18>
   d6764:	2900      	cmp	r1, #0
   d6766:	bf08      	it	eq
   d6768:	2800      	cmpeq	r0, #0
   d676a:	bf1c      	itt	ne
   d676c:	f04f 31ff 	movne.w	r1, #4294967295
   d6770:	f04f 30ff 	movne.w	r0, #4294967295
   d6774:	f000 b9a2 	b.w	d6abc <__aeabi_idiv0>
   d6778:	f1ad 0c08 	sub.w	ip, sp, #8
   d677c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d6780:	f000 f82a 	bl	d67d8 <__udivmoddi4>
   d6784:	f8dd e004 	ldr.w	lr, [sp, #4]
   d6788:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d678c:	b004      	add	sp, #16
   d678e:	4770      	bx	lr

000d6790 <__aeabi_d2ulz>:
   d6790:	b5d0      	push	{r4, r6, r7, lr}
   d6792:	2200      	movs	r2, #0
   d6794:	4b0e      	ldr	r3, [pc, #56]	; (d67d0 <__aeabi_d2ulz+0x40>)
   d6796:	4606      	mov	r6, r0
   d6798:	460f      	mov	r7, r1
   d679a:	f7ff fd27 	bl	d61ec <__aeabi_dmul>
   d679e:	f7ff ffbf 	bl	d6720 <__aeabi_d2uiz>
   d67a2:	4604      	mov	r4, r0
   d67a4:	f7ff fcac 	bl	d6100 <__aeabi_ui2d>
   d67a8:	2200      	movs	r2, #0
   d67aa:	4b0a      	ldr	r3, [pc, #40]	; (d67d4 <__aeabi_d2ulz+0x44>)
   d67ac:	f7ff fd1e 	bl	d61ec <__aeabi_dmul>
   d67b0:	4602      	mov	r2, r0
   d67b2:	460b      	mov	r3, r1
   d67b4:	4630      	mov	r0, r6
   d67b6:	4639      	mov	r1, r7
   d67b8:	f7ff fb64 	bl	d5e84 <__aeabi_dsub>
   d67bc:	f7ff ffb0 	bl	d6720 <__aeabi_d2uiz>
   d67c0:	4623      	mov	r3, r4
   d67c2:	2200      	movs	r2, #0
   d67c4:	ea42 0200 	orr.w	r2, r2, r0
   d67c8:	4610      	mov	r0, r2
   d67ca:	4619      	mov	r1, r3
   d67cc:	bdd0      	pop	{r4, r6, r7, pc}
   d67ce:	bf00      	nop
   d67d0:	3df00000 	.word	0x3df00000
   d67d4:	41f00000 	.word	0x41f00000

000d67d8 <__udivmoddi4>:
   d67d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d67dc:	468c      	mov	ip, r1
   d67de:	460e      	mov	r6, r1
   d67e0:	4604      	mov	r4, r0
   d67e2:	9d08      	ldr	r5, [sp, #32]
   d67e4:	2b00      	cmp	r3, #0
   d67e6:	d150      	bne.n	d688a <__udivmoddi4+0xb2>
   d67e8:	428a      	cmp	r2, r1
   d67ea:	4617      	mov	r7, r2
   d67ec:	d96c      	bls.n	d68c8 <__udivmoddi4+0xf0>
   d67ee:	fab2 fe82 	clz	lr, r2
   d67f2:	f1be 0f00 	cmp.w	lr, #0
   d67f6:	d00b      	beq.n	d6810 <__udivmoddi4+0x38>
   d67f8:	f1ce 0420 	rsb	r4, lr, #32
   d67fc:	fa20 f404 	lsr.w	r4, r0, r4
   d6800:	fa01 f60e 	lsl.w	r6, r1, lr
   d6804:	ea44 0c06 	orr.w	ip, r4, r6
   d6808:	fa02 f70e 	lsl.w	r7, r2, lr
   d680c:	fa00 f40e 	lsl.w	r4, r0, lr
   d6810:	ea4f 4917 	mov.w	r9, r7, lsr #16
   d6814:	0c22      	lsrs	r2, r4, #16
   d6816:	fbbc f0f9 	udiv	r0, ip, r9
   d681a:	fa1f f887 	uxth.w	r8, r7
   d681e:	fb09 c610 	mls	r6, r9, r0, ip
   d6822:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d6826:	fb00 f308 	mul.w	r3, r0, r8
   d682a:	42b3      	cmp	r3, r6
   d682c:	d909      	bls.n	d6842 <__udivmoddi4+0x6a>
   d682e:	19f6      	adds	r6, r6, r7
   d6830:	f100 32ff 	add.w	r2, r0, #4294967295
   d6834:	f080 8122 	bcs.w	d6a7c <__udivmoddi4+0x2a4>
   d6838:	42b3      	cmp	r3, r6
   d683a:	f240 811f 	bls.w	d6a7c <__udivmoddi4+0x2a4>
   d683e:	3802      	subs	r0, #2
   d6840:	443e      	add	r6, r7
   d6842:	1af6      	subs	r6, r6, r3
   d6844:	b2a2      	uxth	r2, r4
   d6846:	fbb6 f3f9 	udiv	r3, r6, r9
   d684a:	fb09 6613 	mls	r6, r9, r3, r6
   d684e:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d6852:	fb03 f808 	mul.w	r8, r3, r8
   d6856:	45a0      	cmp	r8, r4
   d6858:	d909      	bls.n	d686e <__udivmoddi4+0x96>
   d685a:	19e4      	adds	r4, r4, r7
   d685c:	f103 32ff 	add.w	r2, r3, #4294967295
   d6860:	f080 810a 	bcs.w	d6a78 <__udivmoddi4+0x2a0>
   d6864:	45a0      	cmp	r8, r4
   d6866:	f240 8107 	bls.w	d6a78 <__udivmoddi4+0x2a0>
   d686a:	3b02      	subs	r3, #2
   d686c:	443c      	add	r4, r7
   d686e:	ebc8 0404 	rsb	r4, r8, r4
   d6872:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d6876:	2100      	movs	r1, #0
   d6878:	2d00      	cmp	r5, #0
   d687a:	d062      	beq.n	d6942 <__udivmoddi4+0x16a>
   d687c:	fa24 f40e 	lsr.w	r4, r4, lr
   d6880:	2300      	movs	r3, #0
   d6882:	602c      	str	r4, [r5, #0]
   d6884:	606b      	str	r3, [r5, #4]
   d6886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d688a:	428b      	cmp	r3, r1
   d688c:	d907      	bls.n	d689e <__udivmoddi4+0xc6>
   d688e:	2d00      	cmp	r5, #0
   d6890:	d055      	beq.n	d693e <__udivmoddi4+0x166>
   d6892:	2100      	movs	r1, #0
   d6894:	e885 0041 	stmia.w	r5, {r0, r6}
   d6898:	4608      	mov	r0, r1
   d689a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d689e:	fab3 f183 	clz	r1, r3
   d68a2:	2900      	cmp	r1, #0
   d68a4:	f040 8090 	bne.w	d69c8 <__udivmoddi4+0x1f0>
   d68a8:	42b3      	cmp	r3, r6
   d68aa:	d302      	bcc.n	d68b2 <__udivmoddi4+0xda>
   d68ac:	4282      	cmp	r2, r0
   d68ae:	f200 80f8 	bhi.w	d6aa2 <__udivmoddi4+0x2ca>
   d68b2:	1a84      	subs	r4, r0, r2
   d68b4:	eb66 0603 	sbc.w	r6, r6, r3
   d68b8:	2001      	movs	r0, #1
   d68ba:	46b4      	mov	ip, r6
   d68bc:	2d00      	cmp	r5, #0
   d68be:	d040      	beq.n	d6942 <__udivmoddi4+0x16a>
   d68c0:	e885 1010 	stmia.w	r5, {r4, ip}
   d68c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d68c8:	b912      	cbnz	r2, d68d0 <__udivmoddi4+0xf8>
   d68ca:	2701      	movs	r7, #1
   d68cc:	fbb7 f7f2 	udiv	r7, r7, r2
   d68d0:	fab7 fe87 	clz	lr, r7
   d68d4:	f1be 0f00 	cmp.w	lr, #0
   d68d8:	d135      	bne.n	d6946 <__udivmoddi4+0x16e>
   d68da:	1bf3      	subs	r3, r6, r7
   d68dc:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d68e0:	fa1f fc87 	uxth.w	ip, r7
   d68e4:	2101      	movs	r1, #1
   d68e6:	fbb3 f0f8 	udiv	r0, r3, r8
   d68ea:	0c22      	lsrs	r2, r4, #16
   d68ec:	fb08 3610 	mls	r6, r8, r0, r3
   d68f0:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d68f4:	fb0c f300 	mul.w	r3, ip, r0
   d68f8:	42b3      	cmp	r3, r6
   d68fa:	d907      	bls.n	d690c <__udivmoddi4+0x134>
   d68fc:	19f6      	adds	r6, r6, r7
   d68fe:	f100 32ff 	add.w	r2, r0, #4294967295
   d6902:	d202      	bcs.n	d690a <__udivmoddi4+0x132>
   d6904:	42b3      	cmp	r3, r6
   d6906:	f200 80ce 	bhi.w	d6aa6 <__udivmoddi4+0x2ce>
   d690a:	4610      	mov	r0, r2
   d690c:	1af6      	subs	r6, r6, r3
   d690e:	b2a2      	uxth	r2, r4
   d6910:	fbb6 f3f8 	udiv	r3, r6, r8
   d6914:	fb08 6613 	mls	r6, r8, r3, r6
   d6918:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d691c:	fb0c fc03 	mul.w	ip, ip, r3
   d6920:	45a4      	cmp	ip, r4
   d6922:	d907      	bls.n	d6934 <__udivmoddi4+0x15c>
   d6924:	19e4      	adds	r4, r4, r7
   d6926:	f103 32ff 	add.w	r2, r3, #4294967295
   d692a:	d202      	bcs.n	d6932 <__udivmoddi4+0x15a>
   d692c:	45a4      	cmp	ip, r4
   d692e:	f200 80b5 	bhi.w	d6a9c <__udivmoddi4+0x2c4>
   d6932:	4613      	mov	r3, r2
   d6934:	ebcc 0404 	rsb	r4, ip, r4
   d6938:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d693c:	e79c      	b.n	d6878 <__udivmoddi4+0xa0>
   d693e:	4629      	mov	r1, r5
   d6940:	4628      	mov	r0, r5
   d6942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6946:	f1ce 0120 	rsb	r1, lr, #32
   d694a:	fa06 f30e 	lsl.w	r3, r6, lr
   d694e:	fa07 f70e 	lsl.w	r7, r7, lr
   d6952:	fa20 f901 	lsr.w	r9, r0, r1
   d6956:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d695a:	40ce      	lsrs	r6, r1
   d695c:	ea49 0903 	orr.w	r9, r9, r3
   d6960:	fbb6 faf8 	udiv	sl, r6, r8
   d6964:	ea4f 4419 	mov.w	r4, r9, lsr #16
   d6968:	fb08 661a 	mls	r6, r8, sl, r6
   d696c:	fa1f fc87 	uxth.w	ip, r7
   d6970:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
   d6974:	fb0a f20c 	mul.w	r2, sl, ip
   d6978:	429a      	cmp	r2, r3
   d697a:	fa00 f40e 	lsl.w	r4, r0, lr
   d697e:	d90a      	bls.n	d6996 <__udivmoddi4+0x1be>
   d6980:	19db      	adds	r3, r3, r7
   d6982:	f10a 31ff 	add.w	r1, sl, #4294967295
   d6986:	f080 8087 	bcs.w	d6a98 <__udivmoddi4+0x2c0>
   d698a:	429a      	cmp	r2, r3
   d698c:	f240 8084 	bls.w	d6a98 <__udivmoddi4+0x2c0>
   d6990:	f1aa 0a02 	sub.w	sl, sl, #2
   d6994:	443b      	add	r3, r7
   d6996:	1a9b      	subs	r3, r3, r2
   d6998:	fa1f f989 	uxth.w	r9, r9
   d699c:	fbb3 f1f8 	udiv	r1, r3, r8
   d69a0:	fb08 3311 	mls	r3, r8, r1, r3
   d69a4:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
   d69a8:	fb01 f60c 	mul.w	r6, r1, ip
   d69ac:	429e      	cmp	r6, r3
   d69ae:	d907      	bls.n	d69c0 <__udivmoddi4+0x1e8>
   d69b0:	19db      	adds	r3, r3, r7
   d69b2:	f101 32ff 	add.w	r2, r1, #4294967295
   d69b6:	d26b      	bcs.n	d6a90 <__udivmoddi4+0x2b8>
   d69b8:	429e      	cmp	r6, r3
   d69ba:	d969      	bls.n	d6a90 <__udivmoddi4+0x2b8>
   d69bc:	3902      	subs	r1, #2
   d69be:	443b      	add	r3, r7
   d69c0:	1b9b      	subs	r3, r3, r6
   d69c2:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   d69c6:	e78e      	b.n	d68e6 <__udivmoddi4+0x10e>
   d69c8:	f1c1 0e20 	rsb	lr, r1, #32
   d69cc:	fa22 f40e 	lsr.w	r4, r2, lr
   d69d0:	408b      	lsls	r3, r1
   d69d2:	4323      	orrs	r3, r4
   d69d4:	fa20 f70e 	lsr.w	r7, r0, lr
   d69d8:	fa06 f401 	lsl.w	r4, r6, r1
   d69dc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   d69e0:	fa26 f60e 	lsr.w	r6, r6, lr
   d69e4:	433c      	orrs	r4, r7
   d69e6:	fbb6 f9fc 	udiv	r9, r6, ip
   d69ea:	0c27      	lsrs	r7, r4, #16
   d69ec:	fb0c 6619 	mls	r6, ip, r9, r6
   d69f0:	fa1f f883 	uxth.w	r8, r3
   d69f4:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   d69f8:	fb09 f708 	mul.w	r7, r9, r8
   d69fc:	42b7      	cmp	r7, r6
   d69fe:	fa02 f201 	lsl.w	r2, r2, r1
   d6a02:	fa00 fa01 	lsl.w	sl, r0, r1
   d6a06:	d908      	bls.n	d6a1a <__udivmoddi4+0x242>
   d6a08:	18f6      	adds	r6, r6, r3
   d6a0a:	f109 30ff 	add.w	r0, r9, #4294967295
   d6a0e:	d241      	bcs.n	d6a94 <__udivmoddi4+0x2bc>
   d6a10:	42b7      	cmp	r7, r6
   d6a12:	d93f      	bls.n	d6a94 <__udivmoddi4+0x2bc>
   d6a14:	f1a9 0902 	sub.w	r9, r9, #2
   d6a18:	441e      	add	r6, r3
   d6a1a:	1bf6      	subs	r6, r6, r7
   d6a1c:	b2a0      	uxth	r0, r4
   d6a1e:	fbb6 f4fc 	udiv	r4, r6, ip
   d6a22:	fb0c 6614 	mls	r6, ip, r4, r6
   d6a26:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
   d6a2a:	fb04 f808 	mul.w	r8, r4, r8
   d6a2e:	45b8      	cmp	r8, r7
   d6a30:	d907      	bls.n	d6a42 <__udivmoddi4+0x26a>
   d6a32:	18ff      	adds	r7, r7, r3
   d6a34:	f104 30ff 	add.w	r0, r4, #4294967295
   d6a38:	d228      	bcs.n	d6a8c <__udivmoddi4+0x2b4>
   d6a3a:	45b8      	cmp	r8, r7
   d6a3c:	d926      	bls.n	d6a8c <__udivmoddi4+0x2b4>
   d6a3e:	3c02      	subs	r4, #2
   d6a40:	441f      	add	r7, r3
   d6a42:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
   d6a46:	ebc8 0707 	rsb	r7, r8, r7
   d6a4a:	fba0 8902 	umull	r8, r9, r0, r2
   d6a4e:	454f      	cmp	r7, r9
   d6a50:	4644      	mov	r4, r8
   d6a52:	464e      	mov	r6, r9
   d6a54:	d314      	bcc.n	d6a80 <__udivmoddi4+0x2a8>
   d6a56:	d029      	beq.n	d6aac <__udivmoddi4+0x2d4>
   d6a58:	b365      	cbz	r5, d6ab4 <__udivmoddi4+0x2dc>
   d6a5a:	ebba 0304 	subs.w	r3, sl, r4
   d6a5e:	eb67 0706 	sbc.w	r7, r7, r6
   d6a62:	fa07 fe0e 	lsl.w	lr, r7, lr
   d6a66:	40cb      	lsrs	r3, r1
   d6a68:	40cf      	lsrs	r7, r1
   d6a6a:	ea4e 0303 	orr.w	r3, lr, r3
   d6a6e:	e885 0088 	stmia.w	r5, {r3, r7}
   d6a72:	2100      	movs	r1, #0
   d6a74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6a78:	4613      	mov	r3, r2
   d6a7a:	e6f8      	b.n	d686e <__udivmoddi4+0x96>
   d6a7c:	4610      	mov	r0, r2
   d6a7e:	e6e0      	b.n	d6842 <__udivmoddi4+0x6a>
   d6a80:	ebb8 0402 	subs.w	r4, r8, r2
   d6a84:	eb69 0603 	sbc.w	r6, r9, r3
   d6a88:	3801      	subs	r0, #1
   d6a8a:	e7e5      	b.n	d6a58 <__udivmoddi4+0x280>
   d6a8c:	4604      	mov	r4, r0
   d6a8e:	e7d8      	b.n	d6a42 <__udivmoddi4+0x26a>
   d6a90:	4611      	mov	r1, r2
   d6a92:	e795      	b.n	d69c0 <__udivmoddi4+0x1e8>
   d6a94:	4681      	mov	r9, r0
   d6a96:	e7c0      	b.n	d6a1a <__udivmoddi4+0x242>
   d6a98:	468a      	mov	sl, r1
   d6a9a:	e77c      	b.n	d6996 <__udivmoddi4+0x1be>
   d6a9c:	3b02      	subs	r3, #2
   d6a9e:	443c      	add	r4, r7
   d6aa0:	e748      	b.n	d6934 <__udivmoddi4+0x15c>
   d6aa2:	4608      	mov	r0, r1
   d6aa4:	e70a      	b.n	d68bc <__udivmoddi4+0xe4>
   d6aa6:	3802      	subs	r0, #2
   d6aa8:	443e      	add	r6, r7
   d6aaa:	e72f      	b.n	d690c <__udivmoddi4+0x134>
   d6aac:	45c2      	cmp	sl, r8
   d6aae:	d3e7      	bcc.n	d6a80 <__udivmoddi4+0x2a8>
   d6ab0:	463e      	mov	r6, r7
   d6ab2:	e7d1      	b.n	d6a58 <__udivmoddi4+0x280>
   d6ab4:	4629      	mov	r1, r5
   d6ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6aba:	bf00      	nop

000d6abc <__aeabi_idiv0>:
   d6abc:	4770      	bx	lr
   d6abe:	bf00      	nop

000d6ac0 <__cxa_atexit>:
   d6ac0:	b510      	push	{r4, lr}
   d6ac2:	4c05      	ldr	r4, [pc, #20]	; (d6ad8 <__cxa_atexit+0x18>)
   d6ac4:	4613      	mov	r3, r2
   d6ac6:	b12c      	cbz	r4, d6ad4 <__cxa_atexit+0x14>
   d6ac8:	460a      	mov	r2, r1
   d6aca:	4601      	mov	r1, r0
   d6acc:	2002      	movs	r0, #2
   d6ace:	f3af 8000 	nop.w
   d6ad2:	bd10      	pop	{r4, pc}
   d6ad4:	4620      	mov	r0, r4
   d6ad6:	bd10      	pop	{r4, pc}
   d6ad8:	00000000 	.word	0x00000000

000d6adc <memcpy>:
   d6adc:	b510      	push	{r4, lr}
   d6ade:	1e43      	subs	r3, r0, #1
   d6ae0:	440a      	add	r2, r1
   d6ae2:	4291      	cmp	r1, r2
   d6ae4:	d004      	beq.n	d6af0 <memcpy+0x14>
   d6ae6:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6aea:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6aee:	e7f8      	b.n	d6ae2 <memcpy+0x6>
   d6af0:	bd10      	pop	{r4, pc}

000d6af2 <memset>:
   d6af2:	4402      	add	r2, r0
   d6af4:	4603      	mov	r3, r0
   d6af6:	4293      	cmp	r3, r2
   d6af8:	d002      	beq.n	d6b00 <memset+0xe>
   d6afa:	f803 1b01 	strb.w	r1, [r3], #1
   d6afe:	e7fa      	b.n	d6af6 <memset+0x4>
   d6b00:	4770      	bx	lr
	...

000d6b04 <srand>:
   d6b04:	b538      	push	{r3, r4, r5, lr}
   d6b06:	4b12      	ldr	r3, [pc, #72]	; (d6b50 <srand+0x4c>)
   d6b08:	681c      	ldr	r4, [r3, #0]
   d6b0a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6b0c:	4605      	mov	r5, r0
   d6b0e:	b9d3      	cbnz	r3, d6b46 <srand+0x42>
   d6b10:	2018      	movs	r0, #24
   d6b12:	f7fd feb9 	bl	d4888 <malloc>
   d6b16:	f243 330e 	movw	r3, #13070	; 0x330e
   d6b1a:	63a0      	str	r0, [r4, #56]	; 0x38
   d6b1c:	8003      	strh	r3, [r0, #0]
   d6b1e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d6b22:	8043      	strh	r3, [r0, #2]
   d6b24:	f241 2334 	movw	r3, #4660	; 0x1234
   d6b28:	8083      	strh	r3, [r0, #4]
   d6b2a:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d6b2e:	80c3      	strh	r3, [r0, #6]
   d6b30:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d6b34:	8103      	strh	r3, [r0, #8]
   d6b36:	2305      	movs	r3, #5
   d6b38:	8143      	strh	r3, [r0, #10]
   d6b3a:	230b      	movs	r3, #11
   d6b3c:	8183      	strh	r3, [r0, #12]
   d6b3e:	2201      	movs	r2, #1
   d6b40:	2300      	movs	r3, #0
   d6b42:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6b46:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6b48:	2200      	movs	r2, #0
   d6b4a:	611d      	str	r5, [r3, #16]
   d6b4c:	615a      	str	r2, [r3, #20]
   d6b4e:	bd38      	pop	{r3, r4, r5, pc}
   d6b50:	2003e3a0 	.word	0x2003e3a0

000d6b54 <strcpy>:
   d6b54:	4603      	mov	r3, r0
   d6b56:	f811 2b01 	ldrb.w	r2, [r1], #1
   d6b5a:	f803 2b01 	strb.w	r2, [r3], #1
   d6b5e:	2a00      	cmp	r2, #0
   d6b60:	d1f9      	bne.n	d6b56 <strcpy+0x2>
   d6b62:	4770      	bx	lr

000d6b64 <strdup>:
   d6b64:	4b02      	ldr	r3, [pc, #8]	; (d6b70 <strdup+0xc>)
   d6b66:	4601      	mov	r1, r0
   d6b68:	6818      	ldr	r0, [r3, #0]
   d6b6a:	f000 b803 	b.w	d6b74 <_strdup_r>
   d6b6e:	bf00      	nop
   d6b70:	2003e3a0 	.word	0x2003e3a0

000d6b74 <_strdup_r>:
   d6b74:	b570      	push	{r4, r5, r6, lr}
   d6b76:	4606      	mov	r6, r0
   d6b78:	4608      	mov	r0, r1
   d6b7a:	460c      	mov	r4, r1
   d6b7c:	f000 f80d 	bl	d6b9a <strlen>
   d6b80:	1c45      	adds	r5, r0, #1
   d6b82:	4629      	mov	r1, r5
   d6b84:	4630      	mov	r0, r6
   d6b86:	f7fd fe9f 	bl	d48c8 <_malloc_r>
   d6b8a:	4606      	mov	r6, r0
   d6b8c:	b118      	cbz	r0, d6b96 <_strdup_r+0x22>
   d6b8e:	462a      	mov	r2, r5
   d6b90:	4621      	mov	r1, r4
   d6b92:	f7ff ffa3 	bl	d6adc <memcpy>
   d6b96:	4630      	mov	r0, r6
   d6b98:	bd70      	pop	{r4, r5, r6, pc}

000d6b9a <strlen>:
   d6b9a:	4603      	mov	r3, r0
   d6b9c:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6ba0:	2a00      	cmp	r2, #0
   d6ba2:	d1fb      	bne.n	d6b9c <strlen+0x2>
   d6ba4:	1a18      	subs	r0, r3, r0
   d6ba6:	3801      	subs	r0, #1
   d6ba8:	4770      	bx	lr

000d6baa <link_code_end>:
	...

000d6bac <dynalib_user>:
   d6bac:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d6bbc:	0000 0000 6944 6e64 7427 6620 6e69 2064     ....Didn't find 
   d6bcc:	6953 3131 3534 4f00 214b 7b00 2220 5655     Si1145.OK!.{ "UV
   d6bdc:	6956 2273 203a 0022 2c22 2200 5655 5249     Vis": ".",."UVIR
   d6bec:	3a22 2220 2200 5655 6449 2278 203a 0022     ": "."UVIdx": ".
   d6bfc:	6b22 7965 3a22 2220 2200 7d20 5500 0056     "key": "." }.UV.
   d6c0c:	3253 4c37 5758 4c35 4151 494c 5037 344f     S27LXW5LQALI7PO4
   d6c1c:	0000 0000                                   ....

000d6c20 <_ZTVN5spark13EthernetClassE>:
	...
   d6c28:	4937 000d 492d 000d 4923 000d 4919 000d     7I..-I..#I...I..
   d6c38:	490d 000d 4901 000d 48f5 000d 48ed 000d     .I...I...H...H..
   d6c48:	48e3 000d 48d9 000d 5a75 000d               .H...H..uZ..

000d6c54 <_ZTV8SPIClass>:
	...
   d6c5c:	4955 000d 4957 000d 6162 6475 5300 7265     UI..WI..baud.Ser
   d6c6c:	6169 006c 6553 6972 6c61 0031 7974 6570     ial.Serial1.type
   d6c7c:	7000 7261 6d61 6300 646d 6900 0064 6e68     .param.cmd.id.hn
   d6c8c:	0064 7473 6d72 6600 6c69 0074 766c 006c     d.strm.filt.lvl.
   d6c9c:	6461 4864 6e61 6c64 7265 7200 6d65 766f     addHandler.remov
   d6cac:	4865 6e61 6c64 7265 6500 756e 486d 6e61     eHandler.enumHan
   d6cbc:	6c64 7265 0073 534a 4e4f 7453 6572 6d61     dlers.JSONStream
   d6ccc:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   d6cdc:	3130 7530 0020 205d 2500 0064 202c 2800     010u .] .%d., .(
   d6cec:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
   d6cfc:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
   d6d0c:	0066 6e6c 6600 006e 6f63 6564 6400 7465     f.ln.fn.code.det
   d6d1c:	6961 006c 6f6e 656e 7400 6172 6563 6900     ail.none.trace.i
   d6d2c:	666e 006f 6177 6e72 6500 7272 726f 7000     nfo.warn.error.p
   d6d3c:	6e61 6369 6100 6c6c 5a00 2500 302b 6433     anic.all.Z.%+03d
   d6d4c:	253a 3230 0075 5925 252d 2d6d 6425 2554     :%02u.%Y-%m-%dT%
   d6d5c:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
   d6d6c:	0065 0000                                   e...

000d6d70 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d6d78:	4ee1 000d 4ee7 000d 4f2b 000d 4ef5 000d     .N...N..+O...N..
   d6d88:	4ee3 000d                                   .N..

000d6d8c <_ZTV9IPAddress>:
	...
   d6d94:	5479 000d 5469 000d 546b 000d               yT..iT..kT..

000d6da0 <_ZTV9USBSerial>:
	...
   d6da8:	5551 000d 55a1 000d 55af 000d 4cad 000d     QU...U...U...L..
   d6db8:	558d 000d 5553 000d 5569 000d 559b 000d     .U..SU..iU...U..
   d6dc8:	557f 000d 554d 000d                         .U..MU..

000d6dd0 <_ZTV11USARTSerial>:
	...
   d6dd8:	5655 000d 56a5 000d 56b3 000d 4cad 000d     UV...V...V...L..
   d6de8:	5669 000d 568b 000d 5677 000d 569f 000d     iV...V..wV...V..
   d6df8:	5657 000d 565b 000d                         WV..[V..

000d6e00 <_ZTV7TwoWire>:
	...
   d6e08:	5779 000d 57c3 000d 579b 000d 577b 000d     yW...W...W..{W..
   d6e18:	57a3 000d 57ab 000d 57b3 000d 57bb 000d     .W...W...W...W..

000d6e28 <_ZTVN5spark9MeshClassE>:
	...
   d6e30:	588d 000d 5883 000d 5879 000d 586f 000d     .X...X..yX..oX..
   d6e40:	5863 000d 5857 000d 584b 000d 5843 000d     cX..WX..KX..CX..
   d6e50:	5839 000d 582f 000d 5a75 000d               9X../X..uZ..

000d6e5c <_ZTVN5spark9WiFiClassE>:
	...
   d6e64:	59ef 000d 59e5 000d 59db 000d 5991 000d     .Y...Y...Y...Y..
   d6e74:	59cf 000d 59c3 000d 59b7 000d 59af 000d     .Y...Y...Y...Y..
   d6e84:	59a5 000d 599b 000d 5a75 000d               .Y...Y..uZ..

000d6e90 <_ZTVN5spark12NetworkClassE>:
	...
   d6e98:	5a0d 000d 5a17 000d 5a21 000d 5a2b 000d     .Z...Z..!Z..+Z..
   d6ea8:	5a35 000d 5a41 000d 5a4d 000d 5a59 000d     5Z..AZ..MZ..YZ..
   d6eb8:	5a61 000d 5a6b 000d 5a75 000d               aZ..kZ..uZ..

000d6ec4 <__sf_fake_stdin>:
	...

000d6ee4 <__sf_fake_stdout>:
	...

000d6f04 <__sf_fake_stderr>:
	...
   d6f24:	0043                                        C.

000d6f26 <link_const_variable_data_end>:
	...

000d6f28 <link_constructors_location>:
   d6f28:	000d426d 	.word	0x000d426d
   d6f2c:	000d451d 	.word	0x000d451d
   d6f30:	000d4941 	.word	0x000d4941
   d6f34:	000d498d 	.word	0x000d498d
   d6f38:	000d4c9d 	.word	0x000d4c9d
   d6f3c:	000d4d89 	.word	0x000d4d89
   d6f40:	000d4d99 	.word	0x000d4d99
   d6f44:	000d4df1 	.word	0x000d4df1
   d6f48:	000d5941 	.word	0x000d5941
   d6f4c:	000d59f9 	.word	0x000d59f9
   d6f50:	000d5b41 	.word	0x000d5b41
   d6f54:	000d5b55 	.word	0x000d5b55
   d6f58:	000d5bed 	.word	0x000d5bed
   d6f5c:	000d5c71 	.word	0x000d5c71
   d6f60:	000d5d35 	.word	0x000d5d35
   d6f64:	000d5df9 	.word	0x000d5df9

000d6f68 <link_constructors_end>:
	...
